{"version":3,"file":"static/js/2141.259a8fcc.chunk.js","mappings":"iRA8EA,UAjEuB,WACrB,IAAAA,GAAwBC,EAAAA,EAAAA,UAAiB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAAwBL,EAAAA,EAAAA,UAAiB,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAArCE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAAsBT,EAAAA,EAAAA,UAAqB,CACzCU,WAAW,EACXC,iBAAiB,EACjBC,QAAS,EACTC,MAAM,EACNC,SAAU,KALLC,GAMLb,EAAAA,EAAAA,GAAAO,EAAA,GANgB,GAOlBO,GAAsBhB,EAAAA,EAAAA,UAAqB,CACzCU,WAAW,EACXC,iBAAiB,EACjBC,QAAS,EACTC,MAAM,EACNC,SAAU,KALLG,GAMLf,EAAAA,EAAAA,GAAAc,EAAA,GANgB,GAoBlB,OACEE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,OAAQ,QAASC,SAAA,EAC1BC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAAAG,UACFC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,QAPY,WARR,IAACC,EASjBlB,GATiBkB,EASCvB,IARM,KAAVuB,GAGdC,QAAQC,IAAIC,IAAAA,MAAYH,KACjBI,EAAAA,EAAAA,GAAOC,EAAAA,GAAAA,UAAeF,IAAAA,MAAYH,IAAS,SAHzCA,EAQX,EAKyCJ,SAAC,oBAEtCJ,EAAAA,EAAAA,MAACc,EAAAA,GAAI,CAACC,WAAS,EAACb,GAAI,CAAEC,OAAQ,qBAAsBC,SAAA,EAClDC,EAAAA,EAAAA,KAACS,EAAAA,GAAI,CAACE,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGhB,GAAI,CAAEC,OAAQ,QAASC,UAC/CC,EAAAA,EAAAA,KAACc,EAAAA,GAAS,CACRC,MAAM,WACNC,YAAY,OACZC,WAAYzB,EACZW,MAAOvB,EACPsC,SAAUrC,EACVsC,KAAK,QACLC,MAAM,OACNtB,OAAO,YAGXE,EAAAA,EAAAA,KAACS,EAAAA,GAAI,CAACE,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGhB,GAAI,CAAEC,OAAQ,QAASC,UAC/CC,EAAAA,EAAAA,KAACc,EAAAA,GAAS,CACRC,MAAM,WACNC,YAAY,OACZC,WAAYvB,EACZS,MAAOnB,EACPkC,SAAUjC,EACVkC,KAAK,OACLC,MAAM,OACNtB,OAAO,gBAMnB,C,2ICtEaS,EAAS,SAACJ,EAAekB,GACpC,GAAe,QAAXA,EACF,OAAOC,IAAUnB,GAEnB,IACE,OAAOoB,IAAAA,OAAgBpB,EAAO,CAC5BkB,OAAAA,EACAG,QAAS,CAACC,IAAqBC,MAEnC,CAAE,MAAOC,GACPvB,QAAQwB,MAAMD,EAChB,CACA,OAAOxB,CACT,C","sources":["pages/json/JsonToYaml.tsx","utils/formatter.ts"],"sourcesContent":["import { Box, Button, Grid } from '@mui/material';\nimport JSON5 from 'json5';\nimport { FC, useState } from 'react';\nimport AceEditor from 'react-ace';\nimport { AceOptions } from 'react-ace/types';\nimport YAML from 'yaml';\nimport { format, parser } from '../../utils/formatter';\n\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\nimport 'ace-builds/src-min-noconflict/mode-json5';\nimport 'ace-builds/src-min-noconflict/mode-yaml';\nimport 'ace-builds/src-min-noconflict/theme-textmate';\n\nconst JsonToYaml: FC = () => {\n  const [json, setJson] = useState<string>('');\n  const [yaml, setYaml] = useState<string>('');\n  const [jsonOptions] = useState<AceOptions>({\n    useWorker: false,\n    showLineNumbers: true,\n    tabSize: 2,\n    wrap: true,\n    fontSize: 14,\n  });\n  const [yamlOptions] = useState<AceOptions>({\n    useWorker: false,\n    showLineNumbers: true,\n    tabSize: 2,\n    wrap: true,\n    fontSize: 14,\n  });\n\n  const json2yaml = (value: string): string => {\n    if (!value || value === '') {\n      return value;\n    }\n    console.log(JSON5.parse(value));\n    return format(YAML.stringify(JSON5.parse(value)), 'yaml' as parser);\n  };\n\n  const json2yamlBtnClick = () => {\n    setYaml(json2yaml(json));\n  };\n\n  return (\n    <Box sx={{ height: '100%' }}>\n      <Box>\n        <Button onClick={json2yamlBtnClick}>JSON =&gt; YAML</Button>\n      </Box>\n      <Grid container sx={{ height: 'calc(100% - 37px)' }}>\n        <Grid item xs={12} md={6} sx={{ height: '100%' }}>\n          <AceEditor\n            theme=\"textmate\"\n            placeholder=\"JSON\"\n            setOptions={jsonOptions}\n            value={json}\n            onChange={setJson}\n            mode=\"json5\"\n            width=\"100%\"\n            height=\"100%\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6} sx={{ height: '100%' }}>\n          <AceEditor\n            theme=\"textmate\"\n            placeholder=\"YAML\"\n            setOptions={yamlOptions}\n            value={yaml}\n            onChange={setYaml}\n            mode=\"yaml\"\n            width=\"100%\"\n            height=\"100%\"\n          />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default JsonToYaml;\n","import prettierBabelPlugin from 'prettier/parser-babel';\nimport parserYaml from 'prettier/parser-yaml';\nimport prettier from 'prettier/standalone';\nimport xmlFormat from 'xml-formatter';\n\nexport type parser = 'json' | 'json5' | 'yaml' | 'xml';\nexport const format = (value: string, parser: parser) => {\n  if (parser === 'xml') {\n    return xmlFormat(value);\n  }\n  try {\n    return prettier.format(value, {\n      parser,\n      plugins: [prettierBabelPlugin, parserYaml],\n    });\n  } catch (e) {\n    console.error(e);\n  }\n  return value;\n};\n"],"names":["_useState","useState","_useState2","_slicedToArray","json","setJson","_useState3","_useState4","yaml","setYaml","_useState5","useWorker","showLineNumbers","tabSize","wrap","fontSize","jsonOptions","_useState7","yamlOptions","_jsxs","Box","sx","height","children","_jsx","Button","onClick","value","console","log","JSON5","format","YAML","Grid","container","item","xs","md","AceEditor","theme","placeholder","setOptions","onChange","mode","width","parser","xmlFormat","prettier","plugins","prettierBabelPlugin","parserYaml","e","error"],"sourceRoot":""}