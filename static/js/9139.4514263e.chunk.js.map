{"version":3,"file":"static/js/9139.4514263e.chunk.js","mappings":"8OAqCA,EA/B0B,SAACA,GACzB,IAAMC,GAAeC,EAAAA,EAAAA,UACfC,GAAYD,EAAAA,EAAAA,UA0BlB,OAxBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,CACdC,OAAQL,EAAaM,QACrBP,MAAO,CAAC,GAKV,OAFAG,EAAUI,QAAU,IAAIC,EAAAA,GAAWH,GAE5B,WAEDF,EAAUI,UACZJ,EAAUI,QAAQE,UAClBN,EAAUI,aAAUG,EAExB,CACF,GAAG,KAEHN,EAAAA,EAAAA,YAAU,WACgB,IAAD,EAAnBD,EAAUI,UAEK,QAAjB,EAAAJ,EAAUI,eAAO,OAAjB,EAAmBI,aAAY,kBAAKX,GAAK,IAAEY,OAAQC,KAEvD,GAAG,CAACb,KAEG,SAACc,EAAA,EAAG,CAACC,IAAKd,EAAce,OAAO,QACxC,ECcA,EAvC4B,SAAChB,GAC3B,IAMMiB,GAAW,OAALjB,QAAK,IAALA,OAAK,EAALA,EAAOiB,MAAO,IAC1B,GAAsCC,EAAAA,EAAAA,GAAoB,eAAcD,GAAO,CAAEE,aAP5D,CACnBC,KAAM,OACNC,QAAS,CACPC,KAAM,OAIsF,eAAzFC,EAAW,KAAEC,EAAc,KAqBlC,OACE,SAAC,EAAiB,CAChBJ,UApBkBV,IAAhBa,GAA6C,OAAhBA,EACxBE,EAAAA,GAAAA,KAEFF,EAAYH,KAkBjBC,QAASE,EAAYF,QACrBK,SAhBa,SAACL,GAChBG,GAAe,SAACG,GACd,OAAO,kBAAKA,GAAQ,IAAEN,QAASA,GACjC,GACF,EAaIO,aAXgB,SAACR,GACnBI,GAAe,SAACG,GACd,OAAO,kBAAKA,GAAQ,IAAEP,KAAMA,GAC9B,GACF,GAUF,C","sources":["components/VanillaJSONEditor.tsx","pages/json/JsonEditor.tsx"],"sourcesContent":["import { Box } from '@mui/material';\nimport * as LosslessJSON from 'lossless-json';\nimport { useEffect, useRef } from 'react';\n\nimport { JSONEditor, JSONEditorPropsOptional } from 'vanilla-jsoneditor';\n\nconst VanillaJSONEditor = (props: JSONEditorPropsOptional) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const editorRef = useRef<JSONEditor>();\n\n  useEffect(() => {\n    const options = {\n      target: containerRef.current,\n      props: {},\n    };\n    // @ts-ignore\n    editorRef.current = new JSONEditor(options);\n\n    return () => {\n      // destroy editor\n      if (editorRef.current) {\n        editorRef.current.destroy();\n        editorRef.current = undefined;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (editorRef.current) {\n      // @ts-ignore\n      editorRef.current?.updateProps({ ...props, parser: LosslessJSON });\n    }\n  }, [props]);\n\n  return <Box ref={containerRef} height=\"100%\" />;\n};\n\nexport default VanillaJSONEditor;\n","import { useLocalStorageState } from 'ahooks';\nimport { FC } from 'react';\nimport { Content, Mode } from 'vanilla-jsoneditor';\n\nimport VanillaJSONEditor from '../../components/VanillaJSONEditor';\n\ninterface Props {\n  idx?: string;\n}\n\nconst JSONBeta: FC<Props> = (props) => {\n  const defaultValue = {\n    mode: 'text',\n    content: {\n      text: '',\n    },\n  };\n  const idx = props?.idx || '0';\n  const [jsonStorage, setJsonStorage] = useLocalStorageState<any>(`json-${idx}`, { defaultValue });\n\n  const resolveMode = (): Mode | undefined => {\n    if (jsonStorage === undefined || jsonStorage === null) {\n      return Mode.text;\n    }\n    return jsonStorage.mode as Mode;\n  };\n\n  const onChange = (content: Content) => {\n    setJsonStorage((oldValue: any) => {\n      return { ...oldValue, content: content };\n    });\n  };\n\n  const onChangMode = (mode: Mode) => {\n    setJsonStorage((oldValue: any) => {\n      return { ...oldValue, mode: mode };\n    });\n  };\n\n  return (\n    <VanillaJSONEditor\n      mode={resolveMode()}\n      content={jsonStorage.content}\n      onChange={onChange}\n      onChangeMode={onChangMode}\n    />\n  );\n};\n\nexport default JSONBeta;\n"],"names":["props","containerRef","useRef","editorRef","useEffect","options","target","current","JSONEditor","destroy","undefined","updateProps","parser","LosslessJSON","Box","ref","height","idx","useLocalStorageState","defaultValue","mode","content","text","jsonStorage","setJsonStorage","Mode","onChange","oldValue","onChangeMode"],"sourceRoot":""}