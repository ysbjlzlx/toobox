{"version":3,"file":"static/js/768.ded58624.chunk.js","mappings":"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","sources":["components/ContentCopyAdornment.tsx","pages/BSONObjectID.tsx","../node_modules/@mui/icons-material/esm/Refresh.js","../node_modules/bson-objectid/objectid.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { IconButton, InputAdornment, Snackbar } from '@mui/material';\nimport { ContentCopy } from '@mui/icons-material';\n// @ts-ignore\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\ninterface Props {\n  content?: string | undefined;\n  onCopy?: Function | undefined;\n}\n\nexport default function ContentCopyAdornment({ content, onCopy }: Props) {\n  const [open, setOpen] = useState<boolean>(false);\n  const handleOnCopy = (text: string, result: DataTransfer) => {\n    setOpen(true);\n    if (onCopy) {\n      onCopy(text, result);\n    }\n  };\n\n  const handleClose = () => {\n    setOpen(!open);\n  };\n  return (\n    <React.Fragment>\n      <CopyToClipboard text={content} onCopy={handleOnCopy}>\n        <InputAdornment position={'end'}>\n          <IconButton aria-label={'Copy content'}>\n            <ContentCopy />\n          </IconButton>\n        </InputAdornment>\n      </CopyToClipboard>\n\n      <Snackbar open={open} onClose={handleClose} autoHideDuration={3000} message={'复制成功'} />\n    </React.Fragment>\n  );\n}\n","import { Refresh as RefreshIcon } from '@mui/icons-material';\nimport { Box, Container, IconButton, InputAdornment, TextField, Typography } from '@mui/material';\nimport ObjectID from 'bson-objectid';\nimport { useEffect, useState } from 'react';\nimport ContentCopyAdornment from '../components/ContentCopyAdornment';\n\nconst BSONObjectID = () => {\n  const [hexString, setHexString] = useState<string>('');\n\n  useEffect(() => {\n    refreshHexString();\n  }, []);\n\n  const refreshHexString = () => {\n    setHexString(ObjectID().toHexString());\n  };\n\n  const RefreshAdornment = () => {\n    return (\n      <InputAdornment position={'end'}>\n        <IconButton aria-label={'Refresh hex'} onClick={refreshHexString}>\n          <RefreshIcon />\n        </IconButton>\n      </InputAdornment>\n    );\n  };\n  return (\n    <Container>\n      <Typography variant={'h2'}>BSON ObjectID</Typography>\n      <Box sx={{ mt: 2 }}>\n        <TextField\n          label={'hex'}\n          value={hexString}\n          fullWidth\n          InputProps={{\n            endAdornment: (\n              <>\n                <RefreshAdornment />\n                <ContentCopyAdornment content={hexString} />\n              </>\n            ),\n          }}\n        />\n      </Box>\n    </Container>\n  );\n};\nexport default BSONObjectID;\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"\n}), 'Refresh');","\nvar MACHINE_ID = Math.floor(Math.random() * 0xFFFFFF);\nvar index = ObjectID.index = parseInt(Math.random() * 0xFFFFFF, 10);\nvar pid = (typeof process === 'undefined' || typeof process.pid !== 'number' ? Math.floor(Math.random() * 100000) : process.pid) % 0xFFFF;\n\n/**\n * Determine if an object is Buffer\n *\n * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * License:  MIT\n *\n */\nvar isBuffer = function (obj) {\n  return !!(\n  obj != null &&\n  obj.constructor &&\n  typeof obj.constructor.isBuffer === 'function' &&\n  obj.constructor.isBuffer(obj)\n  )\n};\n\n// Precomputed hex table enables speedy hex string conversion\nvar hexTable = [];\nfor (var i = 0; i < 256; i++) {\n  hexTable[i] = (i <= 15 ? '0' : '') + i.toString(16);\n}\n\n// Regular expression that checks for hex value\nvar checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');\n\n// Lookup tables\nvar decodeLookup = [];\ni = 0;\nwhile (i < 10) decodeLookup[0x30 + i] = i++;\nwhile (i < 16) decodeLookup[0x41 - 10 + i] = decodeLookup[0x61 - 10 + i] = i++;\n\n/**\n * Create a new immutable ObjectID instance\n *\n * @class Represents the BSON ObjectID type\n * @param {String|Number} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n * @return {Object} instance of ObjectID.\n */\nfunction ObjectID(id) {\n  if(!(this instanceof ObjectID)) return new ObjectID(id);\n  if(id && ((id instanceof ObjectID) || id._bsontype===\"ObjectID\"))\n    return id;\n\n  this._bsontype = 'ObjectID';\n\n  // The most common usecase (blank id, new objectId instance)\n  if (id == null || typeof id === 'number') {\n    // Generate a new id\n    this.id = this.generate(id);\n    // Return the object\n    return;\n  }\n\n  // Check if the passed in id is valid\n  var valid = ObjectID.isValid(id);\n\n  // Throw an error if it's not a valid setup\n  if (!valid && id != null) {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  } else if (valid && typeof id === 'string' && id.length === 24) {\n    return ObjectID.createFromHexString(id);\n  } else if (id != null && id.length === 12) {\n    // assume 12 byte string\n    this.id = id;\n  } else if (id != null && typeof id.toHexString === 'function') {\n    // Duck-typing to support ObjectId from different npm packages\n    return id;\n  } else {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  }\n}\nmodule.exports = ObjectID;\nObjectID.default = ObjectID;\n\n/**\n * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n *\n * @param {Number} time an integer number representing a number of seconds.\n * @return {ObjectID} return the created ObjectID\n * @api public\n */\nObjectID.createFromTime = function(time){\n  time = parseInt(time, 10) % 0xFFFFFFFF;\n  return new ObjectID(hex(8,time)+\"0000000000000000\");\n};\n\n/**\n * Creates an ObjectID from a hex string representation of an ObjectID.\n *\n * @param {String} hexString create a ObjectID from a passed in 24 byte hexstring.\n * @return {ObjectID} return the created ObjectID\n * @api public\n */\nObjectID.createFromHexString = function(hexString) {\n  // Throw an error if it's not a valid setup\n  if (typeof hexString === 'undefined' || (hexString != null && hexString.length !== 24)) {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  }\n\n  // Calculate lengths\n  var data = '';\n  var i = 0;\n\n  while (i < 24) {\n    data += String.fromCharCode((decodeLookup[hexString.charCodeAt(i++)] << 4) | decodeLookup[hexString.charCodeAt(i++)]);\n  }\n\n  return new ObjectID(data);\n};\n\n/**\n * Checks if a value is a valid bson ObjectId\n *\n * @param {String} objectid Can be a 24 byte hex string or an instance of ObjectID.\n * @return {Boolean} return true if the value is a valid bson ObjectID, return false otherwise.\n * @api public\n *\n * THE NATIVE DOCUMENTATION ISN'T CLEAR ON THIS GUY!\n * http://mongodb.github.io/node-mongodb-native/api-bson-generated/objectid.html#objectid-isvalid\n */\nObjectID.isValid = function(id) {\n  if (id == null) return false;\n\n  if (typeof id === 'number') {\n    return true;\n  }\n\n  if (typeof id === 'string') {\n    return id.length === 12 || (id.length === 24 && checkForHexRegExp.test(id));\n  }\n\n  if (id instanceof ObjectID) {\n    return true;\n  }\n\n  if (isBuffer(id)) {\n    return true;\n  }\n\n  // Duck-Typing detection of ObjectId like objects\n  if (\n      typeof id.toHexString === 'function' &&\n      (id.id instanceof _Buffer || typeof id.id === 'string')\n  ) {\n    return id.id.length === 12 || (id.id.length === 24 && checkForHexRegExp.test(id.id));\n  }\n\n  return false;\n};\n\nObjectID.prototype = {\n  constructor: ObjectID,\n\n  /**\n   * Return the ObjectID id as a 24 byte hex string representation\n   *\n   * @return {String} return the 24 byte hex string representation.\n   * @api public\n   */\n  toHexString: function() {\n    if (!this.id || !this.id.length) {\n      throw new Error(\n        'invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [' +\n          JSON.stringify(this.id) +\n          ']'\n      );\n    }\n\n    if (this.id.length === 24) {\n      return this.id;\n    }\n\n    if (isBuffer(this.id)) {\n      return this.id.toString('hex')\n    }\n\n    var hexString = '';\n    for (var i = 0; i < this.id.length; i++) {\n      hexString += hexTable[this.id.charCodeAt(i)];\n    }\n\n    return hexString;\n  },\n\n  /**\n   * Compares the equality of this ObjectID with `otherID`.\n   *\n   * @param {Object} otherId ObjectID instance to compare against.\n   * @return {Boolean} the result of comparing two ObjectID's\n   * @api public\n   */\n  equals: function (otherId){\n    if (otherId instanceof ObjectID) {\n      return this.toString() === otherId.toString();\n    } else if (\n      typeof otherId === 'string' &&\n      ObjectID.isValid(otherId) &&\n      otherId.length === 12 &&\n      isBuffer(this.id)\n    ) {\n      return otherId === this.id.toString('binary');\n    } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 24) {\n      return otherId.toLowerCase() === this.toHexString();\n    } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 12) {\n      return otherId === this.id;\n    } else if (otherId != null && (otherId instanceof ObjectID || otherId.toHexString)) {\n      return otherId.toHexString() === this.toHexString();\n    } else {\n      return false;\n    }\n  },\n\n  /**\n   * Returns the generation date (accurate up to the second) that this ID was generated.\n   *\n   * @return {Date} the generation date\n   * @api public\n   */\n  getTimestamp: function(){\n    var timestamp = new Date();\n    var time;\n    if (isBuffer(this.id)) {\n      time = this.id[3] | (this.id[2] << 8) | (this.id[1] << 16) | (this.id[0] << 24);\n    } else {\n      time = this.id.charCodeAt(3) | (this.id.charCodeAt(2) << 8) | (this.id.charCodeAt(1) << 16) | (this.id.charCodeAt(0) << 24);\n    }\n    timestamp.setTime(Math.floor(time) * 1000);\n    return timestamp;\n  },\n\n  /**\n  * Generate a 12 byte id buffer used in ObjectID's\n  *\n  * @method\n  * @param {number} [time] optional parameter allowing to pass in a second based timestamp.\n  * @return {string} return the 12 byte id buffer string.\n  */\n  generate: function (time) {\n    if ('number' !== typeof time) {\n      time = ~~(Date.now() / 1000);\n    }\n\n    //keep it in the ring!\n    time = parseInt(time, 10) % 0xFFFFFFFF;\n\n    var inc = next();\n\n    return String.fromCharCode(\n      ((time >> 24) & 0xFF),\n      ((time >> 16) & 0xFF),\n      ((time >> 8) & 0xFF),\n      (time & 0xFF),\n      ((MACHINE_ID >> 16) & 0xFF),\n      ((MACHINE_ID >> 8) & 0xFF),\n      (MACHINE_ID & 0xFF),\n      ((pid >> 8) & 0xFF),\n      (pid & 0xFF),\n      ((inc >> 16) & 0xFF),\n      ((inc >> 8) & 0xFF),\n      (inc & 0xFF)\n    )\n  },\n};\n\nfunction next() {\n  return index = (index+1) % 0xFFFFFF;\n}\n\nfunction hex(length, n) {\n  n = n.toString(16);\n  return (n.length===length)? n : \"00000000\".substring(n.length, length) + n;\n}\n\nfunction buffer(str) {\n  var i=0,out=[];\n\n  if(str.length===24)\n    for(;i<24; out.push(parseInt(str[i]+str[i+1], 16)),i+=2);\n\n  else if(str.length===12)\n    for(;i<12; out.push(str.charCodeAt(i)),i++);\n\n  return out;\n}\n\nvar inspect = (Symbol && Symbol.for && Symbol.for('nodejs.util.inspect.custom')) || 'inspect';\n\n/**\n * Converts to a string representation of this Id.\n *\n * @return {String} return the 24 byte hex string representation.\n * @api private\n */\nObjectID.prototype[inspect] = function() { return \"ObjectID(\"+this+\")\" };\nObjectID.prototype.toJSON = ObjectID.prototype.toHexString;\nObjectID.prototype.toString = ObjectID.prototype.toHexString;\n"],"names":["ContentCopyAdornment","content","onCopy","useState","open","setOpen","CopyToClipboard","text","result","position","onClose","autoHideDuration","message","hexString","setHexString","useEffect","refreshHexString","ObjectID","toHexString","RefreshAdornment","onClick","variant","sx","mt","label","value","fullWidth","InputProps","endAdornment","createSvgIcon","_jsx","d","MACHINE_ID","Math","floor","random","index","parseInt","pid","process","isBuffer","obj","constructor","hexTable","i","toString","checkForHexRegExp","RegExp","decodeLookup","id","this","_bsontype","valid","isValid","Error","length","createFromHexString","generate","module","exports","default","createFromTime","time","n","substring","data","String","fromCharCode","charCodeAt","test","_Buffer","prototype","JSON","stringify","equals","otherId","toLowerCase","getTimestamp","timestamp","Date","setTime","now","inc","inspect","Symbol","for","toJSON"],"sourceRoot":""}