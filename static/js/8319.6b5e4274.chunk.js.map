{"version":3,"file":"static/js/8319.6b5e4274.chunk.js","mappings":"kSA+FA,UAjFkB,WAChB,IAAAA,GAA8BC,EAAAA,EAAAA,UAAqB,CACjDC,WAAW,EACXC,iBAAiB,EACjBC,QAAS,EACTC,MAAM,EACNC,SAAU,GACVC,MAAO,sBACPC,GAAAC,EAAAA,EAAAA,GAAAT,EAAA,GAPKU,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAQ1BI,GAAwBX,EAAAA,EAAAA,UAAiB,IAAGY,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAArCE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA0Bf,EAAAA,EAAAA,UAAiB,QAAOgB,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA3CE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAEhBG,EAAuB,CAC3B,CACEC,KAAM,YACNC,QAAS,CAAEC,IAAK,aAAcC,IAAK,oBACnCC,KAAM,SAACC,GACL,IAAMC,GAASC,EAAAA,EAAAA,GAAOF,EAAOG,WAAYX,GACzCH,EAAQY,EACV,IAYJ,OACEG,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,OAAQ,QAASC,SAAA,EAC1BC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACC,GAAI,CAAEI,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIJ,UAC/BJ,EAAAA,EAAAA,MAACS,EAAAA,EAAI,CAACC,SARO,SAACC,GAClB,IAAMd,GAASC,EAAAA,EAAAA,GAAOd,EAAMI,GAC5BH,EAAQY,EACV,EAKkCe,cAAe,CAAEC,UAAU,GAAQC,OAAO,SAAQV,SAAA,EAC5EC,EAAAA,EAAAA,KAACI,EAAAA,EAAAA,KAAS,CAACM,MAAM,eAAIX,UACnBC,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CACLC,aAAc7B,EACd8B,SAAU,SAACC,GACT9B,EAAS8B,EACX,EACAvC,QAAS,CACP,CAAEmC,MAAO,OAAQI,MAAO,QACxB,CAAEJ,MAAO,QAASI,MAAO,SACzB,CAAEJ,MAAO,OAAQI,MAAO,QACxB,CAAEJ,MAAO,MAAOI,MAAO,QAEzBC,MAAO,CAAEC,MAAO,UAGpBhB,EAAAA,EAAAA,KAACI,EAAAA,EAAAA,KAAS,CAAClB,KAAK,WAAUa,UACxBC,EAAAA,EAAAA,KAACiB,EAAAA,EAAQ,CACPC,QAAS3C,EAAQL,KACjB2C,SAAU,SAACM,GACT3C,GAAU4C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI7C,GAAO,IAAEL,KAAMiD,EAAME,OAAOH,UAC9C,EAAEnB,SACH,gCAIHC,EAAAA,EAAAA,KAACI,EAAAA,EAAAA,KAAS,CAAAL,UACRC,EAAAA,EAAAA,KAACsB,EAAAA,GAAM,CAACC,KAAK,UAAUC,SAAS,SAAQzB,SAAC,+BAM/CC,EAAAA,EAAAA,KAACyB,EAAAA,GAAS,CACRT,MAAM,OACNlB,OAAO,oBACP4B,KAAM3C,EACN8B,SAhDW,SAACc,GAChB/C,EAAQ+C,EACV,EA+CMzC,KAAK,mBACLV,WAAYD,EACZqD,YAAa,CAAEC,iBAAiB,GAChCf,MAAOnC,EACPM,SAAUA,MAIlB,C,2ICxFaQ,EAAS,SAACqB,EAAegB,GACpC,GAAe,QAAXA,EACF,OAAOC,IAAUjB,GAEnB,IACE,OAAOkB,IAAAA,OAAgBlB,EAAO,CAC5BgB,OAAAA,EACAG,QAAS,CAACC,IAAqBC,MAEnC,CAAE,MAAOC,GACPC,QAAQC,MAAMF,EAChB,CACA,OAAOtB,CACT,C","sources":["pages/formatter/index.tsx","utils/formatter.ts"],"sourcesContent":["import { Box } from '@mui/material';\nimport { Button, Checkbox, Form, Select } from 'antd';\nimport { useState } from 'react';\nimport AceEditor, { ICommand } from 'react-ace';\nimport { AceOptions } from 'react-ace/types';\nimport { format, parser } from '../../utils/formatter';\n\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\nimport 'ace-builds/src-min-noconflict/mode-json';\nimport 'ace-builds/src-min-noconflict/mode-json5';\nimport 'ace-builds/src-min-noconflict/mode-xml';\nimport 'ace-builds/src-min-noconflict/mode-yaml';\nimport 'ace-builds/src-min-noconflict/theme-monokai';\n\nconst Formatter = () => {\n  const [options, setOptions] = useState<AceOptions>({\n    useWorker: false,\n    showLineNumbers: true,\n    tabSize: 2,\n    wrap: true,\n    fontSize: 14,\n    theme: 'ace/theme/monokai',\n  });\n  const [code, setCode] = useState<string>('');\n  const [model, setModel] = useState<string>('json');\n\n  const commands: ICommand[] = [\n    {\n      name: 'formatter',\n      bindKey: { win: 'Ctrl-Alt-L', mac: 'Command-Option-L' },\n      exec: (editor) => {\n        const result = format(editor.getValue(), model as parser);\n        setCode(result);\n      },\n    },\n  ];\n\n  const onChange = (newValue: string) => {\n    setCode(newValue);\n  };\n  const onPrettier = (values: any) => {\n    const result = format(code, model as parser);\n    setCode(result);\n  };\n\n  return (\n    <Box sx={{ height: '100%' }}>\n      <Box sx={{ pt: 2, pb: 1, pl: 1 }}>\n        <Form onFinish={onPrettier} initialValues={{ remember: true }} layout=\"inline\">\n          <Form.Item label=\"类型\">\n            <Select\n              defaultValue={model}\n              onChange={(value) => {\n                setModel(value);\n              }}\n              options={[\n                { label: 'JSON', value: 'json' },\n                { label: 'JSON5', value: 'json5' },\n                { label: 'YAML', value: 'yaml' },\n                { label: 'XML', value: 'xml' },\n              ]}\n              style={{ width: 100 }}\n            />\n          </Form.Item>\n          <Form.Item name=\"remember\">\n            <Checkbox\n              checked={options.wrap}\n              onChange={(event) => {\n                setOptions({ ...options, wrap: event.target.checked });\n              }}\n            >\n              自动换行\n            </Checkbox>\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              格式化\n            </Button>\n          </Form.Item>\n        </Form>\n      </Box>\n      <AceEditor\n        width=\"100%\"\n        height=\"calc(100% - 56px)\"\n        mode={model}\n        onChange={onChange}\n        name=\"UNIQUE_ID_OF_DIV\"\n        setOptions={options}\n        editorProps={{ $blockScrolling: true }}\n        value={code}\n        commands={commands}\n      />\n    </Box>\n  );\n};\nexport default Formatter;\n","import prettierBabelPlugin from 'prettier/parser-babel';\nimport parserYaml from 'prettier/parser-yaml';\nimport prettier from 'prettier/standalone';\nimport xmlFormat from 'xml-formatter';\n\nexport type parser = 'json' | 'json5' | 'yaml' | 'xml';\nexport const format = (value: string, parser: parser) => {\n  if (parser === 'xml') {\n    return xmlFormat(value);\n  }\n  try {\n    return prettier.format(value, {\n      parser,\n      plugins: [prettierBabelPlugin, parserYaml],\n    });\n  } catch (e) {\n    console.error(e);\n  }\n  return value;\n};\n"],"names":["_useState","useState","useWorker","showLineNumbers","tabSize","wrap","fontSize","theme","_useState2","_slicedToArray","options","setOptions","_useState3","_useState4","code","setCode","_useState5","_useState6","model","setModel","commands","name","bindKey","win","mac","exec","editor","result","format","getValue","_jsxs","Box","sx","height","children","_jsx","pt","pb","pl","Form","onFinish","values","initialValues","remember","layout","label","Select","defaultValue","onChange","value","style","width","Checkbox","checked","event","_objectSpread","target","Button","type","htmlType","AceEditor","mode","newValue","editorProps","$blockScrolling","parser","xmlFormat","prettier","plugins","prettierBabelPlugin","parserYaml","e","console","error"],"sourceRoot":""}