{"version":3,"file":"static/js/1608.5da49c89.chunk.js","mappings":"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","sources":["app/totp/AccountList.tsx","app/totp/TokenField.tsx","app/totp/TotpCard.tsx","app/totp/DetailInfo.tsx","app/totp/page.tsx","components/ContentCopyAdornment.tsx"],"sourcesContent":["import { Box, List, ListItem, ListItemText } from '@mui/material';\nimport { TotpI } from './typings';\n\ninterface Props {\n  totps?: TotpI[];\n}\n\nconst AccountList = ({ totps }: Props) => {\n  return (\n    <Box>\n      <List>\n        {totps?.map((totp) => {\n          return (\n            <ListItem key={totp.secretKey}>\n              <ListItemText>ha</ListItemText>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Box>\n  );\n};\n\nexport default AccountList;\n","import { Box, CircularProgress, TextField, Typography } from '@mui/material';\nimport { useCountDown } from 'ahooks';\nimport dayjs from 'dayjs';\nimport { TOTP } from 'otpauth';\nimport { useEffect, useState } from 'react';\nimport ContentCopyAdornment from '../../components/ContentCopyAdornment';\n\ninterface Props {\n  totp?: TOTP;\n}\n\nconst TokenField = ({ totp }: Props) => {\n  const [targetDate, setTargetDate] = useState<number>(0);\n  const [token, setToken] = useState<string>('');\n\n  useEffect(() => {\n    setTargetDate(0);\n    if (totp) {\n      const second = dayjs().second();\n      const millisecond = dayjs().valueOf();\n      const duration = (second >= 30 ? 60 - second : 30 - second) * 1000;\n      setTargetDate(millisecond + duration);\n      setToken(totp.generate());\n    }\n  }, [totp]);\n\n  const [countTime] = useCountDown({\n    targetDate,\n    onEnd: () => {\n      setTargetDate(0);\n      if (totp) {\n        const second = dayjs().second();\n        const millisecond = dayjs().valueOf();\n        const duration = (second >= 30 ? 60 - second : 30 - second) * 1000;\n        setTargetDate(millisecond + duration);\n        setToken(totp.generate());\n      }\n    },\n  });\n\n  return (\n    <TextField\n      label=\"Token\"\n      value={token}\n      InputProps={{\n        endAdornment: (\n          <>\n            <Box sx={{ position: 'relative', display: 'inline-flex' }}>\n              <CircularProgress variant=\"determinate\" value={((30 - Math.round(countTime / 1000)) / 30) * 100} />\n              <Box\n                sx={{\n                  top: 0,\n                  left: 0,\n                  bottom: 0,\n                  right: 0,\n                  position: 'absolute',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                }}\n              >\n                <Typography variant=\"caption\" component=\"div\" color=\"text.secondary\">\n                  {Math.round(countTime / 1000)}\n                </Typography>\n              </Box>\n            </Box>\n            <ContentCopyAdornment content={token} />\n          </>\n        ),\n      }}\n    />\n  );\n};\nexport default TokenField;\n","import { Box, TextField } from '@mui/material';\nimport { TOTP } from 'otpauth';\nimport QRCode from 'qrcode';\nimport { useEffect, useMemo, useRef } from 'react';\n\nimport ContentCopyAdornment from '../../components/ContentCopyAdornment';\nimport TokenField from './TokenField';\n\ninterface Props {\n  totp?: TOTP;\n}\n\nconst TotpCard = ({ totp }: Props) => {\n  const qrcodeContainer = useRef<HTMLCanvasElement>(null);\n  const options = useMemo(() => {\n    return { width: 128, height: 128 };\n  }, []);\n\n  useEffect(() => {\n    if (totp) {\n      QRCode.toCanvas(qrcodeContainer.current, totp.toString(), options);\n    }\n  }, [options, totp]);\n  return (\n    <Box>\n      <Box sx={options}>\n        <canvas ref={qrcodeContainer} />\n      </Box>\n      <Box sx={{ mt: 2 }}>\n        <TokenField totp={totp} />\n      </Box>\n\n      <Box sx={{ mt: 2 }}>\n        <TextField\n          label=\"URI\"\n          value={totp?.toString() || ''}\n          InputProps={{ endAdornment: <ContentCopyAdornment content={totp?.toString()} /> }}\n          fullWidth\n        />\n      </Box>\n    </Box>\n  );\n};\nexport default TotpCard;\n","import { Refresh as RefreshIcon } from '@mui/icons-material';\nimport { Box, Button, IconButton, InputAdornment, TextField } from '@mui/material';\nimport * as OTPAuth from 'otpauth';\nimport { Controller, useForm } from 'react-hook-form';\n\nimport { useState } from 'react';\nimport TotpCard from './TotpCard';\nimport { TotpI } from './typings';\n\nconst DetailInfo = () => {\n  const [instance, setInstance] = useState<OTPAuth.TOTP>();\n  const { register, handleSubmit, setValue, control } = useForm<TotpI>({ defaultValues: { secretKey: '' } });\n\n  const refreshSecret = () => {\n    const secret = new OTPAuth.Secret();\n    setValue('secretKey', secret.base32, { shouldDirty: true, shouldTouch: true, shouldValidate: true });\n  };\n  const onSave = (data: TotpI) => {\n    const instance = new OTPAuth.TOTP({\n      issuer: data.issuer,\n      label: data.account,\n      secret: data.secretKey,\n    });\n    setInstance(instance);\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(onSave)}>\n        <TextField label=\"Issuer\" {...register('issuer')} fullWidth required />\n        <Box sx={{ pt: 2 }}>\n          <TextField label=\"Account\" {...register('account')} fullWidth />\n        </Box>\n        <Box sx={{ pt: 2 }}>\n          <Controller\n            control={control}\n            name=\"secretKey\"\n            render={({ field }) => (\n              <TextField\n                label=\"Secret Key\"\n                {...field}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton onClick={refreshSecret}>\n                        <RefreshIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n                fullWidth\n                required\n              />\n            )}\n          />\n        </Box>\n        <Box sx={{ pt: 2, float: 'right' }}>\n          <Button>取消</Button>\n          <Button type=\"submit\">保存</Button>\n        </Box>\n      </form>\n      <TotpCard totp={instance} />\n    </>\n  );\n};\n\nexport default DetailInfo;\n","import { Container } from '@mui/material';\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { useLocalStorageState } from 'ahooks';\n\nimport * as OTPAuth from 'otpauth';\nimport AccountList from './AccountList';\nimport DetailInfo from './DetailInfo';\nimport { TotpI } from './typings';\n\nconst style = {\n  position: 'absolute' as 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  p: 4,\n\n  maxWidth: '700px',\n  boxShadow: 'rgb(97 97 97 / 20%) 0px 4px 20px',\n  borderRadius: 'clamp(0px, (100vw - 750px) * 9999, 10px)',\n};\n\nconst Totp = () => {\n  const [totps, setTotps] = useLocalStorageState<TotpI[]>('totps', { defaultValue: [] });\n\n  console.log(OTPAuth.Secret.fromUTF8('ha'));\n  return (\n    <Container>\n      <Grid container spacing={2} sx={{ mt: 2 }}>\n        <Grid xs={4}>\n          <AccountList totps={totps} />\n        </Grid>\n        <Grid xs={8}>\n          <DetailInfo />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\nexport default Totp;\n","import { ContentCopy } from '@mui/icons-material';\nimport { IconButton, InputAdornment, Snackbar } from '@mui/material';\nimport ClipboardJS from 'clipboard';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface Props {\n  content?: string | undefined;\n  onSuccess?: Function | undefined;\n}\n\nexport default function ContentCopyAdornment({ content, onSuccess }: Props) {\n  const btn = useRef<HTMLButtonElement>(null);\n  const [open, setOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (btn.current) {\n      const clipboard = new ClipboardJS(btn.current);\n      clipboard.on('success', (e) => {\n        setOpen(true);\n      });\n      clipboard.on('error', (e) => {\n        console.error(e);\n      });\n    }\n  }, []);\n\n  return (\n    <>\n      <InputAdornment position=\"end\">\n        <IconButton ref={btn} data-clipboard-text={content} aria-label=\"Copy content\">\n          <ContentCopy />\n        </IconButton>\n      </InputAdornment>\n\n      <Snackbar open={open} onClose={() => setOpen(false)} autoHideDuration={3000} message=\"复制成功\" />\n    </>\n  );\n}\n"],"names":["_ref","totps","_jsx","Box","children","List","map","totp","ListItem","ListItemText","secretKey","_useState","useState","_useState2","_slicedToArray","targetDate","setTargetDate","_useState3","_useState4","token","setToken","useEffect","second","dayjs","millisecond","valueOf","generate","_useCountDown","useCountDown","onEnd","countTime","TextField","label","value","InputProps","endAdornment","_jsxs","_Fragment","sx","position","display","CircularProgress","variant","Math","round","top","left","bottom","right","alignItems","justifyContent","Typography","component","color","ContentCopyAdornment","content","qrcodeContainer","useRef","options","useMemo","width","height","QRCode","current","toString","ref","mt","TokenField","fullWidth","instance","setInstance","_useForm","useForm","defaultValues","register","handleSubmit","setValue","control","refreshSecret","secret","OTPAuth","base32","shouldDirty","shouldTouch","shouldValidate","onSubmit","data","issuer","account","_objectSpread","required","pt","Controller","name","render","field","InputAdornment","IconButton","onClick","RefreshIcon","float","Button","type","TotpCard","_useLocalStorageState","useLocalStorageState","defaultValue","_useLocalStorageState2","console","log","Container","Grid","container","spacing","xs","AccountList","DetailInfo","btn","onSuccess","open","setOpen","clipboard","ClipboardJS","on","e","error","ContentCopy","Snackbar","onClose","autoHideDuration","message"],"sourceRoot":""}