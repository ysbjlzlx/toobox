{"version":3,"file":"static/js/574.e5155a98.chunk.js","mappings":"6OAUe,SAASA,EAAqB,GAAgC,IAA9BC,EAAO,EAAPA,QACvCC,GADyD,EAATC,WAC1CC,EAAAA,EAAAA,QAA0B,OACtC,GAAwBC,EAAAA,EAAAA,WAAkB,GAAM,eAAzCC,EAAI,KAAEC,EAAO,KAcpB,OAZAC,EAAAA,EAAAA,YAAU,WACR,GAAIN,EAAIO,QAAS,CACf,IAAMC,EAAY,IAAIC,IAAJ,CAAgBT,EAAIO,SACtCC,EAAUE,GAAG,WAAW,SAACC,GACvBN,GAAQ,EACV,IACAG,EAAUE,GAAG,SAAS,SAACC,GACrBC,QAAQC,MAAMF,EAChB,GACF,CACF,GAAG,KAGD,iCACE,SAAC,IAAc,CAACG,SAAS,MAAK,UAC5B,SAAC,IAAU,CAACC,IAAKf,EAAK,sBAAqBD,EAAS,aAAW,eAAc,UAC3E,SAAC,IAAW,SAIhB,SAAC,IAAQ,CAACK,KAAMA,EAAMY,QAAS,kBAAMX,GAAQ,EAAM,EAAEY,iBAAkB,IAAMC,QAAQ,+BAG3F,C,wECnBA,IAVyB,SAAH,GAA4B,IAAtBC,EAAO,EAAPA,QAC1B,OACE,SAAC,IAAc,CAACL,SAAS,MAAK,UAC5B,SAAC,IAAU,CAAC,aAAW,cAAcK,QAASA,EAAQ,UACpD,SAAC,IAAW,OAIpB,C,yJCuBA,UAhCqB,WACnB,OAAkChB,EAAAA,EAAAA,UAAiB,IAAG,eAA/CiB,EAAS,KAAEC,EAAY,MAE9Bf,EAAAA,EAAAA,YAAU,WACRgB,GACF,GAAG,IAEH,IAAMA,EAAmB,WACvBD,EAAaE,MAAWC,cAC1B,EAEA,OACE,UAAC,IAAS,YACR,SAAC,IAAU,CAACC,QAAQ,KAAI,4BACxB,SAAC,IAAG,CAACC,GAAI,CAAEC,GAAI,GAAI,UACjB,SAAC,IAAS,CACRC,MAAM,MACNC,MAAOT,EACPU,WAAS,EACTC,WAAY,CACVC,cACE,iCACE,SAAC,IAAgB,CAACb,QAASG,KAC3B,SAAC,IAAoB,CAACvB,QAASqB,cAQ/C,C","sources":["components/ContentCopyAdornment.tsx","components/RefreshAdornment.tsx","pages/bson/BsonObjectId.tsx"],"sourcesContent":["import { ContentCopy } from '@mui/icons-material';\nimport { IconButton, InputAdornment, Snackbar } from '@mui/material';\nimport ClipboardJS from 'clipboard';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface Props {\n  content?: string | undefined;\n  onSuccess?: Function | undefined;\n}\n\nexport default function ContentCopyAdornment({ content, onSuccess }: Props) {\n  const btn = useRef<HTMLButtonElement>(null);\n  const [open, setOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (btn.current) {\n      const clipboard = new ClipboardJS(btn.current);\n      clipboard.on('success', (e) => {\n        setOpen(true);\n      });\n      clipboard.on('error', (e) => {\n        console.error(e);\n      });\n    }\n  }, []);\n\n  return (\n    <>\n      <InputAdornment position=\"end\">\n        <IconButton ref={btn} data-clipboard-text={content} aria-label=\"Copy content\">\n          <ContentCopy />\n        </IconButton>\n      </InputAdornment>\n\n      <Snackbar open={open} onClose={() => setOpen(false)} autoHideDuration={3000} message=\"复制成功\" />\n    </>\n  );\n}\n","import { Refresh as RefreshIcon } from '@mui/icons-material';\nimport { IconButton, InputAdornment } from '@mui/material';\nimport { MouseEventHandler } from 'react';\n\ninterface Props {\n  onClick: MouseEventHandler | undefined;\n}\n\nconst RefreshAdornment = ({ onClick }: Props) => {\n  return (\n    <InputAdornment position=\"end\">\n      <IconButton aria-label=\"Refresh hex\" onClick={onClick}>\n        <RefreshIcon />\n      </IconButton>\n    </InputAdornment>\n  );\n};\n\nexport default RefreshAdornment;\n","import { Box, Container, TextField, Typography } from '@mui/material';\nimport ObjectID from 'bson-objectid';\nimport { useEffect, useState } from 'react';\n\nimport ContentCopyAdornment from '../../components/ContentCopyAdornment';\nimport RefreshAdornment from '../../components/RefreshAdornment';\n\nconst BsonObjectId = () => {\n  const [hexString, setHexString] = useState<string>('');\n\n  useEffect(() => {\n    refreshHexString();\n  }, []);\n\n  const refreshHexString = () => {\n    setHexString(ObjectID().toHexString());\n  };\n\n  return (\n    <Container>\n      <Typography variant=\"h2\">BSON ObjectID</Typography>\n      <Box sx={{ mt: 2 }}>\n        <TextField\n          label=\"hex\"\n          value={hexString}\n          fullWidth\n          InputProps={{\n            endAdornment: (\n              <>\n                <RefreshAdornment onClick={refreshHexString} />\n                <ContentCopyAdornment content={hexString} />\n              </>\n            ),\n          }}\n        />\n      </Box>\n    </Container>\n  );\n};\nexport default BsonObjectId;\n"],"names":["ContentCopyAdornment","content","btn","onSuccess","useRef","useState","open","setOpen","useEffect","current","clipboard","ClipboardJS","on","e","console","error","position","ref","onClose","autoHideDuration","message","onClick","hexString","setHexString","refreshHexString","ObjectID","toHexString","variant","sx","mt","label","value","fullWidth","InputProps","endAdornment"],"sourceRoot":""}