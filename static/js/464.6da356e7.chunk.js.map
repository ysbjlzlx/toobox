{"version":3,"file":"static/js/464.6da356e7.chunk.js","mappings":"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","sources":["components/ContentCopyAdornment.tsx","pages/totp/AccountList.tsx","pages/totp/TokenField.tsx","pages/totp/TotpCard.tsx","pages/totp/DetailInfo.tsx","pages/totp/index.tsx"],"sourcesContent":["import { ContentCopy } from '@mui/icons-material';\nimport { IconButton, InputAdornment, Snackbar } from '@mui/material';\nimport ClipboardJS from 'clipboard';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface Props {\n  content?: string | undefined;\n  onSuccess?: Function | undefined;\n}\n\nexport default function ContentCopyAdornment({ content, onSuccess }: Props) {\n  const btn = useRef<HTMLButtonElement>(null);\n  const [open, setOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (btn.current) {\n      const clipboard = new ClipboardJS(btn.current);\n      clipboard.on('success', (e) => {\n        setOpen(true);\n      });\n      clipboard.on('error', (e) => {\n        console.error(e);\n      });\n    }\n  }, []);\n\n  return (\n    <>\n      <InputAdornment position=\"end\">\n        <IconButton ref={btn} data-clipboard-text={content} aria-label=\"Copy content\">\n          <ContentCopy />\n        </IconButton>\n      </InputAdornment>\n\n      <Snackbar open={open} onClose={() => setOpen(false)} autoHideDuration={3000} message=\"复制成功\" />\n    </>\n  );\n}\n","import { Box, List, ListItem, ListItemText } from '@mui/material';\nimport { TotpI } from './typings';\n\ninterface Props {\n  totps?: TotpI[];\n}\n\nconst AccountList = ({ totps }: Props) => {\n  return (\n    <Box>\n      <List>\n        {totps?.map((totp) => {\n          return (\n            <ListItem key={totp.secretKey}>\n              <ListItemText>ha</ListItemText>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Box>\n  );\n};\n\nexport default AccountList;\n","import { Box, CircularProgress, TextField, Typography } from '@mui/material';\nimport { useCountDown } from 'ahooks';\nimport dayjs from 'dayjs';\nimport { TOTP } from 'otpauth';\nimport { useEffect, useState } from 'react';\nimport ContentCopyAdornment from '../../components/ContentCopyAdornment';\n\ninterface Props {\n  totp?: TOTP;\n}\n\nconst TokenField = ({ totp }: Props) => {\n  const [targetDate, setTargetDate] = useState<number>(0);\n  const [token, setToken] = useState<string>('');\n\n  useEffect(() => {\n    setTargetDate(0);\n    if (totp) {\n      const second = dayjs().second();\n      const millisecond = dayjs().valueOf();\n      const duration = (second >= 30 ? 60 - second : 30 - second) * 1000;\n      setTargetDate(millisecond + duration);\n      setToken(totp.generate());\n    }\n  }, [totp]);\n\n  const [countTime] = useCountDown({\n    targetDate,\n    onEnd: () => {\n      setTargetDate(0);\n      if (totp) {\n        const second = dayjs().second();\n        const millisecond = dayjs().valueOf();\n        const duration = (second >= 30 ? 60 - second : 30 - second) * 1000;\n        setTargetDate(millisecond + duration);\n        setToken(totp.generate());\n      }\n    },\n  });\n\n  return (\n    <TextField\n      label=\"Token\"\n      value={token}\n      InputProps={{\n        endAdornment: (\n          <>\n            <Box sx={{ position: 'relative', display: 'inline-flex' }}>\n              <CircularProgress variant=\"determinate\" value={((30 - Math.round(countTime / 1000)) / 30) * 100} />\n              <Box\n                sx={{\n                  top: 0,\n                  left: 0,\n                  bottom: 0,\n                  right: 0,\n                  position: 'absolute',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                }}\n              >\n                <Typography variant=\"caption\" component=\"div\" color=\"text.secondary\">\n                  {Math.round(countTime / 1000)}\n                </Typography>\n              </Box>\n            </Box>\n            <ContentCopyAdornment content={token} />\n          </>\n        ),\n      }}\n    />\n  );\n};\nexport default TokenField;\n","import { Box, TextField } from '@mui/material';\nimport { TOTP } from 'otpauth';\nimport QRCode from 'qrcode';\nimport { useEffect, useMemo, useRef } from 'react';\n\nimport ContentCopyAdornment from '../../components/ContentCopyAdornment';\nimport TokenField from './TokenField';\n\ninterface Props {\n  totp?: TOTP;\n}\n\nconst TotpCard = ({ totp }: Props) => {\n  const qrcodeContainer = useRef<HTMLCanvasElement>(null);\n  const options = useMemo(() => {\n    return { width: 128, height: 128 };\n  }, []);\n\n  useEffect(() => {\n    if (totp) {\n      QRCode.toCanvas(qrcodeContainer.current, totp.toString(), options);\n    }\n  }, [options, totp]);\n  return (\n    <Box>\n      <Box sx={options}>\n        <canvas ref={qrcodeContainer} />\n      </Box>\n      <Box sx={{ mt: 2 }}>\n        <TokenField totp={totp} />\n      </Box>\n\n      <Box sx={{ mt: 2 }}>\n        <TextField\n          label=\"URI\"\n          value={totp?.toString() || ''}\n          InputProps={{ endAdornment: <ContentCopyAdornment content={totp?.toString()} /> }}\n          fullWidth\n        />\n      </Box>\n    </Box>\n  );\n};\nexport default TotpCard;\n","import { Refresh as RefreshIcon } from '@mui/icons-material';\nimport { Box, Button, IconButton, InputAdornment, TextField } from '@mui/material';\nimport * as OTPAuth from 'otpauth';\nimport { Controller, useForm } from 'react-hook-form';\n\nimport { useState } from 'react';\nimport TotpCard from './TotpCard';\nimport { TotpI } from './typings';\n\nconst DetailInfo = () => {\n  const [instance, setInstance] = useState<OTPAuth.TOTP>();\n  const { register, handleSubmit, setValue, control } = useForm<TotpI>({ defaultValues: { secretKey: '' } });\n\n  const refreshSecret = () => {\n    const secret = new OTPAuth.Secret();\n    setValue('secretKey', secret.base32, { shouldDirty: true, shouldTouch: true, shouldValidate: true });\n  };\n  const onSave = (data: TotpI) => {\n    const instance = new OTPAuth.TOTP({\n      issuer: data.issuer,\n      label: data.account,\n      secret: data.secretKey,\n    });\n    setInstance(instance);\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(onSave)}>\n        <TextField label=\"Issuer\" {...register('issuer')} fullWidth required />\n        <Box sx={{ pt: 2 }}>\n          <TextField label=\"Account\" {...register('account')} fullWidth />\n        </Box>\n        <Box sx={{ pt: 2 }}>\n          <Controller\n            control={control}\n            name=\"secretKey\"\n            render={({ field }) => (\n              <TextField\n                label=\"Secret Key\"\n                {...field}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton onClick={refreshSecret}>\n                        <RefreshIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n                fullWidth\n                required\n              />\n            )}\n          />\n        </Box>\n        <Box sx={{ pt: 2, float: 'right' }}>\n          <Button>取消</Button>\n          <Button type=\"submit\">保存</Button>\n        </Box>\n      </form>\n      <TotpCard totp={instance} />\n    </>\n  );\n};\n\nexport default DetailInfo;\n","import { Container } from '@mui/material';\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { useLocalStorageState } from 'ahooks';\n\nimport * as OTPAuth from 'otpauth';\nimport AccountList from './AccountList';\nimport DetailInfo from './DetailInfo';\nimport { TotpI } from './typings';\n\nconst style = {\n  position: 'absolute' as 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  p: 4,\n\n  maxWidth: '700px',\n  boxShadow: 'rgb(97 97 97 / 20%) 0px 4px 20px',\n  borderRadius: 'clamp(0px, (100vw - 750px) * 9999, 10px)',\n};\n\nconst Totp = () => {\n  const [totps, setTotps] = useLocalStorageState<TotpI[]>('totps', { defaultValue: [] });\n\n  console.log(OTPAuth.Secret.fromUTF8('ha'));\n  return (\n    <Container>\n      <Grid container spacing={2} sx={{ mt: 2 }}>\n        <Grid xs={4}>\n          <AccountList totps={totps} />\n        </Grid>\n        <Grid xs={8}>\n          <DetailInfo />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\nexport default Totp;\n"],"names":["ContentCopyAdornment","content","btn","onSuccess","useRef","useState","open","setOpen","useEffect","current","clipboard","ClipboardJS","on","e","console","error","position","ref","onClose","autoHideDuration","message","totps","Box","List","map","totp","ListItem","ListItemText","secretKey","targetDate","setTargetDate","token","setToken","second","dayjs","millisecond","valueOf","generate","useCountDown","onEnd","countTime","TextField","label","value","InputProps","endAdornment","sx","display","CircularProgress","variant","Math","round","top","left","bottom","right","alignItems","justifyContent","Typography","component","color","qrcodeContainer","options","useMemo","width","height","QRCode","toString","mt","fullWidth","instance","setInstance","useForm","defaultValues","register","handleSubmit","setValue","control","refreshSecret","secret","OTPAuth","base32","shouldDirty","shouldTouch","shouldValidate","onSubmit","data","issuer","account","required","pt","name","render","field","InputAdornment","IconButton","onClick","Refresh","float","Button","type","useLocalStorageState","defaultValue","log","Container","container","spacing","xs"],"sourceRoot":""}