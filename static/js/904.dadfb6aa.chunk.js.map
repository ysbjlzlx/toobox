{"version":3,"file":"static/js/904.dadfb6aa.chunk.js","mappings":"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","sources":["components/VanillaJSONEditor.tsx","pages/json/JsonEditor.tsx","pages/json/JsonToExcel.tsx","pages/json/JsonToYaml.tsx","pages/json/Json.tsx"],"sourcesContent":["import { Box } from '@mui/material';\nimport { useEffect, useRef } from 'react';\n\nimport { JSONEditor, JSONEditorPropsOptional } from 'vanilla-jsoneditor';\n\nconst VanillaJSONEditor = (props: JSONEditorPropsOptional) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const editorRef = useRef<JSONEditor>();\n\n  useEffect(() => {\n    const options = {\n      target: containerRef.current,\n      props: {},\n    };\n    // @ts-ignore\n    editorRef.current = new JSONEditor(options);\n\n    return () => {\n      // destroy editor\n      if (editorRef.current) {\n        editorRef.current.destroy();\n        editorRef.current = undefined;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (editorRef.current) {\n      editorRef.current?.updateProps(props);\n    }\n  }, [props]);\n\n  return <Box ref={containerRef} height=\"100%\" />;\n};\n\nexport default VanillaJSONEditor;\n","import { useLocalStorageState } from 'ahooks';\nimport { FC } from 'react';\n\nimport { Content, Mode } from 'vanilla-jsoneditor';\nimport VanillaJSONEditor from '../../components/VanillaJSONEditor';\n\nconst JSONBeta: FC = () => {\n  const defaultValue = {\n    mode: 'text',\n    content: {\n      text: '',\n    },\n  };\n  const [jsonStorage, setJsonStorage] = useLocalStorageState<any>('json', { defaultValue });\n\n  const resolveMode = (): Mode | undefined => {\n    if (jsonStorage && jsonStorage.mode === 'text') {\n      return Mode.text;\n    }\n    if (jsonStorage && jsonStorage.mode === 'tree') {\n      return Mode.tree;\n    }\n    return Mode.text;\n  };\n\n  const onChange = (content: Content) => {\n    setJsonStorage((oldValue: any) => {\n      return { ...oldValue, content: content };\n    });\n  };\n\n  const onChangMode = (mode: Mode) => {\n    setJsonStorage((oldValue: any) => {\n      return { ...oldValue, mode: mode };\n    });\n  };\n\n  return (\n    <VanillaJSONEditor\n      mode={resolveMode()}\n      content={jsonStorage.content}\n      onChange={onChange}\n      onChangeMode={onChangMode}\n    />\n  );\n};\n\nexport default JSONBeta;\n","import { Box } from '@mui/material';\nimport JSON5 from 'json5';\nimport _ from 'lodash';\nimport { useEffect, useState } from 'react';\nimport AceEditor from 'react-ace';\nimport { AceOptions } from 'react-ace/types';\nimport ReactDataSheet from 'react-datasheet';\n\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\nimport 'ace-builds/src-min-noconflict/mode-json5';\nimport 'ace-builds/src-min-noconflict/mode-yaml';\nimport 'ace-builds/src-min-noconflict/theme-textmate';\nimport 'react-datasheet/lib/react-datasheet.css';\n\nexport interface GridElement extends ReactDataSheet.Cell<GridElement, number | string | null> {\n  value: number | string | null;\n}\n\nconst JsonToExcel = () => {\n  const [json, setJson] = useState<string>('{}');\n  const [data, setData] = useState<GridElement[][]>([]);\n  const [jsonOptions] = useState<AceOptions>({\n    useWorker: false,\n    showLineNumbers: true,\n    tabSize: 2,\n    wrap: true,\n    fontSize: 14,\n  });\n  useEffect(() => {\n    try {\n      const result = JSON5.parse(json);\n      console.log(result);\n      if (Array.isArray(result)) {\n        let columns: any[] = [];\n        result.forEach((item) => {\n          const keys = Object.keys(item);\n          keys.forEach((key) => {\n            columns.push({ value: key, readOnly: true });\n          });\n        });\n        columns = _.uniqWith(columns, (a, b) => {\n          return a.value === b.value;\n        });\n\n        const rows: any[] = [];\n        result.forEach((item) => {\n          const row = columns.map((column) => {\n            const value = item[column.value] || null;\n            return { value, readOnly: true };\n          });\n          rows.push(row);\n        });\n        // @ts-ignore\n        setData([columns, ...rows]);\n      }\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        console.error(e.message);\n      }\n    }\n  }, [json]);\n\n  return (\n    <Box>\n      <Box sx={{ width: '100%', height: '300px' }}>\n        <AceEditor\n          theme=\"textmate\"\n          placeholder=\"JSON\"\n          setOptions={jsonOptions}\n          value={json}\n          onChange={setJson}\n          mode=\"json5\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </Box>\n      <Box sx={{ mt: 3, width: '100%' }}>\n        <ReactDataSheet data={data} valueRenderer={(cel) => cel.value} />\n      </Box>\n    </Box>\n  );\n};\n\nexport default JsonToExcel;\n","import { Box, Button, Grid } from '@mui/material';\nimport { FC, useState } from 'react';\n\nimport AceEditor from 'react-ace';\nimport { AceOptions } from 'react-ace/types';\n\nimport parserYaml from 'prettier/parser-yaml';\nimport prettier from 'prettier/standalone';\n\nimport YAML from 'yaml';\n\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\nimport 'ace-builds/src-min-noconflict/mode-json';\nimport 'ace-builds/src-min-noconflict/mode-yaml';\nimport 'ace-builds/src-min-noconflict/theme-textmate';\n\nconst JsonToYaml: FC = () => {\n  const [json, setJson] = useState<string>('');\n  const [yaml, setYaml] = useState<string>('');\n  const [jsonOptions] = useState<AceOptions>({\n    useWorker: false,\n    showLineNumbers: true,\n    tabSize: 2,\n    wrap: true,\n    fontSize: 14,\n  });\n  const [yamlOptions] = useState<AceOptions>({\n    useWorker: false,\n    showLineNumbers: true,\n    tabSize: 2,\n    wrap: true,\n    fontSize: 14,\n  });\n\n  const json2yaml = (value: string): string => {\n    if (!value || value === '') {\n      return value;\n    }\n    try {\n      return prettier.format(YAML.stringify(JSON.parse(value)), {\n        parser: 'yaml',\n        plugins: [parserYaml],\n      });\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        console.warn(e);\n      } else {\n        console.warn(e);\n      }\n      return '';\n    }\n  };\n\n  const json2yamlBtnClick = () => {\n    setYaml(json2yaml(json));\n  };\n\n  return (\n    <Box sx={{ height: '100%' }}>\n      <Box>\n        <Button onClick={json2yamlBtnClick}>JSON =&gt; YAML</Button>\n      </Box>\n      <Grid container sx={{ height: 'calc(100% - 37px)' }}>\n        <Grid item xs={12} md={6} sx={{ height: '100%' }}>\n          <AceEditor\n            theme=\"textmate\"\n            placeholder=\"JSON\"\n            setOptions={jsonOptions}\n            value={json}\n            onChange={setJson}\n            mode=\"json\"\n            width=\"100%\"\n            height=\"100%\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6} sx={{ height: '100%' }}>\n          <AceEditor\n            theme=\"textmate\"\n            placeholder=\"YAML\"\n            setOptions={yamlOptions}\n            value={yaml}\n            onChange={setYaml}\n            mode=\"yaml\"\n            width=\"100%\"\n            height=\"100%\"\n          />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default JsonToYaml;\n","import { Tabs, TabsValue } from '@mantine/core';\nimport { useSize } from 'ahooks';\nimport { useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSearchParams } from 'react-router-dom';\n\nimport JSON from './JsonEditor';\nimport JsonToExcel from './JsonToExcel';\nimport JsonToYaml from './JsonToYaml';\n\nconst Json = () => {\n  const tabWrapperRef = useRef(null);\n  const [currentTab, setCurrentTab] = useState<string>('json-editor');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const { t } = useTranslation();\n  const tabWrapperSize = useSize(tabWrapperRef);\n\n  const setTabSearchParam = (name: string) => {\n    searchParams.set('tab', name);\n    setSearchParams(searchParams);\n  };\n\n  useEffect(() => {\n    let tab = searchParams.get('tab');\n    if (!tab) {\n      searchParams.set('tab', 'json-editor');\n      setSearchParams(searchParams);\n    } else {\n      setCurrentTab(tab);\n    }\n  }, [searchParams, setSearchParams]);\n\n  const handleChange = (value: TabsValue) => {\n    setCurrentTab(value || 'json-editor');\n    setTabSearchParam(value || 'json-editor');\n  };\n\n  return (\n    <Tabs radius=\"md\" value={currentTab} onTabChange={handleChange} sx={{ height: '100%' }}>\n      <Tabs.List ref={tabWrapperRef}>\n        <Tabs.Tab value=\"json-editor\"> {t('JSON Editor')} </Tabs.Tab>\n        <Tabs.Tab value=\"json-to-yaml\"> {t('JSON to YAML')} </Tabs.Tab>\n        <Tabs.Tab value=\"json-to-excel\" disabled>\n          {t('JSON to Excel')}\n        </Tabs.Tab>\n      </Tabs.List>\n\n      <Tabs.Panel value=\"json-editor\" sx={{ height: `calc(100% - ${tabWrapperSize?.height}px - 7px)`, marginTop: 5 }}>\n        <JSON />\n      </Tabs.Panel>\n\n      <Tabs.Panel value=\"json-to-yaml\" sx={{ height: `calc(100% - ${tabWrapperSize?.height}px - 2px)` }}>\n        <JsonToYaml />\n      </Tabs.Panel>\n\n      <Tabs.Panel value=\"json-to-excel\" sx={{ height: `calc(100% - ${tabWrapperSize?.height}px - 2px)` }}>\n        <JsonToExcel />\n      </Tabs.Panel>\n    </Tabs>\n  );\n};\n\nexport default Json;\n"],"names":["props","containerRef","useRef","editorRef","useEffect","options","target","current","JSONEditor","destroy","undefined","updateProps","Box","ref","height","useLocalStorageState","defaultValue","mode","content","text","jsonStorage","setJsonStorage","Mode","onChange","oldValue","onChangeMode","useState","json","setJson","data","setData","useWorker","showLineNumbers","tabSize","wrap","fontSize","jsonOptions","result","JSON5","console","log","Array","isArray","columns","forEach","item","Object","keys","key","push","value","readOnly","_","a","b","rows","row","map","column","e","SyntaxError","error","message","sx","width","theme","placeholder","setOptions","mt","valueRenderer","cel","yaml","setYaml","yamlOptions","Button","onClick","prettier","YAML","JSON","parse","parser","plugins","parserYaml","warn","json2yaml","Grid","container","xs","md","tabWrapperRef","currentTab","setCurrentTab","useSearchParams","searchParams","setSearchParams","t","useTranslation","tabWrapperSize","useSize","tab","get","set","Tabs","radius","onTabChange","name","Tab","disabled","marginTop"],"sourceRoot":""}