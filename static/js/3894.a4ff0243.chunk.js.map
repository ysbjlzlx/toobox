{"version":3,"file":"static/js/3894.a4ff0243.chunk.js","mappings":"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","sources":["app/generator/id/page.tsx","components/ContentCopyButton.tsx","components/TextResultBox.tsx"],"sourcesContent":["import { PageContainer } from '@ant-design/pro-components';\nimport { createId } from '@paralleldrive/cuid2';\nimport { TwitterSnowflake } from '@sapphire/snowflake';\nimport { useCounter } from 'ahooks';\nimport { Button, Col, Row, Segmented } from 'antd';\nimport { SegmentedLabeledOption } from 'antd/es/segmented';\nimport ObjectID from 'bson-objectid';\nimport { nanoid } from 'nanoid';\nimport { SegmentedRawOption, SegmentedValue } from 'rc-segmented';\nimport { FC, useEffect, useState } from 'react';\nimport { ulid } from 'ulid';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport TextResultBox from '../../../components/TextResultBox';\n\nconst UidPage: FC = () => {\n  const [type, setType] = useState<SegmentedValue>('cuid');\n  const [result, setResult] = useState<string>('');\n  const [counter, { inc }] = useCounter(0);\n\n  const options: (SegmentedRawOption | SegmentedLabeledOption)[] = [\n    { label: 'Cuid2', value: 'cuid' },\n    { label: 'BSON ObjectID', value: 'objectid' },\n    { label: 'Nano ID', value: 'nanoid' },\n    { label: 'ULID', value: 'ulid' },\n    { label: 'UUID', value: 'uuid' },\n    { label: 'Snowflake ID', value: 'snowflakeid' },\n  ];\n\n  useEffect(() => {\n    if (type === 'cuid') {\n      setResult(createId);\n    } else if (type === 'objectid') {\n      setResult(ObjectID().toHexString());\n    } else if (type === 'nanoid') {\n      setResult(nanoid());\n    } else if (type === 'ulid') {\n      setResult(ulid());\n    } else if (type === 'uuid') {\n      setResult(uuidv4());\n    } else if (type === 'snowflakeid') {\n      setResult(TwitterSnowflake.generate().toString());\n    }\n  }, [type, counter]);\n  return (\n    <PageContainer>\n      <Row justify=\"center\">\n        <Col span={16}>\n          <Segmented block={true} options={options} value={type} onChange={(value) => setType(value)} />\n          <div style={{ marginTop: '10px', marginBottom: '10px' }}>\n            <Button onClick={() => inc()}>刷新</Button>\n          </div>\n          <div style={{ marginTop: '10px' }}>\n            <TextResultBox title=\"结果\" text={result} />\n          </div>\n        </Col>\n      </Row>\n    </PageContainer>\n  );\n};\nexport default UidPage;\n","import { CopyOutlined } from '@ant-design/icons';\nimport { Button, message } from 'antd';\nimport copy from 'copy-to-clipboard';\n\ninterface Props {\n  text?: string | undefined;\n}\n\nexport default function ContentCopyButton({ text }: Props) {\n  const [messageApi, contextHolder] = message.useMessage();\n\n  return (\n    <>\n      {contextHolder}\n      <Button\n        icon={<CopyOutlined />}\n        onClick={() => {\n          copy(text || '', {\n            format: 'text/plain',\n            onCopy: (clipboardData: object) => {\n              console.log(clipboardData);\n              messageApi.open({\n                type: 'success',\n                content: '复制成功',\n              });\n            },\n          });\n        }}\n      />\n    </>\n  );\n}\n","import { Card, Input } from 'antd';\nimport { FC } from 'react';\nimport ContentCopyButton from './ContentCopyButton';\n\ninterface Props {\n  title: string;\n  text: string;\n}\n\nconst TextResultBox: FC<Props> = ({ text, title }) => {\n  const { TextArea } = Input;\n  return (\n    <Card\n      title={title}\n      extra={<ContentCopyButton text={text} />}\n      bodyStyle={{ padding: '10px', paddingBottom: '20px' }}\n      hoverable={false}\n    >\n      <TextArea bordered={true} autoSize={{ minRows: 5, maxRows: 10 }} value={text} showCount />\n    </Card>\n  );\n};\nexport default TextResultBox;\n"],"names":["_useState","useState","_useState2","_slicedToArray","type","setType","_useState3","_useState4","result","setResult","_useCounter","useCounter","_useCounter2","counter","inc","useEffect","createId","ObjectID","toHexString","nanoid","ulid","uuidv4","TwitterSnowflake","toString","_jsx","PageContainer","children","Row","justify","_jsxs","Col","span","Segmented","block","options","label","value","onChange","style","marginTop","marginBottom","Button","onClick","TextResultBox","title","text","ContentCopyButton","_ref","_message$useMessage","message","_message$useMessage2","messageApi","contextHolder","_Fragment","icon","CopyOutlined","copy","format","onCopy","clipboardData","console","log","open","content","TextArea","Input","Card","extra","bodyStyle","padding","paddingBottom","hoverable","bordered","autoSize","minRows","maxRows","showCount"],"sourceRoot":""}