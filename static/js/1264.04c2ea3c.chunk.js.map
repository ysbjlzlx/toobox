{"version":3,"file":"static/js/1264.04c2ea3c.chunk.js","mappings":"4SAkBA,EAVyB,SAAHA,GAA4B,IAAtBC,EAAOD,EAAPC,QAC1B,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAc,CAACC,SAAS,MAAKC,UAC5BH,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAAC,aAAW,cAAcL,QAASA,EAAQI,UACpDH,EAAAA,EAAAA,KAACK,EAAAA,EAAW,OAIpB,ECuBA,EAhCa,WACX,IAAAC,GAAkCC,EAAAA,EAAAA,UAAiB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,IAE9BI,EAAAA,EAAAA,YAAU,WACRC,GACF,GAAG,IAEH,IAAMA,EAAmB,WACvBF,EAAaG,MAAWC,cAC1B,EAEA,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAAAd,SAAA,EACRH,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,CAACC,QAAQ,KAAIhB,SAAC,mBACzBH,EAAAA,EAAAA,KAACoB,EAAAA,EAAG,CAACC,GAAI,CAAEC,GAAI,GAAInB,UACjBH,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CACRC,MAAM,MACNC,MAAOf,EACPgB,WAAS,EACTC,WAAY,CACVC,cACEZ,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAA1B,SAAA,EACEH,EAAAA,EAAAA,KAAC8B,EAAgB,CAAC/B,QAASc,KAC3Bb,EAAAA,EAAAA,KAAC+B,EAAAA,EAAoB,CAACC,QAAStB,cAQ/C,C,8JCPA,UAxBa,WACX,IAAMuB,GAAgBC,EAAAA,EAAAA,QAAO,MAC7B5B,GAAoCC,EAAAA,EAAAA,UAAiB,KAAIC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlD6B,EAAU3B,EAAA,GAAE4B,EAAa5B,EAAA,GAC1B6B,GAAiBC,EAAAA,EAAAA,GAAQL,GAM/B,OACEjB,EAAAA,EAAAA,MAACuB,EAAAA,GAAU,CAACd,MAAOU,EAAWhC,SAAA,EAC5BH,EAAAA,EAAAA,KAACoB,EAAAA,EAAG,CAACoB,IAAKP,EAAc9B,UACtBH,EAAAA,EAAAA,KAACyC,EAAAA,EAAO,CAACC,SAPM,SAACC,EAA8BlB,GAClDW,EAAcX,EAChB,EAKuC,aAAW,iBAAgBtB,UAC1DH,EAAAA,EAAAA,KAAC4C,EAAAA,EAAG,CAACpB,MAAM,iBAAiBC,MAAM,WAItCzB,EAAAA,EAAAA,KAAC6C,EAAAA,EAAQ,CAACpB,MAAOU,EAAYd,GAAI,CAAEyB,OAAO,eAADC,QAA+B,OAAdV,QAAc,IAAdA,OAAc,EAAdA,EAAgBS,SAAU,GAAE,QAAQ3C,UAC5FH,EAAAA,EAAAA,KAACgD,EAAAA,QAAY,QAIrB,C,0KCnBe,SAASjB,EAAoBjC,GAAiC,IAA9BkC,EAAOlC,EAAPkC,QACvCiB,GADyDnD,EAAToD,WAC1ChB,EAAAA,EAAAA,QAA0B,OACtC5B,GAAwBC,EAAAA,EAAAA,WAAkB,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzC6C,EAAI3C,EAAA,GAAE4C,EAAO5C,EAAA,GAcpB,OAZAI,EAAAA,EAAAA,YAAU,WACR,GAAIqC,EAAII,QAAS,CACf,IAAMC,EAAY,IAAIC,IAAJ,CAAgBN,EAAII,SACtCC,EAAUE,GAAG,WAAW,SAACC,GACvBL,GAAQ,EACV,IACAE,EAAUE,GAAG,SAAS,SAACC,GACrBC,QAAQC,MAAMF,EAChB,GACF,CACF,GAAG,KAGDzC,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAA1B,SAAA,EACEH,EAAAA,EAAAA,KAACC,EAAAA,EAAc,CAACC,SAAS,MAAKC,UAC5BH,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACoC,IAAKS,EAAK,sBAAqBjB,EAAS,aAAW,eAAc7B,UAC3EH,EAAAA,EAAAA,KAAC4D,EAAAA,EAAW,SAIhB5D,EAAAA,EAAAA,KAAC6D,EAAAA,EAAQ,CAACV,KAAMA,EAAMW,QAAS,kBAAMV,GAAQ,EAAM,EAAEW,iBAAkB,IAAMC,QAAQ,+BAG3F,C,+DCnCA,KAAeC,EAAAA,EAAAA,IAA4BjE,EAAAA,EAAAA,KAAK,OAAQ,CACtDkE,EAAG,+MACD,U,oBCuBJ,IA1BA,IAAIC,EAAaC,KAAKC,MAAsB,SAAhBD,KAAKE,UAC7BC,EAAQzD,EAASyD,MAAQC,SAAyB,SAAhBJ,KAAKE,SAAqB,IAC5DG,GAA0B,qBAAZC,SAAkD,kBAAhBA,QAAQD,IAAmBL,KAAKC,MAAsB,IAAhBD,KAAKE,UAAqBI,QAAQD,KAAO,MAI/HE,EAAa,WAAQ,IAAM,OAAOC,OAAS,CAAC,MAAMC,GAAI,IAAK,OAAOC,MAAQ,CAAC,MAAMD,GAAI,OAAO,IAAM,CAAE,CAAE,CAAzF,GASbE,EAAW,SAAUC,GACvB,QACO,MAAPA,IACAA,EAAIC,aACgC,oBAA7BD,EAAIC,YAAYF,WACvBC,EAAIC,YAAYF,SAASC,GAE3B,EAGIE,EAAW,GACNC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAASC,IAAMA,GAAK,GAAK,IAAM,IAAMA,EAAEC,SAAS,IAIlD,IAAIC,EAAoB,IAAIC,OAAO,qBAG/BC,EAAe,GAEnB,IADAJ,EAAI,EACGA,EAAI,IAAII,EAAa,GAAOJ,GAAKA,IACxC,KAAOA,EAAI,IAAII,EAAa,GAAYJ,GAAKI,EAAa,GAAYJ,GAAKA,IAS3E,SAASrE,EAAS0E,GAChB,KAAKC,gBAAgB3E,GAAW,OAAO,IAAIA,EAAS0E,GACpD,GAAGA,IAAQA,aAAc1E,GAA4B,aAAf0E,EAAGE,WACvC,OAAOF,EAKT,GAHAC,KAAKC,UAAY,WAGP,MAANF,GAA4B,kBAAPA,EAAzB,CAQA,IAAIG,EAAQ7E,EAAS8E,QAAQJ,GAG7B,IAAKG,GAAe,MAANH,EACZ,MAAM,IAAIK,MACR,2FAEG,GAAIF,GAAuB,kBAAPH,GAAiC,KAAdA,EAAGM,OAC/C,OAAOhF,EAASiF,oBAAoBP,GAC/B,GAAU,MAANA,GAA4B,KAAdA,EAAGM,OAGrB,IAAU,MAANN,GAAwC,oBAAnBA,EAAGzE,YAEjC,OAAOyE,EAEP,MAAM,IAAIK,MACR,0FAEJ,CAREJ,KAAKD,GAAKA,CAdZ,MAHEC,KAAKD,GAAKC,KAAKO,SAASR,EA0B5B,CACAS,EAAOC,QAAUpF,EACjBA,EAASqF,QAAUrF,EASnBA,EAASsF,eAAiB,SAASC,GAEjC,OADAA,EAAO7B,SAAS6B,EAAM,IAAM,WACrB,IAAIvF,GA+LAgF,EA/La,IAgMxBQ,GADmBA,EA/LOD,GAgMpBjB,SAAS,KACLU,SAASA,EAASQ,EAAI,WAAWC,UAAUD,EAAER,OAAQA,GAAUQ,GAjMzC,qBA+LlC,IAAaR,EAAQQ,CA9LrB,EASAxF,EAASiF,oBAAsB,SAASrF,GAEtC,GAAyB,qBAAdA,GAA2C,MAAbA,GAA0C,KAArBA,EAAUoF,OACtE,MAAM,IAAID,MACR,2FAQJ,IAHA,IAAIW,EAAO,GACPrB,EAAI,EAEDA,EAAI,IACTqB,GAAQC,OAAOC,aAAcnB,EAAa7E,EAAUiG,WAAWxB,OAAS,EAAKI,EAAa7E,EAAUiG,WAAWxB,OAGjH,OAAO,IAAIrE,EAAS0F,EACtB,EAYA1F,EAAS8E,QAAU,SAASJ,GAC1B,OAAU,MAANA,IAEc,kBAAPA,IAIO,kBAAPA,EACY,KAAdA,EAAGM,QAAgC,KAAdN,EAAGM,QAAiBT,EAAkBuB,KAAKpB,GAGrEA,aAAc1E,IAKdiE,EAASS,GACJ1E,EAAS8E,QAAQJ,EAAGJ,SAAS,UAKR,oBAAnBI,EAAGzE,cAEV4D,KACCa,EAAGA,cAAcb,GAA8B,kBAAVa,EAAGA,OAEjB,KAAjBA,EAAGA,GAAGM,QAAmC,KAAjBN,EAAGA,GAAGM,QAAiBT,EAAkBuB,KAAKpB,EAAGA,OAKtF,EAEA1E,EAAS+F,UAAY,CACnB5B,YAAanE,EAQbC,YAAa,WACX,IAAK0E,KAAKD,KAAOC,KAAKD,GAAGM,OACvB,MAAM,IAAID,MACR,8EACEiB,KAAKC,UAAUtB,KAAKD,IACpB,KAIN,GAAuB,KAAnBC,KAAKD,GAAGM,OACV,OAAOL,KAAKD,GAGd,GAAIT,EAASU,KAAKD,IAChB,OAAOC,KAAKD,GAAGJ,SAAS,OAI1B,IADA,IAAI1E,EAAY,GACPyE,EAAI,EAAGA,EAAIM,KAAKD,GAAGM,OAAQX,IAClCzE,GAAawE,EAASO,KAAKD,GAAGmB,WAAWxB,IAG3C,OAAOzE,CACT,EASAsG,OAAQ,SAAUC,GAChB,OAAIA,aAAmBnG,EACd2E,KAAKL,aAAe6B,EAAQ7B,WAEhB,kBAAZ6B,GACPnG,EAAS8E,QAAQqB,IACE,KAAnBA,EAAQnB,QACRf,EAASU,KAAKD,IAEPyB,IAAYxB,KAAKD,GAAGJ,SAAS,UACR,kBAAZ6B,GAAwBnG,EAAS8E,QAAQqB,IAA+B,KAAnBA,EAAQnB,OACtEmB,EAAQC,gBAAkBzB,KAAK1E,cACV,kBAAZkG,GAAwBnG,EAAS8E,QAAQqB,IAA+B,KAAnBA,EAAQnB,OACtEmB,IAAYxB,KAAKD,KACJ,MAAXyB,KAAoBA,aAAmBnG,GAAYmG,EAAQlG,eAC7DkG,EAAQlG,gBAAkB0E,KAAK1E,aAI1C,EAQAoG,aAAc,WACZ,IACId,EADAe,EAAY,IAAIC,KAQpB,OALEhB,EADEtB,EAASU,KAAKD,IACTC,KAAKD,GAAG,GAAMC,KAAKD,GAAG,IAAM,EAAMC,KAAKD,GAAG,IAAM,GAAOC,KAAKD,GAAG,IAAM,GAErEC,KAAKD,GAAGmB,WAAW,GAAMlB,KAAKD,GAAGmB,WAAW,IAAM,EAAMlB,KAAKD,GAAGmB,WAAW,IAAM,GAAOlB,KAAKD,GAAGmB,WAAW,IAAM,GAE1HS,EAAUE,QAA2B,IAAnBlD,KAAKC,MAAMgC,IACtBe,CACT,EASApB,SAAU,SAAUK,GACd,kBAAoBA,IACtBA,KAAUgB,KAAKE,MAAQ,MAIzBlB,EAAO7B,SAAS6B,EAAM,IAAM,WAE5B,IAAImB,EAoBCjD,GAASA,EAAM,GAAK,SAlBzB,OAAOkC,OAAOC,aACVL,GAAQ,GAAM,IACdA,GAAQ,GAAM,IACdA,GAAQ,EAAK,IACP,IAAPA,EACClC,GAAc,GAAM,IACpBA,GAAc,EAAK,IACP,IAAbA,EACCM,GAAO,EAAK,IACP,IAANA,EACC+C,GAAO,GAAM,IACbA,GAAO,EAAK,IACP,IAANA,EAEL,GAwBF,IAAIC,EAAWC,QAAUA,OAAOC,KAAOD,OAAOC,IAAI,+BAAkC,UAQpF7G,EAAS+F,UAAUY,GAAW,WAAa,MAAO,YAAYhC,KAAK,GAAI,EACvE3E,EAAS+F,UAAUe,OAAS9G,EAAS+F,UAAU9F,YAC/CD,EAAS+F,UAAUzB,SAAWtE,EAAS+F,UAAU9F,W","sources":["components/RefreshAdornment.tsx","app/bson-object-id/page.tsx","app/bson/page.tsx","components/ContentCopyAdornment.tsx","../node_modules/@mui/icons-material/esm/Refresh.js","../node_modules/bson-objectid/objectid.js"],"sourcesContent":["import { Refresh as RefreshIcon } from '@mui/icons-material';\nimport { IconButton, InputAdornment } from '@mui/material';\nimport { MouseEventHandler } from 'react';\n\ninterface Props {\n  onClick: MouseEventHandler | undefined;\n}\n\nconst RefreshAdornment = ({ onClick }: Props) => {\n  return (\n    <InputAdornment position=\"end\">\n      <IconButton aria-label=\"Refresh hex\" onClick={onClick}>\n        <RefreshIcon />\n      </IconButton>\n    </InputAdornment>\n  );\n};\n\nexport default RefreshAdornment;\n","import { Box, Container, TextField, Typography } from '@mui/material';\nimport ObjectID from 'bson-objectid';\nimport { useEffect, useState } from 'react';\n\nimport ContentCopyAdornment from '../../components/ContentCopyAdornment';\nimport RefreshAdornment from '../../components/RefreshAdornment';\n\nconst Page = () => {\n  const [hexString, setHexString] = useState<string>('');\n\n  useEffect(() => {\n    refreshHexString();\n  }, []);\n\n  const refreshHexString = () => {\n    setHexString(ObjectID().toHexString());\n  };\n\n  return (\n    <Container>\n      <Typography variant=\"h2\">BSON ObjectID</Typography>\n      <Box sx={{ mt: 2 }}>\n        <TextField\n          label=\"hex\"\n          value={hexString}\n          fullWidth\n          InputProps={{\n            endAdornment: (\n              <>\n                <RefreshAdornment onClick={refreshHexString} />\n                <ContentCopyAdornment content={hexString} />\n              </>\n            ),\n          }}\n        />\n      </Box>\n    </Container>\n  );\n};\nexport default Page;\n","import { TabContext, TabList, TabPanel } from '@mui/lab';\nimport { Box, Tab } from '@mui/material';\nimport { useSize } from 'ahooks';\nimport React, { useRef, useState } from 'react';\n\nimport BsonObjectId from '../bson-object-id/page';\n\nconst Page = () => {\n  const tabWrapperRef = useRef(null);\n  const [currentTab, setCurrentTab] = useState<string>('0');\n  const tabWrapperSize = useSize(tabWrapperRef);\n\n  const handleChange = (_event: React.SyntheticEvent, value: string) => {\n    setCurrentTab(value);\n  };\n\n  return (\n    <TabContext value={currentTab}>\n      <Box ref={tabWrapperRef}>\n        <TabList onChange={handleChange} aria-label=\"json tab panel\">\n          <Tab label=\"BSON Object ID\" value=\"0\" />\n        </TabList>\n      </Box>\n\n      <TabPanel value={currentTab} sx={{ height: `calc(100% - ${tabWrapperSize?.height || 48}px)` }}>\n        <BsonObjectId />\n      </TabPanel>\n    </TabContext>\n  );\n};\n\nexport default Page;\n","import { ContentCopy } from '@mui/icons-material';\nimport { IconButton, InputAdornment, Snackbar } from '@mui/material';\nimport ClipboardJS from 'clipboard';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface Props {\n  content?: string | undefined;\n  onSuccess?: Function | undefined;\n}\n\nexport default function ContentCopyAdornment({ content, onSuccess }: Props) {\n  const btn = useRef<HTMLButtonElement>(null);\n  const [open, setOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (btn.current) {\n      const clipboard = new ClipboardJS(btn.current);\n      clipboard.on('success', (e) => {\n        setOpen(true);\n      });\n      clipboard.on('error', (e) => {\n        console.error(e);\n      });\n    }\n  }, []);\n\n  return (\n    <>\n      <InputAdornment position=\"end\">\n        <IconButton ref={btn} data-clipboard-text={content} aria-label=\"Copy content\">\n          <ContentCopy />\n        </IconButton>\n      </InputAdornment>\n\n      <Snackbar open={open} onClose={() => setOpen(false)} autoHideDuration={3000} message=\"复制成功\" />\n    </>\n  );\n}\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"\n}), 'Refresh');","\nvar MACHINE_ID = Math.floor(Math.random() * 0xFFFFFF);\nvar index = ObjectID.index = parseInt(Math.random() * 0xFFFFFF, 10);\nvar pid = (typeof process === 'undefined' || typeof process.pid !== 'number' ? Math.floor(Math.random() * 100000) : process.pid) % 0xFFFF;\n// <https://github.com/williamkapke/bson-objectid/pull/51>\n// Attempt to fallback Buffer if _Buffer is undefined (e.g. for Node.js).\n// Worst case fallback to null and handle with null checking before using.\nvar BufferCtr = (() => { try { return _Buffer; }catch(_){ try{ return Buffer; }catch(_){ return null; } } })();\n\n/**\n * Determine if an object is Buffer\n *\n * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * License:  MIT\n *\n */\nvar isBuffer = function (obj) {\n  return !!(\n  obj != null &&\n  obj.constructor &&\n  typeof obj.constructor.isBuffer === 'function' &&\n  obj.constructor.isBuffer(obj)\n  )\n};\n\n// Precomputed hex table enables speedy hex string conversion\nvar hexTable = [];\nfor (var i = 0; i < 256; i++) {\n  hexTable[i] = (i <= 15 ? '0' : '') + i.toString(16);\n}\n\n// Regular expression that checks for hex value\nvar checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');\n\n// Lookup tables\nvar decodeLookup = [];\ni = 0;\nwhile (i < 10) decodeLookup[0x30 + i] = i++;\nwhile (i < 16) decodeLookup[0x41 - 10 + i] = decodeLookup[0x61 - 10 + i] = i++;\n\n/**\n * Create a new immutable ObjectID instance\n *\n * @class Represents the BSON ObjectID type\n * @param {String|Number} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n * @return {Object} instance of ObjectID.\n */\nfunction ObjectID(id) {\n  if(!(this instanceof ObjectID)) return new ObjectID(id);\n  if(id && ((id instanceof ObjectID) || id._bsontype===\"ObjectID\"))\n    return id;\n\n  this._bsontype = 'ObjectID';\n\n  // The most common usecase (blank id, new objectId instance)\n  if (id == null || typeof id === 'number') {\n    // Generate a new id\n    this.id = this.generate(id);\n    // Return the object\n    return;\n  }\n\n  // Check if the passed in id is valid\n  var valid = ObjectID.isValid(id);\n\n  // Throw an error if it's not a valid setup\n  if (!valid && id != null) {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  } else if (valid && typeof id === 'string' && id.length === 24) {\n    return ObjectID.createFromHexString(id);\n  } else if (id != null && id.length === 12) {\n    // assume 12 byte string\n    this.id = id;\n  } else if (id != null && typeof id.toHexString === 'function') {\n    // Duck-typing to support ObjectId from different npm packages\n    return id;\n  } else {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  }\n}\nmodule.exports = ObjectID;\nObjectID.default = ObjectID;\n\n/**\n * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n *\n * @param {Number} time an integer number representing a number of seconds.\n * @return {ObjectID} return the created ObjectID\n * @api public\n */\nObjectID.createFromTime = function(time){\n  time = parseInt(time, 10) % 0xFFFFFFFF;\n  return new ObjectID(hex(8,time)+\"0000000000000000\");\n};\n\n/**\n * Creates an ObjectID from a hex string representation of an ObjectID.\n *\n * @param {String} hexString create a ObjectID from a passed in 24 byte hexstring.\n * @return {ObjectID} return the created ObjectID\n * @api public\n */\nObjectID.createFromHexString = function(hexString) {\n  // Throw an error if it's not a valid setup\n  if (typeof hexString === 'undefined' || (hexString != null && hexString.length !== 24)) {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  }\n\n  // Calculate lengths\n  var data = '';\n  var i = 0;\n\n  while (i < 24) {\n    data += String.fromCharCode((decodeLookup[hexString.charCodeAt(i++)] << 4) | decodeLookup[hexString.charCodeAt(i++)]);\n  }\n\n  return new ObjectID(data);\n};\n\n/**\n * Checks if a value is a valid bson ObjectId\n *\n * @param {String} objectid Can be a 24 byte hex string or an instance of ObjectID.\n * @return {Boolean} return true if the value is a valid bson ObjectID, return false otherwise.\n * @api public\n *\n * THE NATIVE DOCUMENTATION ISN'T CLEAR ON THIS GUY!\n * http://mongodb.github.io/node-mongodb-native/api-bson-generated/objectid.html#objectid-isvalid\n */\nObjectID.isValid = function(id) {\n  if (id == null) return false;\n\n  if (typeof id === 'number') {\n    return true;\n  }\n\n  if (typeof id === 'string') {\n    return id.length === 12 || (id.length === 24 && checkForHexRegExp.test(id));\n  }\n\n  if (id instanceof ObjectID) {\n    return true;\n  }\n\n  // <https://github.com/williamkapke/bson-objectid/issues/53>\n  if (isBuffer(id)) {\n    return ObjectID.isValid(id.toString('hex'));\n  }\n\n  // Duck-Typing detection of ObjectId like objects\n  // <https://github.com/williamkapke/bson-objectid/pull/51>\n  if (typeof id.toHexString === 'function') {\n    if(\n      BufferCtr &&\n      (id.id instanceof BufferCtr || typeof id.id === 'string')\n    ) {\n      return id.id.length === 12 || (id.id.length === 24 && checkForHexRegExp.test(id.id));\n    }\n  }\n\n  return false;\n};\n\nObjectID.prototype = {\n  constructor: ObjectID,\n\n  /**\n   * Return the ObjectID id as a 24 byte hex string representation\n   *\n   * @return {String} return the 24 byte hex string representation.\n   * @api public\n   */\n  toHexString: function() {\n    if (!this.id || !this.id.length) {\n      throw new Error(\n        'invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [' +\n          JSON.stringify(this.id) +\n          ']'\n      );\n    }\n\n    if (this.id.length === 24) {\n      return this.id;\n    }\n\n    if (isBuffer(this.id)) {\n      return this.id.toString('hex')\n    }\n\n    var hexString = '';\n    for (var i = 0; i < this.id.length; i++) {\n      hexString += hexTable[this.id.charCodeAt(i)];\n    }\n\n    return hexString;\n  },\n\n  /**\n   * Compares the equality of this ObjectID with `otherID`.\n   *\n   * @param {Object} otherId ObjectID instance to compare against.\n   * @return {Boolean} the result of comparing two ObjectID's\n   * @api public\n   */\n  equals: function (otherId){\n    if (otherId instanceof ObjectID) {\n      return this.toString() === otherId.toString();\n    } else if (\n      typeof otherId === 'string' &&\n      ObjectID.isValid(otherId) &&\n      otherId.length === 12 &&\n      isBuffer(this.id)\n    ) {\n      return otherId === this.id.toString('binary');\n    } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 24) {\n      return otherId.toLowerCase() === this.toHexString();\n    } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 12) {\n      return otherId === this.id;\n    } else if (otherId != null && (otherId instanceof ObjectID || otherId.toHexString)) {\n      return otherId.toHexString() === this.toHexString();\n    } else {\n      return false;\n    }\n  },\n\n  /**\n   * Returns the generation date (accurate up to the second) that this ID was generated.\n   *\n   * @return {Date} the generation date\n   * @api public\n   */\n  getTimestamp: function(){\n    var timestamp = new Date();\n    var time;\n    if (isBuffer(this.id)) {\n      time = this.id[3] | (this.id[2] << 8) | (this.id[1] << 16) | (this.id[0] << 24);\n    } else {\n      time = this.id.charCodeAt(3) | (this.id.charCodeAt(2) << 8) | (this.id.charCodeAt(1) << 16) | (this.id.charCodeAt(0) << 24);\n    }\n    timestamp.setTime(Math.floor(time) * 1000);\n    return timestamp;\n  },\n\n  /**\n  * Generate a 12 byte id buffer used in ObjectID's\n  *\n  * @method\n  * @param {number} [time] optional parameter allowing to pass in a second based timestamp.\n  * @return {string} return the 12 byte id buffer string.\n  */\n  generate: function (time) {\n    if ('number' !== typeof time) {\n      time = ~~(Date.now() / 1000);\n    }\n\n    //keep it in the ring!\n    time = parseInt(time, 10) % 0xFFFFFFFF;\n\n    var inc = next();\n\n    return String.fromCharCode(\n      ((time >> 24) & 0xFF),\n      ((time >> 16) & 0xFF),\n      ((time >> 8) & 0xFF),\n      (time & 0xFF),\n      ((MACHINE_ID >> 16) & 0xFF),\n      ((MACHINE_ID >> 8) & 0xFF),\n      (MACHINE_ID & 0xFF),\n      ((pid >> 8) & 0xFF),\n      (pid & 0xFF),\n      ((inc >> 16) & 0xFF),\n      ((inc >> 8) & 0xFF),\n      (inc & 0xFF)\n    )\n  },\n};\n\nfunction next() {\n  return index = (index+1) % 0xFFFFFF;\n}\n\nfunction hex(length, n) {\n  n = n.toString(16);\n  return (n.length===length)? n : \"00000000\".substring(n.length, length) + n;\n}\n\nfunction buffer(str) {\n  var i=0,out=[];\n\n  if(str.length===24)\n    for(;i<24; out.push(parseInt(str[i]+str[i+1], 16)),i+=2);\n\n  else if(str.length===12)\n    for(;i<12; out.push(str.charCodeAt(i)),i++);\n\n  return out;\n}\n\nvar inspect = (Symbol && Symbol.for && Symbol.for('nodejs.util.inspect.custom')) || 'inspect';\n\n/**\n * Converts to a string representation of this Id.\n *\n * @return {String} return the 24 byte hex string representation.\n * @api private\n */\nObjectID.prototype[inspect] = function() { return \"ObjectID(\"+this+\")\" };\nObjectID.prototype.toJSON = ObjectID.prototype.toHexString;\nObjectID.prototype.toString = ObjectID.prototype.toHexString;\n"],"names":["_ref","onClick","_jsx","InputAdornment","position","children","IconButton","RefreshIcon","_useState","useState","_useState2","_slicedToArray","hexString","setHexString","useEffect","refreshHexString","ObjectID","toHexString","_jsxs","Container","Typography","variant","Box","sx","mt","TextField","label","value","fullWidth","InputProps","endAdornment","_Fragment","RefreshAdornment","ContentCopyAdornment","content","tabWrapperRef","useRef","currentTab","setCurrentTab","tabWrapperSize","useSize","TabContext","ref","TabList","onChange","_event","Tab","TabPanel","height","concat","BsonObjectId","btn","onSuccess","open","setOpen","current","clipboard","ClipboardJS","on","e","console","error","ContentCopy","Snackbar","onClose","autoHideDuration","message","createSvgIcon","d","MACHINE_ID","Math","floor","random","index","parseInt","pid","process","BufferCtr","_Buffer","_","Buffer","isBuffer","obj","constructor","hexTable","i","toString","checkForHexRegExp","RegExp","decodeLookup","id","this","_bsontype","valid","isValid","Error","length","createFromHexString","generate","module","exports","default","createFromTime","time","n","substring","data","String","fromCharCode","charCodeAt","test","prototype","JSON","stringify","equals","otherId","toLowerCase","getTimestamp","timestamp","Date","setTime","now","inc","inspect","Symbol","for","toJSON"],"sourceRoot":""}