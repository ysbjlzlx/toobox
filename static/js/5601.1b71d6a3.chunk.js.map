{"version":3,"file":"static/js/5601.1b71d6a3.chunk.js","mappings":"8OAUe,SAASA,EAAoBC,GAAiC,IAA9BC,EAAOD,EAAPC,QACvCC,GADyDF,EAATG,WAC1CC,EAAAA,EAAAA,QAA0B,OACtCC,GAAwBC,EAAAA,EAAAA,WAAkB,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAcpB,OAZAI,EAAAA,EAAAA,YAAU,WACR,GAAIT,EAAIU,QAAS,CACf,IAAMC,EAAY,IAAIC,IAAJ,CAAgBZ,EAAIU,SACtCC,EAAUE,GAAG,WAAW,SAACC,GACvBN,GAAQ,EACV,IACAG,EAAUE,GAAG,SAAS,SAACC,GACrBC,QAAQC,MAAMF,EAChB,GACF,CACF,GAAG,KAGDG,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAc,CAACC,SAAS,MAAKH,UAC5BC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACC,IAAKxB,EAAK,sBAAqBD,EAAS,aAAW,eAAcoB,UAC3EC,EAAAA,EAAAA,KAACK,EAAAA,EAAW,SAIhBL,EAAAA,EAAAA,KAACM,EAAAA,EAAQ,CAACnB,KAAMA,EAAMoB,QAAS,kBAAMnB,GAAQ,EAAM,EAAEoB,iBAAkB,IAAMC,QAAQ,+BAG3F,C,8MC/Be,SAASC,IACtB,IAAA3B,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/B4B,EAAK1B,EAAA,GAAE2B,EAAQ3B,EAAA,GACtB4B,GAA4B7B,EAAAA,EAAAA,UAAS,IAAG8B,GAAA5B,EAAAA,EAAAA,GAAA2B,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GASxB,OACEjB,EAAAA,EAAAA,MAACoB,EAAAA,EAAS,CAAAlB,SAAA,EACRC,EAAAA,EAAAA,KAACkB,EAAAA,EAAG,CAACC,GAAI,CAAEC,GAAI,GAAIrB,UACjBC,EAAAA,EAAAA,KAACqB,EAAAA,EAAAA,SAAc,CACbC,MAAOX,EACPY,SAAU,SAACC,GACTZ,EAASY,EAAMT,OAAOO,MACxB,EACAG,YAAY,eACZC,SAAU,CAAEC,QAAS,EAAGC,QAAS,IACjCC,WAAS,OAGb7B,EAAAA,EAAAA,KAACkB,EAAAA,EAAG,CAACC,GAAI,CAAEC,GAAI,GAAIrB,UACjBF,EAAAA,EAAAA,MAACiC,EAAAA,EAAW,CAAA/B,SAAA,EACVC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CAACC,QAvBD,WACb,IAAMC,EAAMC,EAAAA,IAAAA,OAAAA,UAAqBA,EAAAA,IAAAA,KAAAA,MAAevB,IAChDK,EAAUiB,EACZ,EAoBgClC,SAAC,kBACzBC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CAACC,QApBD,WACb,IAAMC,EAAMC,EAAAA,IAAAA,KAAAA,UAAmBA,EAAAA,IAAAA,OAAAA,MAAiBvB,IAChDK,EAAUiB,EACZ,EAiBgClC,SAAC,uBAG7BC,EAAAA,EAAAA,KAACkB,EAAAA,EAAG,CAACC,GAAI,CAAEC,GAAI,GAAIrB,UACjBC,EAAAA,EAAAA,KAACmC,EAAAA,EAAS,CACRC,MAAM,eACNd,MAAOP,EACPsB,WAAS,EACTC,WAAS,EACTX,QAAS,EACTC,QAAS,GACTW,WAAY,CACVC,cAAcxC,EAAAA,EAAAA,KAACvB,EAAAA,EAAoB,CAACE,QAASoC,WAMzD,C","sources":["components/ContentCopyAdornment.tsx","pages/Base64.tsx"],"sourcesContent":["import { ContentCopy } from '@mui/icons-material';\nimport { IconButton, InputAdornment, Snackbar } from '@mui/material';\nimport ClipboardJS from 'clipboard';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface Props {\n  content?: string | undefined;\n  onSuccess?: Function | undefined;\n}\n\nexport default function ContentCopyAdornment({ content, onSuccess }: Props) {\n  const btn = useRef<HTMLButtonElement>(null);\n  const [open, setOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (btn.current) {\n      const clipboard = new ClipboardJS(btn.current);\n      clipboard.on('success', (e) => {\n        setOpen(true);\n      });\n      clipboard.on('error', (e) => {\n        console.error(e);\n      });\n    }\n  }, []);\n\n  return (\n    <>\n      <InputAdornment position=\"end\">\n        <IconButton ref={btn} data-clipboard-text={content} aria-label=\"Copy content\">\n          <ContentCopy />\n        </IconButton>\n      </InputAdornment>\n\n      <Snackbar open={open} onClose={() => setOpen(false)} autoHideDuration={3000} message=\"复制成功\" />\n    </>\n  );\n}\n","import { Box, Button, ButtonGroup, Container, TextField } from '@mui/material';\nimport { Input } from 'antd';\nimport { enc } from 'crypto-js';\nimport { useState } from 'react';\nimport ContentCopyAdornment from '../components/ContentCopyAdornment';\n\nexport default function Base64() {\n  const [plain, setPlain] = useState('');\n  const [target, setTarget] = useState('');\n  const encode = () => {\n    const str = enc.Base64.stringify(enc.Utf8.parse(plain));\n    setTarget(str);\n  };\n  const decode = () => {\n    const str = enc.Utf8.stringify(enc.Base64.parse(plain));\n    setTarget(str);\n  };\n  return (\n    <Container>\n      <Box sx={{ mt: 2 }}>\n        <Input.TextArea\n          value={plain}\n          onChange={(event) => {\n            setPlain(event.target.value);\n          }}\n          placeholder=\"文本\"\n          autoSize={{ minRows: 5, maxRows: 10 }}\n          showCount\n        />\n      </Box>\n      <Box sx={{ mt: 2 }}>\n        <ButtonGroup>\n          <Button onClick={encode}>编码</Button>\n          <Button onClick={decode}>解码</Button>\n        </ButtonGroup>\n      </Box>\n      <Box sx={{ mt: 2 }}>\n        <TextField\n          label=\"结果\"\n          value={target}\n          fullWidth\n          multiline\n          minRows={5}\n          maxRows={10}\n          InputProps={{\n            endAdornment: <ContentCopyAdornment content={target} />,\n          }}\n        />\n      </Box>\n    </Container>\n  );\n}\n"],"names":["ContentCopyAdornment","_ref","content","btn","onSuccess","useRef","_useState","useState","_useState2","_slicedToArray","open","setOpen","useEffect","current","clipboard","ClipboardJS","on","e","console","error","_jsxs","_Fragment","children","_jsx","InputAdornment","position","IconButton","ref","ContentCopy","Snackbar","onClose","autoHideDuration","message","Base64","plain","setPlain","_useState3","_useState4","target","setTarget","Container","Box","sx","mt","Input","value","onChange","event","placeholder","autoSize","minRows","maxRows","showCount","ButtonGroup","Button","onClick","str","enc","TextField","label","fullWidth","multiline","InputProps","endAdornment"],"sourceRoot":""}