{"version":3,"file":"static/js/596.ad6a6956.chunk.js","mappings":"8QA2FA,UA/EkB,WAChB,OAA8BA,EAAAA,EAAAA,UAAqB,CACjDC,WAAW,EACXC,iBAAiB,EACjBC,QAAS,EACTC,MAAM,EACNC,SAAU,GACVC,MAAO,sBANT,eAAOC,EAAP,KAAgBC,EAAhB,KAQA,GAAwBR,EAAAA,EAAAA,UAAiB,IAAzC,eAAOS,EAAP,KAAaC,EAAb,KACA,GAA0BV,EAAAA,EAAAA,UAAiB,QAA3C,eAAOW,EAAP,KAAcC,EAAd,KAEMC,EAAuB,CAC3B,CACEC,KAAM,YACNC,QAAS,CAAEC,IAAK,aAAcC,IAAK,oBACnCC,KAAM,SAACC,GACL,IAAMC,GAASC,EAAAA,EAAAA,GAAOF,EAAOG,WAAYX,GACzCD,EAAQU,EACT,IAYL,OACE,UAAC,IAAD,CAAKG,GAAI,CAAEC,OAAQ,QAAnB,WACE,SAAC,IAAD,CAAKD,GAAI,CAAEE,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAA7B,UACE,UAAC,IAAD,CAAMC,SARO,SAACC,GAClB,IAAMT,GAASC,EAAAA,EAAAA,GAAOZ,EAAME,GAC5BD,EAAQU,EACT,EAKiCU,cAAe,CAAEC,UAAU,GAAQC,OAAO,SAAtE,WACE,SAAC,SAAD,CAAWC,MAAM,eAAjB,UACE,SAAC,IAAD,CACEC,aAAcvB,EACdwB,SAAU,SAACC,GACTxB,EAASwB,EACV,EACD7B,QAAS,CACP,CAAE0B,MAAO,OAAQG,MAAO,QACxB,CAAEH,MAAO,QAASG,MAAO,UAE3BC,MAAO,CAAEC,MAAO,UAGpB,SAAC,SAAD,CAAWxB,KAAK,WAAhB,UACE,SAAC,IAAD,CACEyB,QAAShC,EAAQH,KACjB+B,SAAU,SAACK,GACThC,GAAW,kBAAKD,GAAN,IAAeH,KAAMoC,EAAMC,OAAOF,UAC7C,EAJH,yCASF,SAAC,SAAD,WACE,SAAC,IAAD,CAAQG,KAAK,UAAUC,SAAS,SAAhC,wCAMN,SAAC,KAAD,CACEL,MAAM,OACNd,OAAO,oBACPoB,KAAMjC,EACNwB,SA9CW,SAACU,GAChBnC,EAAQmC,EACT,EA6CK/B,KAAK,mBACLN,WAAYD,EACZuC,YAAa,CAAEC,iBAAiB,GAChCX,MAAO3B,EACPI,SAAUA,MAIjB,C,wHCrFYQ,EAAS,SAACe,EAAeY,GACpC,IACE,OAAOC,IAAAA,OAAgBb,EAAO,CAC5BY,OAAAA,EACAE,QAAS,CAACC,IAAqBC,MAIlC,CAFC,MAAOC,GACPC,QAAQC,MAAMF,EACf,CACD,OAAOjB,CACR,C","sources":["pages/formatter/index.tsx","utils/formatter.ts"],"sourcesContent":["import { Box } from '@mui/material';\nimport { Button, Checkbox, Form, Select } from 'antd';\nimport { useState } from 'react';\nimport AceEditor, { ICommand } from 'react-ace';\nimport { AceOptions } from 'react-ace/types';\nimport { format, parser } from '../../utils/formatter';\n\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\nimport 'ace-builds/src-min-noconflict/mode-json';\nimport 'ace-builds/src-min-noconflict/mode-json5';\nimport 'ace-builds/src-min-noconflict/theme-monokai';\n\nconst Formatter = () => {\n  const [options, setOptions] = useState<AceOptions>({\n    useWorker: false,\n    showLineNumbers: true,\n    tabSize: 2,\n    wrap: true,\n    fontSize: 14,\n    theme: 'ace/theme/monokai',\n  });\n  const [code, setCode] = useState<string>('');\n  const [model, setModel] = useState<string>('json');\n\n  const commands: ICommand[] = [\n    {\n      name: 'formatter',\n      bindKey: { win: 'Ctrl-Alt-L', mac: 'Command-Option-L' },\n      exec: (editor) => {\n        const result = format(editor.getValue(), model as parser);\n        setCode(result);\n      },\n    },\n  ];\n\n  const onChange = (newValue: string) => {\n    setCode(newValue);\n  };\n  const onPrettier = (values: any) => {\n    const result = format(code, model as parser);\n    setCode(result);\n  };\n\n  return (\n    <Box sx={{ height: '100%' }}>\n      <Box sx={{ pt: 2, pb: 1, pl: 1 }}>\n        <Form onFinish={onPrettier} initialValues={{ remember: true }} layout=\"inline\">\n          <Form.Item label=\"类型\">\n            <Select\n              defaultValue={model}\n              onChange={(value) => {\n                setModel(value);\n              }}\n              options={[\n                { label: 'JSON', value: 'json' },\n                { label: 'JSON5', value: 'json5' },\n              ]}\n              style={{ width: 100 }}\n            />\n          </Form.Item>\n          <Form.Item name=\"remember\">\n            <Checkbox\n              checked={options.wrap}\n              onChange={(event) => {\n                setOptions({ ...options, wrap: event.target.checked });\n              }}\n            >\n              自动换行\n            </Checkbox>\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              格式化\n            </Button>\n          </Form.Item>\n        </Form>\n      </Box>\n      <AceEditor\n        width=\"100%\"\n        height=\"calc(100% - 56px)\"\n        mode={model}\n        onChange={onChange}\n        name=\"UNIQUE_ID_OF_DIV\"\n        setOptions={options}\n        editorProps={{ $blockScrolling: true }}\n        value={code}\n        commands={commands}\n      />\n    </Box>\n  );\n};\nexport default Formatter;\n","import prettierBabelPlugin from 'prettier/parser-babel';\nimport parserYaml from 'prettier/parser-yaml';\nimport prettier from 'prettier/standalone';\n\nexport type parser = 'json' | 'json5' | 'yaml';\nexport const format = (value: string, parser: parser) => {\n  try {\n    return prettier.format(value, {\n      parser,\n      plugins: [prettierBabelPlugin, parserYaml],\n    });\n  } catch (e) {\n    console.error(e);\n  }\n  return value;\n};\n"],"names":["useState","useWorker","showLineNumbers","tabSize","wrap","fontSize","theme","options","setOptions","code","setCode","model","setModel","commands","name","bindKey","win","mac","exec","editor","result","format","getValue","sx","height","pt","pb","pl","onFinish","values","initialValues","remember","layout","label","defaultValue","onChange","value","style","width","checked","event","target","type","htmlType","mode","newValue","editorProps","$blockScrolling","parser","prettier","plugins","prettierBabelPlugin","parserYaml","e","console","error"],"sourceRoot":""}