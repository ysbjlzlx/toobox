{"version":3,"file":"static/js/3669.c92ab525.chunk.js","mappings":"wQAQe,SAASA,IACtB,IAAAC,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAA4BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GASxB,OACEG,EAAAA,EAAAA,MAACC,EAAAA,GAAa,CAACC,MAAO,CAAEC,kCAAmC,GAAIC,iCAAkC,IAAKC,SAAA,EACpGC,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,GAAI,GAAIJ,UACjBC,EAAAA,EAAAA,KAACI,EAAAA,EAAAA,SAAc,CACbC,MAAOjB,EACPkB,SAAU,SAACC,GACTlB,EAASkB,EAAMf,OAAOa,MACxB,EACAG,YAAY,eACZC,SAAU,CAAEC,QAAS,EAAGC,QAAS,IACjCC,WAAS,OAGbZ,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,GAAI,GAAIJ,UACjBL,EAAAA,EAAAA,MAACmB,EAAAA,EAAAA,QAAa,CAAAd,SAAA,EACZC,EAAAA,EAAAA,KAACc,EAAAA,GAAM,CAACC,QAvBD,WACb,IAAMC,EAAMC,EAAAA,IAAAA,OAAAA,UAAqBA,EAAAA,IAAAA,KAAAA,MAAe7B,IAChDK,EAAUuB,EACZ,EAoBgCjB,SAAC,kBACzBC,EAAAA,EAAAA,KAACc,EAAAA,GAAM,CAACC,QApBD,WACb,IAAMC,EAAMC,EAAAA,IAAAA,KAAAA,UAAmBA,EAAAA,IAAAA,OAAAA,MAAiB7B,IAChDK,EAAUuB,EACZ,EAiBgCjB,SAAC,uBAG7BC,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,GAAI,GAAIJ,UACjBC,EAAAA,EAAAA,KAACkB,EAAAA,EAAa,CAACC,MAAM,eAAKC,KAAM5B,QAIxC,C,0KCnCe,SAAS6B,EAAiBC,GAAmB,IAAhBF,EAAIE,EAAJF,KAC1CG,EAAoCC,EAAAA,GAAAA,aAAoBC,GAAAtC,EAAAA,EAAAA,GAAAoC,EAAA,GAAjDG,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAEhC,OACE/B,EAAAA,EAAAA,MAAAkC,EAAAA,SAAA,CAAA7B,SAAA,CACG4B,GACD3B,EAAAA,EAAAA,KAACc,EAAAA,GAAM,CACLe,MAAM7B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAY,IACnBf,QAAS,WACPgB,IAAKX,GAAQ,GAAI,CACfY,OAAQ,aACRC,OAAQ,SAACC,GACPC,QAAQC,IAAIF,GACZR,EAAWW,KAAK,CACdC,KAAM,UACNC,QAAS,4BAEb,GAEJ,MAIR,CCtBA,IAQA,EARiC,SAAHjB,GAAyB,IAAnBF,EAAIE,EAAJF,KAAMD,EAAKG,EAALH,MAChCqB,EAAapC,EAAAA,EAAAA,SACrB,OACEJ,EAAAA,EAAAA,KAACyC,EAAAA,EAAI,CAACtB,MAAOA,EAAOuB,OAAO1C,EAAAA,EAAAA,KAACqB,EAAiB,CAACD,KAAMA,IAAUuB,UAAW,CAAEC,QAAS,QAAUC,WAAW,EAAM9C,UAC7GC,EAAAA,EAAAA,KAACwC,EAAQ,CAACM,UAAU,EAAMrC,SAAU,CAAEC,QAAS,EAAGC,QAAS,IAAMN,MAAOe,KAG9E,C","sources":["app/base64/page.tsx","components/ContentCopyButton.tsx","components/TextResultBox.tsx"],"sourcesContent":["import { PageContainer } from '@ant-design/pro-components';\nimport { Box } from '@mui/material';\nimport { Button, Input, Space } from 'antd';\nimport { enc } from 'crypto-js';\nimport { useState } from 'react';\n\nimport TextResultBox from '../../components/TextResultBox';\n\nexport default function Page() {\n  const [plain, setPlain] = useState('');\n  const [target, setTarget] = useState('');\n  const encode = () => {\n    const str = enc.Base64.stringify(enc.Utf8.parse(plain));\n    setTarget(str);\n  };\n  const decode = () => {\n    const str = enc.Utf8.stringify(enc.Base64.parse(plain));\n    setTarget(str);\n  };\n  return (\n    <PageContainer token={{ paddingInlinePageContainerContent: 10, paddingBlockPageContainerContent: 10 }}>\n      <Box sx={{ mt: 2 }}>\n        <Input.TextArea\n          value={plain}\n          onChange={(event) => {\n            setPlain(event.target.value);\n          }}\n          placeholder=\"文本\"\n          autoSize={{ minRows: 5, maxRows: 10 }}\n          showCount\n        />\n      </Box>\n      <Box sx={{ mt: 2 }}>\n        <Space.Compact>\n          <Button onClick={encode}>编码</Button>\n          <Button onClick={decode}>解码</Button>\n        </Space.Compact>\n      </Box>\n      <Box sx={{ mt: 2 }}>\n        <TextResultBox title=\"结果\" text={target} />\n      </Box>\n    </PageContainer>\n  );\n}\n","import { CopyOutlined } from '@ant-design/icons';\nimport { Button, message } from 'antd';\nimport copy from 'copy-to-clipboard';\n\ninterface Props {\n  text?: string | undefined;\n}\n\nexport default function ContentCopyButton({ text }: Props) {\n  const [messageApi, contextHolder] = message.useMessage();\n\n  return (\n    <>\n      {contextHolder}\n      <Button\n        icon={<CopyOutlined />}\n        onClick={() => {\n          copy(text || '', {\n            format: 'text/plain',\n            onCopy: (clipboardData: object) => {\n              console.log(clipboardData);\n              messageApi.open({\n                type: 'success',\n                content: '复制成功',\n              });\n            },\n          });\n        }}\n      />\n    </>\n  );\n}\n","import { Card, Input } from 'antd';\nimport { FC } from 'react';\nimport ContentCopyButton from './ContentCopyButton';\n\ninterface Props {\n  title: string;\n  text: string;\n}\n\nconst TextResultBox: FC<Props> = ({ text, title }) => {\n  const { TextArea } = Input;\n  return (\n    <Card title={title} extra={<ContentCopyButton text={text} />} bodyStyle={{ padding: '10px' }} hoverable={false}>\n      <TextArea bordered={true} autoSize={{ minRows: 5, maxRows: 10 }} value={text} />\n    </Card>\n  );\n};\nexport default TextResultBox;\n"],"names":["Page","_useState","useState","_useState2","_slicedToArray","plain","setPlain","_useState3","_useState4","target","setTarget","_jsxs","PageContainer","token","paddingInlinePageContainerContent","paddingBlockPageContainerContent","children","_jsx","Box","sx","mt","Input","value","onChange","event","placeholder","autoSize","minRows","maxRows","showCount","Space","Button","onClick","str","enc","TextResultBox","title","text","ContentCopyButton","_ref","_message$useMessage","message","_message$useMessage2","messageApi","contextHolder","_Fragment","icon","CopyOutlined","copy","format","onCopy","clipboardData","console","log","open","type","content","TextArea","Card","extra","bodyStyle","padding","hoverable","bordered"],"sourceRoot":""}