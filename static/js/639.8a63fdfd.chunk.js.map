{"version":3,"file":"static/js/639.8a63fdfd.chunk.js","mappings":"6OAUe,SAASA,EAAoBC,GAAiC,IAA9BC,EAAOD,EAAPC,QACvCC,GADyDF,EAATG,WAC1CC,EAAAA,EAAAA,QAA0B,OACtCC,GAAwBC,EAAAA,EAAAA,WAAkB,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAcpB,OAZAI,EAAAA,EAAAA,YAAU,WACR,GAAIT,EAAIU,QAAS,CACf,IAAMC,EAAY,IAAIC,IAAJ,CAAgBZ,EAAIU,SACtCC,EAAUE,GAAG,WAAW,SAACC,GACvBN,GAAQ,EACV,IACAG,EAAUE,GAAG,SAAS,SAACC,GACrBC,QAAQC,MAAMF,EAChB,GACF,CACF,GAAG,KAGDG,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAc,CAACC,SAAS,MAAKH,UAC5BC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACC,IAAKxB,EAAK,sBAAqBD,EAAS,aAAW,eAAcoB,UAC3EC,EAAAA,EAAAA,KAACK,EAAAA,EAAW,SAIhBL,EAAAA,EAAAA,KAACM,EAAAA,EAAQ,CAACnB,KAAMA,EAAMoB,QAAS,kBAAMnB,GAAQ,EAAM,EAAEoB,iBAAkB,IAAMC,QAAQ,+BAG3F,C,iOC9BO,SAASC,EAAOC,EAAaC,GAClC,IAAMC,EAAUC,KAAKC,KAAKJ,GACpBK,EAAUF,KAAKG,MAAML,GAC3B,OAAOE,KAAKG,MAAMH,KAAKJ,UAAYM,EAAUH,IAAYA,CAC3D,CCPO,IAAMK,EAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAExEC,EAA4B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAE1JC,EAA4B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAgDjKC,EAAY,SAAH3C,GAOkB,IAAD4C,EAAA5C,EAN9B6C,OAAAA,OAAM,IAAAD,EAAG,EAACA,EAAAE,EAAA9C,EACV+C,QAAAA,OAAO,IAAAD,GAAOA,EAAAE,EAAAhD,EACdiD,UAAAA,OAAS,IAAAD,GAAOA,EAAAE,EAAAlD,EAChBmD,UAAAA,OAAS,IAAAD,GAAOA,EAAAE,EAAApD,EAChBqD,OAAAA,OAAM,IAAAD,GAAQA,EAAAE,EAAAtD,EACduD,YAAAA,OAAW,IAAAD,EAAG,WAAUA,EAExB,GAAsB,qBAAXT,GAAqC,OAAXA,GAAmBA,GAAU,EAChE,MArDe,GAuDjB,IAAIW,EAAkB,GAatB,GAZIT,IACFS,EAAQA,EAAMC,OAAOjB,IAEnBS,IACFO,EAAQA,EAAMC,OAAOhB,IAEnBU,IACFK,EAAQA,EAAMC,OAAOf,IAEnBW,GAAUE,IACZC,EAAQA,EAAMC,OAAOF,EAAYG,MAAM,MAErCF,EAAMX,OAAS,EACjB,MArEe,GAuEfc,EAAAA,QAAUH,GAGZ,IADA,IAAII,EAAM,GACDC,EAAI,EAAGA,EAAIhB,EAAQgB,IAC1BD,GAAOJ,EAAMM,EAAU,EAAGN,EAAMX,SAElC,OAAOe,CACT,E,WClFMG,EAAmC,CACvChB,SAAS,EACTE,WAAW,EACXE,WAAW,EACXE,QAAQ,EACRE,YAAa,YAEA,SAASS,IACtB,IAAA3D,GAAwCC,EAAAA,EAAAA,UAAiB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArD4D,EAAY1D,EAAA,GAAE2D,EAAe3D,EAAA,IAEpCI,EAAAA,EAAAA,YAAU,WACRwD,GACF,GAAG,IAEH,IAAMA,EAAU,WAAiD,IACzDC,EAAUzB,EADwB0B,UAAAxB,OAAA,QAAAyB,IAAAD,UAAA,GAAAA,UAAA,GAAGN,GAE3CG,EAAgBE,EAClB,EAUA,OACE9C,EAAAA,EAAAA,KAACiD,EAAAA,GAAa,CAACC,OAAO,EAAOC,MAAO,CAAEC,WAAY,OAAQC,YAAa,OAAQC,aAAc,QAASvD,UACpGC,EAAAA,EAAAA,KAACuD,EAAAA,EAAI,CAACC,OAAO,aAAaC,cAAehB,EAAgBiB,eAVtC,SAACC,EAAoBC,GAC1Cf,EAAQe,EACV,EAQ6FC,SAN5E,SAACC,GAChBjB,EAAQiB,EACV,EAIgH/D,UAC1GF,EAAAA,EAAAA,MAACkE,EAAAA,EAAI,CAACC,QAAS,EAAChE,EAAAA,EAAAA,KAACiE,EAAAA,GAAM,CAASC,SAAS,SAASC,MAAMnE,EAAAA,EAAAA,KAACoE,EAAAA,EAAO,KAApC,MAA6CrE,SAAA,EACvEF,EAAAA,EAAAA,MAACwE,EAAAA,EAAG,CAAAtE,SAAA,EACFC,EAAAA,EAAAA,KAACsE,EAAAA,EAAG,CAACC,KAAM,EAAExE,UACXC,EAAAA,EAAAA,KAACuD,EAAAA,EAAAA,KAAS,CAACiB,KAAK,UAAUC,cAAc,UAAS1E,UAC/CC,EAAAA,EAAAA,KAAC0E,EAAAA,EAAQ,CAAA3E,SAAC,iCAGdC,EAAAA,EAAAA,KAACsE,EAAAA,EAAG,CAACC,KAAM,EAAExE,UACXC,EAAAA,EAAAA,KAACuD,EAAAA,EAAAA,KAAS,CAACiB,KAAK,YAAYC,cAAc,UAAS1E,UACjDC,EAAAA,EAAAA,KAAC0E,EAAAA,EAAQ,CAAA3E,SAAC,wCAGdC,EAAAA,EAAAA,KAACsE,EAAAA,EAAG,CAACC,KAAM,EAAExE,UACXC,EAAAA,EAAAA,KAACuD,EAAAA,EAAAA,KAAS,CAACiB,KAAK,YAAYC,cAAc,UAAS1E,UACjDC,EAAAA,EAAAA,KAAC0E,EAAAA,EAAQ,CAAA3E,SAAC,wCAGdC,EAAAA,EAAAA,KAACsE,EAAAA,EAAG,CAACC,KAAM,EAAExE,UACXF,EAAAA,EAAAA,MAACwE,EAAAA,EAAG,CAAAtE,SAAA,EACFC,EAAAA,EAAAA,KAACsE,EAAAA,EAAG,CAACC,KAAM,EAAExE,UACXC,EAAAA,EAAAA,KAACuD,EAAAA,EAAAA,KAAS,CAACiB,KAAK,SAASC,cAAc,UAAS1E,UAC9CC,EAAAA,EAAAA,KAAC0E,EAAAA,EAAQ,CAAA3E,SAAC,sBAGdC,EAAAA,EAAAA,KAACsE,EAAAA,EAAG,CAACC,KAAM,GAAGxE,UACZC,EAAAA,EAAAA,KAACuD,EAAAA,EAAAA,KAAS,CAACiB,KAAK,cAAazE,UAC3BC,EAAAA,EAAAA,KAAC2E,EAAAA,EAAK,iBAMhB3E,EAAAA,EAAAA,KAACqE,EAAAA,EAAG,CAAAtE,UACFC,EAAAA,EAAAA,KAACsE,EAAAA,EAAG,CAACC,KAAM,GAAGxE,UACZC,EAAAA,EAAAA,KAACuD,EAAAA,EAAAA,KAAS,CAACiB,KAAK,SAASI,MAAM,eAAI7E,UACjCC,EAAAA,EAAAA,KAAC6E,EAAAA,EAAM,CAAClE,IAAK,EAAGC,IAAK,GAAIkE,KAAM,EAAGC,MAAO,CAAE,EAAG,IAAK,EAAG,IAAK,GAAI,KAAM,GAAI,KAAM,GAAI,eAIzF/E,EAAAA,EAAAA,KAACqE,EAAAA,EAAG,CAAAtE,UACFC,EAAAA,EAAAA,KAACsE,EAAAA,EAAG,CAACC,KAAM,GAAGxE,UACZC,EAAAA,EAAAA,KAACuD,EAAAA,EAAAA,KAAS,CAAAxD,UACRF,EAAAA,EAAAA,MAAC8E,EAAAA,EAAAA,MAAW,CAACK,SAAO,EAAAjF,SAAA,EAClBC,EAAAA,EAAAA,KAAC2E,EAAAA,EAAK,CAACM,MAAOtC,EAAcQ,MAAO,CAAE+B,MAAO,wBAC5ClF,EAAAA,EAAAA,KAACvB,EAAAA,EAAoB,CAACE,QAASgE,mBASjD,C","sources":["components/ContentCopyAdornment.tsx","scripts/Random.ts","scripts/RandomStringUtils.ts","pages/Random.tsx"],"sourcesContent":["import { ContentCopy } from '@mui/icons-material';\nimport { IconButton, InputAdornment, Snackbar } from '@mui/material';\nimport ClipboardJS from 'clipboard';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface Props {\n  content?: string | undefined;\n  onSuccess?: Function | undefined;\n}\n\nexport default function ContentCopyAdornment({ content, onSuccess }: Props) {\n  const btn = useRef<HTMLButtonElement>(null);\n  const [open, setOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (btn.current) {\n      const clipboard = new ClipboardJS(btn.current);\n      clipboard.on('success', (e) => {\n        setOpen(true);\n      });\n      clipboard.on('error', (e) => {\n        console.error(e);\n      });\n    }\n  }, []);\n\n  return (\n    <>\n      <InputAdornment position=\"end\">\n        <IconButton ref={btn} data-clipboard-text={content} aria-label=\"Copy content\">\n          <ContentCopy />\n        </IconButton>\n      </InputAdornment>\n\n      <Snackbar open={open} onClose={() => setOpen(false)} autoHideDuration={3000} message=\"复制成功\" />\n    </>\n  );\n}\n","/**\n * 生成整数随机数\n * 包含最小值，不含最大值的随机数\n * @param min 最小值（包含）\n * @param max 最大值（不包含）\n * @return {number}\n */\nexport function random(min: number, max: number): number {\n  const ceilMin = Math.ceil(min);\n  const ceilMax = Math.floor(max);\n  return Math.floor(Math.random() * (ceilMax - ceilMin)) + ceilMin;\n}\n\n/**\n * 生成整数随机数\n * 同时包含最小值和最大值的随机数\n * @param min 最小值（包含）\n * @param max 最大值（包含）\n * @return {number}\n */\nexport function randomInclusive(min: number, max: number): number {\n  const ceilMin = Math.ceil(min);\n  const ceilMax = Math.floor(max);\n  return Math.floor(Math.random() * (ceilMax - ceilMin + 1)) + ceilMin;\n}\n","import * as _ from 'lodash';\nimport { random as randomInt } from './Random';\n\n// prettier-ignore\nexport const NUMERIC_CHARS: string[] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n// prettier-ignore\nexport const LOWERCASE_CHARS: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n// prettier-ignore\nexport const UPPERCASE_CHARS: string[] = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n// prettier-ignore\nexport const SYMBOL_CHARS: string[] = ['!', '@', '#', '$', '%', '^', '&', '*']\n\nconst EMPTY_CHAR = '';\n\nconst random = function (length: number): string {\n  const options: GeneratorOptions = {\n    length: length,\n    numeric: true,\n    lowercase: true,\n    uppercase: true,\n    symbol: false,\n  };\n  return generator(options);\n};\n\nconst randomAlphabetic = function (length: number): string {\n  const options: GeneratorOptions = {\n    length: length,\n    numeric: false,\n    lowercase: true,\n    uppercase: true,\n    symbol: false,\n  };\n  return generator(options);\n};\n\nconst randomNumber = function (length: number): string {\n  const options: GeneratorOptions = {\n    length: length,\n    numeric: true,\n    lowercase: false,\n    uppercase: false,\n    symbol: false,\n  };\n  return generator(options);\n};\n\nexport interface GeneratorOptions {\n  length?: number;\n  numeric?: boolean;\n  lowercase?: boolean;\n  uppercase?: boolean;\n  symbol?: boolean;\n  symbolChars?: string;\n}\n\nconst generator = ({\n  length = 8,\n  numeric = true,\n  lowercase = true,\n  uppercase = true,\n  symbol = false,\n  symbolChars = '!@#$%^&*',\n}: GeneratorOptions): string => {\n  if (typeof length === 'undefined' || length === null || length <= 0) {\n    return EMPTY_CHAR;\n  }\n  let chars: string[] = [];\n  if (numeric) {\n    chars = chars.concat(NUMERIC_CHARS);\n  }\n  if (lowercase) {\n    chars = chars.concat(LOWERCASE_CHARS);\n  }\n  if (uppercase) {\n    chars = chars.concat(UPPERCASE_CHARS);\n  }\n  if (symbol && symbolChars) {\n    chars = chars.concat(symbolChars.split(''));\n  }\n  if (chars.length < 1) {\n    return EMPTY_CHAR;\n  } else {\n    _.shuffle(chars);\n  }\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += chars[randomInt(0, chars.length)];\n  }\n  return str;\n};\n\nexport { random, randomAlphabetic, randomNumber, generator };\n","import { useEffect, useState } from 'react';\n\nimport { PageContainer } from '@ant-design/pro-layout';\nimport { Refresh } from '@mui/icons-material';\nimport { Button, Card, Checkbox, Col, Form, Input, Row, Slider } from 'antd';\nimport ContentCopyAdornment from '../components/ContentCopyAdornment';\nimport { generator, GeneratorOptions } from '../scripts/RandomStringUtils';\n\nconst initialOptions: GeneratorOptions = {\n  numeric: true,\n  lowercase: true,\n  uppercase: true,\n  symbol: false,\n  symbolChars: '!@#$%^&*',\n};\nexport default function Random() {\n  const [randomString, setRandomString] = useState<string>('');\n\n  useEffect(() => {\n    refresh();\n  }, []);\n\n  const refresh = (options: GeneratorOptions = initialOptions) => {\n    const varchar = generator(options);\n    setRandomString(varchar);\n  };\n\n  const onValuesChange = (changedValues: any, allValues: GeneratorOptions) => {\n    refresh(allValues);\n  };\n\n  const onFinish = (values: GeneratorOptions) => {\n    refresh(values);\n  };\n\n  return (\n    <PageContainer title={false} style={{ paddingTop: '20px', paddingLeft: '20px', paddingRight: '20px' }}>\n      <Form layout=\"horizontal\" initialValues={initialOptions} onValuesChange={onValuesChange} onFinish={onFinish}>\n        <Card actions={[<Button key=\"1\" htmlType=\"submit\" icon={<Refresh />} />]}>\n          <Row>\n            <Col span={4}>\n              <Form.Item name=\"numeric\" valuePropName=\"checked\">\n                <Checkbox>数字 0 ～ 9</Checkbox>\n              </Form.Item>\n            </Col>\n            <Col span={4}>\n              <Form.Item name=\"lowercase\" valuePropName=\"checked\">\n                <Checkbox>小写字母 a ~ z</Checkbox>\n              </Form.Item>\n            </Col>\n            <Col span={4}>\n              <Form.Item name=\"uppercase\" valuePropName=\"checked\">\n                <Checkbox>大写字母 A ~ Z</Checkbox>\n              </Form.Item>\n            </Col>\n            <Col span={8}>\n              <Row>\n                <Col span={4}>\n                  <Form.Item name=\"symbol\" valuePropName=\"checked\">\n                    <Checkbox>符号</Checkbox>\n                  </Form.Item>\n                </Col>\n                <Col span={20}>\n                  <Form.Item name=\"symbolChars\">\n                    <Input />\n                  </Form.Item>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n          <Row>\n            <Col span={24}>\n              <Form.Item name=\"length\" label=\"长度\">\n                <Slider min={6} max={64} step={1} marks={{ 6: '6', 8: '8', 16: '16', 32: '32', 64: '64' }} />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Row>\n            <Col span={24}>\n              <Form.Item>\n                <Input.Group compact>\n                  <Input value={randomString} style={{ width: 'calc(100% - 60px)' }} />\n                  <ContentCopyAdornment content={randomString} />\n                </Input.Group>\n              </Form.Item>\n            </Col>\n          </Row>\n        </Card>\n      </Form>\n    </PageContainer>\n  );\n}\n"],"names":["ContentCopyAdornment","_ref","content","btn","onSuccess","useRef","_useState","useState","_useState2","_slicedToArray","open","setOpen","useEffect","current","clipboard","ClipboardJS","on","e","console","error","_jsxs","_Fragment","children","_jsx","InputAdornment","position","IconButton","ref","ContentCopy","Snackbar","onClose","autoHideDuration","message","random","min","max","ceilMin","Math","ceil","ceilMax","floor","NUMERIC_CHARS","LOWERCASE_CHARS","UPPERCASE_CHARS","generator","_ref$length","length","_ref$numeric","numeric","_ref$lowercase","lowercase","_ref$uppercase","uppercase","_ref$symbol","symbol","_ref$symbolChars","symbolChars","chars","concat","split","_","str","i","randomInt","initialOptions","Random","randomString","setRandomString","refresh","varchar","arguments","undefined","PageContainer","title","style","paddingTop","paddingLeft","paddingRight","Form","layout","initialValues","onValuesChange","changedValues","allValues","onFinish","values","Card","actions","Button","htmlType","icon","Refresh","Row","Col","span","name","valuePropName","Checkbox","Input","label","Slider","step","marks","compact","value","width"],"sourceRoot":""}