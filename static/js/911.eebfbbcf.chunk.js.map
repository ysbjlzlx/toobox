{"version":3,"file":"static/js/911.eebfbbcf.chunk.js","mappings":"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","sources":["components/ContentCopyAdornment.tsx","components/RefreshAdornment.tsx","components/Block.tsx","scripts/Random.ts","scripts/RandomStringUtils.ts","pages/Random.tsx"],"sourcesContent":["import { ContentCopy } from '@mui/icons-material';\nimport { IconButton, InputAdornment, Snackbar } from '@mui/material';\nimport ClipboardJS from 'clipboard';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface Props {\n  content?: string | undefined;\n  onSuccess?: Function | undefined;\n}\n\nexport default function ContentCopyAdornment({ content, onSuccess }: Props) {\n  const btn = useRef<HTMLButtonElement>(null);\n  const [open, setOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (btn.current) {\n      const clipboard = new ClipboardJS(btn.current);\n      clipboard.on('success', (e) => {\n        setOpen(true);\n      });\n      clipboard.on('error', (e) => {\n        console.error(e);\n      });\n    }\n  }, []);\n\n  return (\n    <>\n      <InputAdornment position=\"end\">\n        <IconButton ref={btn} data-clipboard-text={content} aria-label=\"Copy content\">\n          <ContentCopy />\n        </IconButton>\n      </InputAdornment>\n\n      <Snackbar open={open} onClose={() => setOpen(false)} autoHideDuration={3000} message=\"复制成功\" />\n    </>\n  );\n}\n","import { Refresh as RefreshIcon } from '@mui/icons-material';\nimport { IconButton, InputAdornment } from '@mui/material';\nimport { MouseEventHandler } from 'react';\n\ninterface Props {\n  onClick: MouseEventHandler | undefined;\n}\n\nconst RefreshAdornment = ({ onClick }: Props) => {\n  return (\n    <InputAdornment position=\"end\">\n      <IconButton aria-label=\"Refresh hex\" onClick={onClick}>\n        <RefreshIcon />\n      </IconButton>\n    </InputAdornment>\n  );\n};\n\nexport default RefreshAdornment;\n","import { styled } from '@mui/material/styles';\n\nexport const Block = styled('div')({\n  position: 'relative',\n  padding: '24px',\n  margin: 'auto',\n  border: '1px solid rgba(0, 0, 0, 0.12)',\n  borderRadius: '10px',\n});\n","/**\n * 生成整数随机数\n * 包含最小值，不含最大值的随机数\n * @param min 最小值（包含）\n * @param max 最大值（不包含）\n * @return {number}\n */\nexport function random(min: number, max: number): number {\n  const ceilMin = Math.ceil(min);\n  const ceilMax = Math.floor(max);\n  return Math.floor(Math.random() * (ceilMax - ceilMin)) + ceilMin;\n}\n\n/**\n * 生成整数随机数\n * 同时包含最小值和最大值的随机数\n * @param min 最小值（包含）\n * @param max 最大值（包含）\n * @return {number}\n */\nexport function randomInclusive(min: number, max: number): number {\n  const ceilMin = Math.ceil(min);\n  const ceilMax = Math.floor(max);\n  return Math.floor(Math.random() * (ceilMax - ceilMin + 1)) + ceilMin;\n}\n","import * as _ from 'lodash';\nimport { random as randomInt } from './Random';\n\n// prettier-ignore\nexport const NUMERIC_CHARS: string[] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n// prettier-ignore\nexport const LOWERCASE_CHARS: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n// prettier-ignore\nexport const UPPERCASE_CHARS: string[] = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n// prettier-ignore\nexport const SYMBOL_CHARS: string[] = ['!', '@', '#', '$', '%', '^', '&', '*']\n\nconst EMPTY_CHAR = '';\n\nconst random = function (length: number): string {\n  const options: GeneratorOptions = {\n    length: length,\n    numeric: true,\n    lowercase: true,\n    uppercase: true,\n    symbol: false,\n  };\n  return generator(options);\n};\n\nconst randomAlphabetic = function (length: number): string {\n  const options: GeneratorOptions = {\n    length: length,\n    numeric: false,\n    lowercase: true,\n    uppercase: true,\n    symbol: false,\n  };\n  return generator(options);\n};\n\nconst randomNumber = function (length: number): string {\n  const options: GeneratorOptions = {\n    length: length,\n    numeric: true,\n    lowercase: false,\n    uppercase: false,\n    symbol: false,\n  };\n  return generator(options);\n};\n\nexport interface GeneratorOptions {\n  length?: number;\n  numeric?: boolean;\n  lowercase?: boolean;\n  uppercase?: boolean;\n  symbol?: boolean;\n  symbolChars?: string;\n}\n\nconst generator = ({\n  length = 8,\n  numeric = true,\n  lowercase = true,\n  uppercase = true,\n  symbol = false,\n  symbolChars = '!@#$%^&*',\n}: GeneratorOptions): string => {\n  if (typeof length === 'undefined' || length === null || length <= 0) {\n    return EMPTY_CHAR;\n  }\n  let chars: string[] = [];\n  if (numeric) {\n    chars = chars.concat(NUMERIC_CHARS);\n  }\n  if (lowercase) {\n    chars = chars.concat(LOWERCASE_CHARS);\n  }\n  if (uppercase) {\n    chars = chars.concat(UPPERCASE_CHARS);\n  }\n  if (symbol && symbolChars) {\n    chars = chars.concat(symbolChars.split(''));\n  }\n  if (chars.length < 1) {\n    return EMPTY_CHAR;\n  } else {\n    _.shuffle(chars);\n  }\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += chars[randomInt(0, chars.length)];\n  }\n  return str;\n};\n\nexport { random, randomAlphabetic, randomNumber, generator };\n","import { Box, Checkbox, Container, FormControlLabel, FormGroup, Slider, TextField } from '@mui/material';\nimport { useEffect, useState } from 'react';\n\nimport { Block } from '../components/Block';\nimport ContentCopyAdornment from '../components/ContentCopyAdornment';\nimport RefreshAdornment from '../components/RefreshAdornment';\nimport { generator, GeneratorOptions } from '../scripts/RandomStringUtils';\n\nexport default function Random() {\n  const [randomString, setRandomString] = useState<string>('');\n  const [numeric, setNumeric] = useState<boolean>(true);\n  const [upperCase, setUpperCase] = useState<boolean>(true);\n  const [lowerCase, setLowerCase] = useState<boolean>(true);\n  const [symbol, setSymbol] = useState<boolean>(false);\n  const [length, setLength] = useState<number>(8);\n  const [symbolChars, setSymbolChars] = useState<string>('!@#$%^&*');\n  const [options, setOptions] = useState<GeneratorOptions>({});\n  useEffect(() => {\n    setOptions({\n      length: length,\n      numeric: numeric,\n      lowercase: lowerCase,\n      uppercase: upperCase,\n      symbol: symbol,\n      symbolChars: symbolChars,\n    });\n  }, [length, numeric, lowerCase, upperCase, symbol, symbolChars]);\n\n  const refresh = () => {\n    const varchar = generator(options);\n    setRandomString(varchar);\n  };\n\n  useEffect(refresh, [length, numeric, upperCase, lowerCase, symbol, symbolChars, options]);\n\n  const label = { inputProps: { 'aria-label': 'Checkbox' } };\n\n  return (\n    <Container>\n      <Block sx={{ mt: 2 }}>\n        <FormGroup row>\n          <FormControlLabel\n            control={<Checkbox {...label} defaultChecked />}\n            label=\"数字 0 ～ 9\"\n            value={numeric}\n            onChange={() => {\n              setNumeric(!numeric);\n            }}\n          />\n          <FormControlLabel\n            control={<Checkbox {...label} defaultChecked />}\n            label=\"小写字母 a ~ z\"\n            value={lowerCase}\n            onChange={() => {\n              setLowerCase(!lowerCase);\n            }}\n          />\n          <FormControlLabel\n            control={<Checkbox {...label} defaultChecked />}\n            label=\"大写字母 A ~ Z\"\n            value={upperCase}\n            onChange={() => {\n              setUpperCase(!upperCase);\n            }}\n          />\n          <FormControlLabel\n            control={<Checkbox {...label} />}\n            label=\"符号\"\n            value={symbol}\n            onChange={() => {\n              setSymbol(!symbol);\n            }}\n          />\n          <TextField\n            label=\"符号\"\n            value={symbolChars}\n            onChange={(event) => {\n              setSymbolChars(event.target.value);\n            }}\n            size=\"small\"\n          />\n        </FormGroup>\n        <Box sx={{ mt: 3 }}>\n          <Slider\n            defaultValue={8}\n            valueLabelDisplay=\"on\"\n            value={length}\n            min={6}\n            max={64}\n            step={1}\n            marks={[\n              { value: 6, label: '6' },\n              { value: 8, label: '8' },\n              { value: 16, label: '16' },\n              { value: 32, label: '32' },\n              { value: 64, label: '64' },\n            ]}\n            onChange={(event, value) => {\n              if (typeof value === 'number') {\n                setLength(value);\n              }\n            }}\n          />\n        </Box>\n\n        <Box sx={{ mt: 2 }}>\n          <TextField\n            variant=\"outlined\"\n            label=\"随机结果\"\n            value={randomString}\n            InputProps={{\n              endAdornment: (\n                <>\n                  <RefreshAdornment onClick={refresh} />\n                  <ContentCopyAdornment content={randomString} />\n                </>\n              ),\n            }}\n            onChange={(event) => {\n              setRandomString(event.target.value);\n            }}\n            fullWidth\n          />\n        </Box>\n      </Block>\n    </Container>\n  );\n}\n"],"names":["ContentCopyAdornment","content","btn","onSuccess","useRef","useState","open","setOpen","useEffect","current","clipboard","ClipboardJS","on","e","console","error","position","ref","onClose","autoHideDuration","message","onClick","Block","styled","padding","margin","border","borderRadius","random","min","max","ceilMin","Math","ceil","ceilMax","floor","NUMERIC_CHARS","LOWERCASE_CHARS","UPPERCASE_CHARS","generator","length","numeric","lowercase","uppercase","symbol","symbolChars","chars","concat","split","_","str","i","randomInt","Random","randomString","setRandomString","setNumeric","upperCase","setUpperCase","lowerCase","setLowerCase","setSymbol","setLength","setSymbolChars","options","setOptions","refresh","varchar","label","inputProps","Container","sx","mt","FormGroup","row","FormControlLabel","control","Checkbox","defaultChecked","value","onChange","TextField","event","target","size","Box","Slider","defaultValue","valueLabelDisplay","step","marks","variant","InputProps","endAdornment","RefreshAdornment","fullWidth"],"sourceRoot":""}