{"version":3,"file":"static/js/639.5feb59cf.chunk.js","mappings":"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","sources":["components/ContentCopyAdornment.tsx","scripts/Random.ts","scripts/RandomStringUtils.ts","pages/Random.tsx"],"sourcesContent":["import { ContentCopy } from '@mui/icons-material';\nimport { IconButton, InputAdornment, Snackbar } from '@mui/material';\nimport ClipboardJS from 'clipboard';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface Props {\n  content?: string | undefined;\n  onSuccess?: Function | undefined;\n}\n\nexport default function ContentCopyAdornment({ content, onSuccess }: Props) {\n  const btn = useRef<HTMLButtonElement>(null);\n  const [open, setOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (btn.current) {\n      const clipboard = new ClipboardJS(btn.current);\n      clipboard.on('success', (e) => {\n        setOpen(true);\n      });\n      clipboard.on('error', (e) => {\n        console.error(e);\n      });\n    }\n  }, []);\n\n  return (\n    <>\n      <InputAdornment position=\"end\">\n        <IconButton ref={btn} data-clipboard-text={content} aria-label=\"Copy content\">\n          <ContentCopy />\n        </IconButton>\n      </InputAdornment>\n\n      <Snackbar open={open} onClose={() => setOpen(false)} autoHideDuration={3000} message=\"复制成功\" />\n    </>\n  );\n}\n","/**\n * 生成整数随机数\n * 包含最小值，不含最大值的随机数\n * @param min 最小值（包含）\n * @param max 最大值（不包含）\n * @return {number}\n */\nexport function random(min: number, max: number): number {\n  const ceilMin = Math.ceil(min);\n  const ceilMax = Math.floor(max);\n  return Math.floor(Math.random() * (ceilMax - ceilMin)) + ceilMin;\n}\n\n/**\n * 生成整数随机数\n * 同时包含最小值和最大值的随机数\n * @param min 最小值（包含）\n * @param max 最大值（包含）\n * @return {number}\n */\nexport function randomInclusive(min: number, max: number): number {\n  const ceilMin = Math.ceil(min);\n  const ceilMax = Math.floor(max);\n  return Math.floor(Math.random() * (ceilMax - ceilMin + 1)) + ceilMin;\n}\n","import * as _ from 'lodash';\nimport { random as randomInt } from './Random';\n\n// prettier-ignore\nexport const NUMERIC_CHARS: string[] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n// prettier-ignore\nexport const LOWERCASE_CHARS: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n// prettier-ignore\nexport const UPPERCASE_CHARS: string[] = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n// prettier-ignore\nexport const SYMBOL_CHARS: string[] = ['!', '@', '#', '$', '%', '^', '&', '*']\n\nconst EMPTY_CHAR = '';\n\nconst random = function (length: number): string {\n  const options: GeneratorOptions = {\n    length: length,\n    numeric: true,\n    lowercase: true,\n    uppercase: true,\n    symbol: false,\n  };\n  return generator(options);\n};\n\nconst randomAlphabetic = function (length: number): string {\n  const options: GeneratorOptions = {\n    length: length,\n    numeric: false,\n    lowercase: true,\n    uppercase: true,\n    symbol: false,\n  };\n  return generator(options);\n};\n\nconst randomNumber = function (length: number): string {\n  const options: GeneratorOptions = {\n    length: length,\n    numeric: true,\n    lowercase: false,\n    uppercase: false,\n    symbol: false,\n  };\n  return generator(options);\n};\n\nexport interface GeneratorOptions {\n  length?: number;\n  numeric?: boolean;\n  lowercase?: boolean;\n  uppercase?: boolean;\n  symbol?: boolean;\n  symbolChars?: string;\n}\n\nconst generator = ({\n  length = 8,\n  numeric = true,\n  lowercase = true,\n  uppercase = true,\n  symbol = false,\n  symbolChars = '!@#$%^&*',\n}: GeneratorOptions): string => {\n  if (typeof length === 'undefined' || length === null || length <= 0) {\n    return EMPTY_CHAR;\n  }\n  let chars: string[] = [];\n  if (numeric) {\n    chars = chars.concat(NUMERIC_CHARS);\n  }\n  if (lowercase) {\n    chars = chars.concat(LOWERCASE_CHARS);\n  }\n  if (uppercase) {\n    chars = chars.concat(UPPERCASE_CHARS);\n  }\n  if (symbol && symbolChars) {\n    chars = chars.concat(symbolChars.split(''));\n  }\n  if (chars.length < 1) {\n    return EMPTY_CHAR;\n  } else {\n    _.shuffle(chars);\n  }\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += chars[randomInt(0, chars.length)];\n  }\n  return str;\n};\n\nexport { random, randomAlphabetic, randomNumber, generator };\n","import { useEffect, useState } from 'react';\n\nimport { PageContainer } from '@ant-design/pro-layout';\nimport { Refresh } from '@mui/icons-material';\nimport { Button, Card, Checkbox, Col, Form, Input, Row, Slider } from 'antd';\nimport ContentCopyAdornment from '../components/ContentCopyAdornment';\nimport { generator, GeneratorOptions } from '../scripts/RandomStringUtils';\n\nconst initialOptions: GeneratorOptions = {\n  numeric: true,\n  lowercase: true,\n  uppercase: true,\n  symbol: false,\n  symbolChars: '!@#$%^&*',\n};\nexport default function Random() {\n  const [randomString, setRandomString] = useState<string>('');\n\n  useEffect(() => {\n    refresh();\n  }, []);\n\n  const refresh = (options: GeneratorOptions = initialOptions) => {\n    const varchar = generator(options);\n    setRandomString(varchar);\n  };\n\n  const onValuesChange = (changedValues: any, allValues: GeneratorOptions) => {\n    refresh(allValues);\n  };\n\n  const onFinish = (values: GeneratorOptions) => {\n    refresh(values);\n  };\n\n  return (\n    <PageContainer title={false} style={{ paddingTop: '20px', paddingLeft: '20px', paddingRight: '20px' }}>\n      <Form layout=\"horizontal\" initialValues={initialOptions} onValuesChange={onValuesChange} onFinish={onFinish}>\n        <Card actions={[<Button key=\"1\" htmlType=\"submit\" icon={<Refresh />} />]}>\n          <Row>\n            <Col span={4}>\n              <Form.Item name=\"numeric\" valuePropName=\"checked\">\n                <Checkbox>数字 0 ～ 9</Checkbox>\n              </Form.Item>\n            </Col>\n            <Col span={4}>\n              <Form.Item name=\"lowercase\" valuePropName=\"checked\">\n                <Checkbox>小写字母 a ~ z</Checkbox>\n              </Form.Item>\n            </Col>\n            <Col span={4}>\n              <Form.Item name=\"uppercase\" valuePropName=\"checked\">\n                <Checkbox>大写字母 A ~ Z</Checkbox>\n              </Form.Item>\n            </Col>\n            <Col span={8}>\n              <Row>\n                <Col span={4}>\n                  <Form.Item name=\"symbol\" valuePropName=\"checked\">\n                    <Checkbox>符号</Checkbox>\n                  </Form.Item>\n                </Col>\n                <Col span={20}>\n                  <Form.Item name=\"symbolChars\">\n                    <Input />\n                  </Form.Item>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n          <Row>\n            <Col span={24}>\n              <Form.Item name=\"length\" label=\"长度\">\n                <Slider min={6} max={64} step={1} marks={{ 6: '6', 8: '8', 16: '16', 32: '32', 64: '64' }} />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Row>\n            <Col span={24}>\n              <Form.Item>\n                <Input.Group compact>\n                  <Input value={randomString} style={{ width: 'calc(100% - 60px)' }} />\n                  <ContentCopyAdornment content={randomString} />\n                </Input.Group>\n              </Form.Item>\n            </Col>\n          </Row>\n        </Card>\n      </Form>\n    </PageContainer>\n  );\n}\n"],"names":["ContentCopyAdornment","content","btn","onSuccess","useRef","useState","open","setOpen","useEffect","current","clipboard","ClipboardJS","on","e","console","error","position","ref","onClose","autoHideDuration","message","random","min","max","ceilMin","Math","ceil","ceilMax","floor","NUMERIC_CHARS","LOWERCASE_CHARS","UPPERCASE_CHARS","generator","length","numeric","lowercase","uppercase","symbol","symbolChars","chars","concat","split","_","str","i","randomInt","initialOptions","Random","randomString","setRandomString","refresh","options","varchar","PageContainer","title","style","paddingTop","paddingLeft","paddingRight","layout","initialValues","onValuesChange","changedValues","allValues","onFinish","values","actions","htmlType","icon","Refresh","span","name","valuePropName","label","step","marks","compact","value","width"],"sourceRoot":""}