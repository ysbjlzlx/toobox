{"version":3,"file":"static/js/1615.d67dbb54.chunk.js","mappings":"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","sources":["stores/JsonTabStore.ts","components/VanillaJSONEditor.tsx","pages/json/JsonEditor.tsx","pages/json/Json.tsx"],"sourcesContent":["import _ from 'lodash';\nimport { create } from 'zustand';\nimport { createJSONStorage, persist } from 'zustand/middleware';\n\ninterface JsonTabStore {\n  jsonTabs: string[];\n  activeKey: string;\n  addJsonTab: (key: string) => void;\n  removeJsonTab: (key: string) => void;\n  setActiveKey: (key: string) => void;\n}\n\nconst useJsonTabStore = create<JsonTabStore>()(\n  persist(\n    (set, get) => ({\n      jsonTabs: ['0'],\n      activeKey: '0',\n\n      addJsonTab: (key: string) =>\n        set(() => {\n          return { jsonTabs: _.concat(get().jsonTabs, key) };\n        }),\n      removeJsonTab: (key: string) =>\n        set(() => {\n          return { jsonTabs: _.without(get().jsonTabs, key) };\n        }),\n      setActiveKey: (key: string) =>\n        set(() => {\n          return { activeKey: key };\n        }),\n    }),\n    { name: 'json-tab-store', storage: createJSONStorage(() => localStorage) },\n  ),\n);\n\nexport default useJsonTabStore;\n","import { Box } from '@mui/material';\nimport * as LosslessJSON from 'lossless-json';\nimport { useEffect, useRef } from 'react';\n\nimport { JSONEditor, JSONEditorPropsOptional } from 'vanilla-jsoneditor';\n\nconst VanillaJSONEditor = (props: JSONEditorPropsOptional) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const editorRef = useRef<JSONEditor>();\n\n  useEffect(() => {\n    const options = {\n      target: containerRef.current,\n      props: {},\n    };\n    // @ts-ignore\n    editorRef.current = new JSONEditor(options);\n\n    return () => {\n      // destroy editor\n      if (editorRef.current) {\n        editorRef.current.destroy();\n        editorRef.current = undefined;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (editorRef.current) {\n      // @ts-ignore\n      editorRef.current?.updateProps({ ...props, parser: LosslessJSON });\n    }\n  }, [props]);\n\n  return <Box ref={containerRef} height=\"100%\" />;\n};\n\nexport default VanillaJSONEditor;\n","import { useLocalStorageState } from 'ahooks';\nimport { FC } from 'react';\nimport { Content, Mode } from 'vanilla-jsoneditor';\n\nimport VanillaJSONEditor from '../../components/VanillaJSONEditor';\n\ninterface Props {\n  idx?: string;\n}\n\nconst JSONBeta: FC<Props> = (props) => {\n  const defaultValue = {\n    mode: 'text',\n    content: {\n      text: '',\n    },\n  };\n  const idx = props?.idx || '0';\n  const [jsonStorage, setJsonStorage] = useLocalStorageState<any>(`json-${idx}`, { defaultValue });\n\n  const resolveMode = (): Mode | undefined => {\n    if (jsonStorage === undefined || jsonStorage === null) {\n      return Mode.text;\n    }\n    return jsonStorage.mode as Mode;\n  };\n\n  const onChange = (content: Content) => {\n    setJsonStorage((oldValue: any) => {\n      return { ...oldValue, content: content };\n    });\n  };\n\n  const onChangMode = (mode: Mode) => {\n    setJsonStorage((oldValue: any) => {\n      return { ...oldValue, mode: mode };\n    });\n  };\n\n  return (\n    <VanillaJSONEditor\n      mode={resolveMode()}\n      content={jsonStorage.content}\n      onChange={onChange}\n      onChangeMode={onChangMode}\n    />\n  );\n};\n\nexport default JSONBeta;\n","import { Tabs } from 'antd';\nimport _ from 'lodash';\nimport { Tab } from 'rc-tabs/lib/interface';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\n\nimport useJsonTabStore from '../../stores/JsonTabStore';\nimport JsonEditor from './JsonEditor';\n\ntype TargetKey = React.MouseEvent | React.KeyboardEvent | string;\nconst Json = () => {\n  const { jsonTabs, activeKey, addJsonTab, removeJsonTab, setActiveKey } = useJsonTabStore();\n  const [items, setItems] = useState<Tab[]>([]);\n\n  useEffect(() => {\n    const item = jsonTabs.map((idx, i) => {\n      return {\n        key: idx,\n        label: 'JSON Editor - ' + idx,\n        closable: true,\n        children: <JsonEditor idx={idx} />,\n        style: {\n          height: `calc(100vh - 56px)`,\n        },\n      };\n    });\n    if (_.indexOf(jsonTabs, activeKey) === -1) {\n      const lastItem = _.last(item);\n      setActiveKey(lastItem?.key || '0');\n    }\n\n    setItems(item);\n  }, [jsonTabs, activeKey, setActiveKey]);\n\n  const onChange = (activeKey: string) => {\n    setActiveKey(activeKey);\n  };\n  const onEdit = (targetKey: React.MouseEvent | React.KeyboardEvent | string, action: 'add' | 'remove') => {\n    if (action === 'add') {\n      add();\n    } else {\n      remove(targetKey);\n    }\n  };\n\n  const add = () => {\n    let newActiveKey = '0';\n    if (jsonTabs && jsonTabs.length > 0) {\n      const keys = jsonTabs.map((i) => {\n        return Number(i);\n      });\n      const maxKey = Math.max(...keys);\n\n      newActiveKey = `${maxKey + 1}`;\n    }\n    addJsonTab(newActiveKey);\n    setActiveKey(newActiveKey);\n  };\n\n  const remove = (targetKey: TargetKey) => {\n    removeJsonTab(String(targetKey));\n    localStorage.removeItem(`json-${targetKey}`);\n    if (jsonTabs && jsonTabs.length <= 1) {\n      addJsonTab('0');\n    }\n  };\n\n  return <Tabs type=\"editable-card\" onChange={onChange} activeKey={activeKey} onEdit={onEdit} items={items} />;\n};\n\nexport default Json;\n"],"names":["create","persist","set","get","jsonTabs","activeKey","addJsonTab","key","_","removeJsonTab","setActiveKey","name","storage","createJSONStorage","localStorage","props","containerRef","useRef","editorRef","useEffect","options","target","current","JSONEditor","destroy","undefined","updateProps","parser","LosslessJSON","Box","ref","height","idx","useLocalStorageState","defaultValue","mode","content","text","jsonStorage","setJsonStorage","Mode","onChange","oldValue","onChangeMode","useJsonTabStore","useState","items","setItems","item","map","i","label","closable","children","JsonEditor","style","lastItem","add","newActiveKey","length","keys","Number","maxKey","Math","max","remove","targetKey","String","removeItem","type","onEdit","action"],"sourceRoot":""}