{"version":3,"file":"static/js/8.0cbc5372.chunk.js","mappings":"8OAGMA,EAAa,SAACC,GAGlB,IAFA,IAAIC,EAAQ,EACRC,EAAOF,EAAIE,QACPA,EAAKC,OAAOC,MAAM,CACxB,IADwB,EACpBC,GAAS,EADW,UAEVH,EAAKI,OAFK,IAExB,2BAA0B,CAAC,IAAlBC,EAAiB,QACpBC,EAAO,KAAKC,KAAKF,GACjBC,IAASH,GACXJ,IAEFI,EAASG,CACV,CARuB,+BASzB,CACD,MAAM,eAAN,OAAsBP,EACvB,EAEKS,EAAiB,SAACC,GACtB,IAAIC,EAAMC,SAASC,cAAc,OAEjC,OADAF,EAAIG,YAAchB,EAAWY,EAAKK,MAAMhB,KACjC,CACLY,IAAAA,EACAK,OAFK,SAEEA,GACDA,EAAOC,aAAYN,EAAIG,YAAchB,EAAWkB,EAAOD,MAAMhB,KAClE,EAEJ,E,WCQD,EA1BkB,WAChB,IAAMmB,GAASC,EAAAA,EAAAA,UAsBf,OArBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAcC,EAAAA,GAAAA,MAClB,CACE,IAAK,CACHC,OAAQ,SAGZ,CAAEC,MAAM,IAGJT,EAAQU,EAAAA,GAAAA,OAAmB,CAC/BC,WAAY,CAACC,EAAAA,IAAYC,EAAAA,EAAAA,MAAQC,EAAAA,GAAcR,EDQ5CS,EAAAA,GAAAA,GAAarB,MCJlB,IAAIa,EAAAA,GAAW,CACbP,MAAAA,EACAgB,OAAQb,EAAOc,SAElB,GAAE,KAEI,SAACC,EAAA,EAAD,CAAKC,IAAKhB,EAAQiB,GAAI,CAAEZ,OAAQ,SACxC,C","sources":["pages/code/extensions/WordCounter.ts","pages/code/index.tsx"],"sourcesContent":["import { Text } from '@codemirror/state';\nimport { EditorView, Panel, showPanel } from '@codemirror/view';\n\nconst countWords = (doc: Text) => {\n  let count = 0;\n  let iter = doc.iter();\n  while (!iter.next().done) {\n    let inWord = false;\n    for (let s of iter.value) {\n      let word = /\\w/.test(s);\n      if (word && !inWord) {\n        count++;\n      }\n      inWord = word;\n    }\n  }\n  return `Word count: ${count}`;\n};\n\nconst wordCountPanel = (view: EditorView): Panel => {\n  let dom = document.createElement('div');\n  dom.textContent = countWords(view.state.doc);\n  return {\n    dom,\n    update(update) {\n      if (update.docChanged) dom.textContent = countWords(update.state.doc);\n    },\n  };\n};\n\nconst wordCounter = () => {\n  return showPanel.of(wordCountPanel);\n};\n\nexport { wordCounter };\n","import { json } from '@codemirror/lang-json';\nimport { EditorState } from '@codemirror/state';\nimport { oneDarkTheme } from '@codemirror/theme-one-dark';\nimport { EditorView } from '@codemirror/view';\nimport { Box } from '@mui/material';\nimport { basicSetup } from 'codemirror';\nimport { FC, useEffect, useRef } from 'react';\n\nimport { wordCounter } from './extensions/WordCounter';\n\nconst Index: FC = () => {\n  const Editor = useRef<HTMLDivElement>();\n  useEffect(() => {\n    const customTheme = EditorView.theme(\n      {\n        '&': {\n          height: '100%',\n        },\n      },\n      { dark: true },\n    );\n\n    const state = EditorState.create({\n      extensions: [basicSetup, json(), oneDarkTheme, customTheme, wordCounter()],\n    });\n\n    // eslint-disable-next-line no-new\n    new EditorView({\n      state,\n      parent: Editor.current,\n    });\n  }, []);\n\n  return <Box ref={Editor} sx={{ height: '100%' }} />;\n};\n\nexport default Index;\n"],"names":["countWords","doc","count","iter","next","done","inWord","value","s","word","test","wordCountPanel","view","dom","document","createElement","textContent","state","update","docChanged","Editor","useRef","useEffect","customTheme","EditorView","height","dark","EditorState","extensions","basicSetup","json","oneDarkTheme","showPanel","parent","current","Box","ref","sx"],"sourceRoot":""}