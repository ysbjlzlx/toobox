{"version":3,"file":"static/js/7321.d282c760.chunk.js","mappings":"6PASe,SAASA,IACtB,IAAAC,GAAsBC,EAAAA,EAAAA,UAAiB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCI,EAAGF,EAAA,GAAEG,EAAMH,EAAA,GAClBI,GAAoCL,EAAAA,EAAAA,UAAiB,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjDE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAchC,OACEG,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAAAC,SAAA,EACRC,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,EAAEH,UACTC,EAAAA,EAAAA,KAACG,EAAAA,EAAS,CACRC,KAAK,OACLC,MAAM,MACNC,MAAOf,EACPgB,SAAU,SAACC,GACThB,EAAOgB,EAAEC,OAAOH,MAClB,EACAI,WAAS,EACTC,QAAS,EACTC,QAAQ,WACRC,WAAS,EACTC,WAAY,CACVC,cAAcf,EAAAA,EAAAA,KAACgB,EAAAA,EAAoB,CAACC,QAAS1B,UAInDS,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,EAAEH,UACTF,EAAAA,EAAAA,MAACqB,EAAAA,GAAAA,MAAY,CAAAnB,SAAA,EACXC,EAAAA,EAAAA,KAACkB,EAAAA,GAAM,CAACC,QAjCQ,WACtBvB,EAAcwB,UAAU7B,GAC1B,EA+ByCQ,SAAC,0CAClCC,EAAAA,EAAAA,KAACkB,EAAAA,GAAM,CAACC,QA9BiB,WAC/BvB,EAAcyB,mBAAmB9B,GACnC,EA4BkDQ,SAAC,oCAC3CC,EAAAA,EAAAA,KAACkB,EAAAA,GAAM,CAACC,QA3BiB,WAC/BvB,EAAc0B,mBAAmB/B,GACnC,EAyBkDQ,SAAC,mCAG/CC,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,EAAEH,UACTC,EAAAA,EAAAA,KAACuB,EAAAA,EAAa,CAACC,MAAM,eAAKC,KAAM9B,QAIxC,C,6JC9Ce,SAASqB,EAAoBU,GAAiC,IAA9BT,EAAOS,EAAPT,QACvCU,GADyDD,EAATE,WAC1CC,EAAAA,EAAAA,QAA0B,OACtC1C,GAAwBC,EAAAA,EAAAA,WAAkB,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzC2C,EAAIzC,EAAA,GAAE0C,EAAO1C,EAAA,GAcpB,OAZA2C,EAAAA,EAAAA,YAAU,WACR,GAAIL,EAAIM,QAAS,CACf,IAAMC,EAAY,IAAIC,IAAJ,CAAgBR,EAAIM,SACtCC,EAAUE,GAAG,WAAW,SAAC5B,GACvBuB,GAAQ,EACV,IACAG,EAAUE,GAAG,SAAS,SAAC5B,GACrB6B,QAAQC,MAAM9B,EAChB,GACF,CACF,GAAG,KAGDX,EAAAA,EAAAA,MAAA0C,EAAAA,SAAA,CAAAxC,SAAA,EACEC,EAAAA,EAAAA,KAACwC,EAAAA,EAAc,CAACC,SAAS,MAAK1C,UAC5BC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAU,CAACC,IAAKhB,EAAK,sBAAqBV,EAAS,aAAW,eAAclB,UAC3EC,EAAAA,EAAAA,KAAC4C,EAAAA,EAAW,SAIhB5C,EAAAA,EAAAA,KAAC6C,EAAAA,EAAQ,CAACf,KAAMA,EAAMgB,QAAS,kBAAMf,GAAQ,EAAM,EAAEgB,iBAAkB,IAAMC,QAAQ,+BAG3F,C,6JC7Be,SAASC,EAAiBvB,GAAmB,IAAhBD,EAAIC,EAAJD,KAC1CyB,EAAoCF,EAAAA,GAAAA,aAAoBG,GAAA7D,EAAAA,EAAAA,GAAA4D,EAAA,GAAjDE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAEhC,OACEtD,EAAAA,EAAAA,MAAA0C,EAAAA,SAAA,CAAAxC,SAAA,CACGsD,GACDrD,EAAAA,EAAAA,KAACkB,EAAAA,GAAM,CACLoC,MAAMtD,EAAAA,EAAAA,KAACuD,EAAAA,EAAY,IACnBpC,QAAS,WACPqC,IAAK/B,GAAQ,GAAI,CACfgC,OAAQ,aACRC,OAAQ,SAACC,GACPtB,QAAQuB,IAAID,GACZP,EAAWtB,KAAK,CACd1B,KAAM,UACNa,QAAS,4BAEb,GAEJ,MAIR,CCtBA,IAaA,EAbiC,SAAHS,GAAyB,IAAnBD,EAAIC,EAAJD,KAAMD,EAAKE,EAALF,MAChCqC,EAAaC,EAAAA,EAAAA,SACrB,OACE9D,EAAAA,EAAAA,KAAC+D,EAAAA,EAAI,CACHvC,MAAOA,EACPwC,OAAOhE,EAAAA,EAAAA,KAACiD,EAAiB,CAACxB,KAAMA,IAChCwC,UAAW,CAAEC,QAAS,OAAQC,cAAe,QAC7CC,WAAW,EAAMrE,UAEjBC,EAAAA,EAAAA,KAAC6D,EAAQ,CAACQ,UAAU,EAAMC,SAAU,CAAE3D,QAAS,EAAG4D,QAAS,IAAMjE,MAAOmB,EAAM+C,WAAS,KAG7F,C","sources":["app/url/page.tsx","components/ContentCopyAdornment.tsx","components/ContentCopyButton.tsx","components/TextResultBox.tsx"],"sourcesContent":["'use client';\n\nimport { Box, Container, TextField } from '@mui/material';\nimport { useState } from 'react';\n\nimport { Button } from 'antd';\nimport ContentCopyAdornment from '../../components/ContentCopyAdornment';\nimport TextResultBox from '../../components/TextResultBox';\n\nexport default function Page() {\n  const [uri, setUri] = useState<string>('');\n  const [encodedURI, setEncodedURI] = useState<string>('');\n\n  const handleEncodeURI = function () {\n    setEncodedURI(encodeURI(uri));\n  };\n\n  const handleEncodeURIComponent = function () {\n    setEncodedURI(encodeURIComponent(uri));\n  };\n\n  const handleDecodeURIComponent = function () {\n    setEncodedURI(decodeURIComponent(uri));\n  };\n\n  return (\n    <Container>\n      <Box mt={2}>\n        <TextField\n          type=\"text\"\n          label=\"URL\"\n          value={uri}\n          onChange={(e) => {\n            setUri(e.target.value);\n          }}\n          multiline\n          minRows={3}\n          variant=\"outlined\"\n          fullWidth\n          InputProps={{\n            endAdornment: <ContentCopyAdornment content={uri} />,\n          }}\n        />\n      </Box>\n      <Box mt={2}>\n        <Button.Group>\n          <Button onClick={handleEncodeURI}>链接参数编码</Button>\n          <Button onClick={handleEncodeURIComponent}>全链接编码</Button>\n          <Button onClick={handleDecodeURIComponent}>链接解码</Button>\n        </Button.Group>\n      </Box>\n      <Box mt={2}>\n        <TextResultBox title=\"结果\" text={encodedURI} />\n      </Box>\n    </Container>\n  );\n}\n","import { ContentCopy } from '@mui/icons-material';\nimport { IconButton, InputAdornment, Snackbar } from '@mui/material';\nimport ClipboardJS from 'clipboard';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface Props {\n  content?: string | undefined;\n  onSuccess?: Function | undefined;\n}\n\nexport default function ContentCopyAdornment({ content, onSuccess }: Props) {\n  const btn = useRef<HTMLButtonElement>(null);\n  const [open, setOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (btn.current) {\n      const clipboard = new ClipboardJS(btn.current);\n      clipboard.on('success', (e) => {\n        setOpen(true);\n      });\n      clipboard.on('error', (e) => {\n        console.error(e);\n      });\n    }\n  }, []);\n\n  return (\n    <>\n      <InputAdornment position=\"end\">\n        <IconButton ref={btn} data-clipboard-text={content} aria-label=\"Copy content\">\n          <ContentCopy />\n        </IconButton>\n      </InputAdornment>\n\n      <Snackbar open={open} onClose={() => setOpen(false)} autoHideDuration={3000} message=\"复制成功\" />\n    </>\n  );\n}\n","import { CopyOutlined } from '@ant-design/icons';\nimport { Button, message } from 'antd';\nimport copy from 'copy-to-clipboard';\n\ninterface Props {\n  text?: string | undefined;\n}\n\nexport default function ContentCopyButton({ text }: Props) {\n  const [messageApi, contextHolder] = message.useMessage();\n\n  return (\n    <>\n      {contextHolder}\n      <Button\n        icon={<CopyOutlined />}\n        onClick={() => {\n          copy(text || '', {\n            format: 'text/plain',\n            onCopy: (clipboardData: object) => {\n              console.log(clipboardData);\n              messageApi.open({\n                type: 'success',\n                content: '复制成功',\n              });\n            },\n          });\n        }}\n      />\n    </>\n  );\n}\n","import { Card, Input } from 'antd';\nimport { FC } from 'react';\nimport ContentCopyButton from './ContentCopyButton';\n\ninterface Props {\n  title: string;\n  text: string;\n}\n\nconst TextResultBox: FC<Props> = ({ text, title }) => {\n  const { TextArea } = Input;\n  return (\n    <Card\n      title={title}\n      extra={<ContentCopyButton text={text} />}\n      bodyStyle={{ padding: '10px', paddingBottom: '20px' }}\n      hoverable={false}\n    >\n      <TextArea bordered={true} autoSize={{ minRows: 5, maxRows: 10 }} value={text} showCount />\n    </Card>\n  );\n};\nexport default TextResultBox;\n"],"names":["Page","_useState","useState","_useState2","_slicedToArray","uri","setUri","_useState3","_useState4","encodedURI","setEncodedURI","_jsxs","Container","children","_jsx","Box","mt","TextField","type","label","value","onChange","e","target","multiline","minRows","variant","fullWidth","InputProps","endAdornment","ContentCopyAdornment","content","Button","onClick","encodeURI","encodeURIComponent","decodeURIComponent","TextResultBox","title","text","_ref","btn","onSuccess","useRef","open","setOpen","useEffect","current","clipboard","ClipboardJS","on","console","error","_Fragment","InputAdornment","position","IconButton","ref","ContentCopy","Snackbar","onClose","autoHideDuration","message","ContentCopyButton","_message$useMessage","_message$useMessage2","messageApi","contextHolder","icon","CopyOutlined","copy","format","onCopy","clipboardData","log","TextArea","Input","Card","extra","bodyStyle","padding","paddingBottom","hoverable","bordered","autoSize","maxRows","showCount"],"sourceRoot":""}