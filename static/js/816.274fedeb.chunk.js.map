{"version":3,"file":"static/js/816.274fedeb.chunk.js","mappings":"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","sources":["components/placeholder/util.ts","components/placeholder/DummyImage.tsx","components/placeholder/HrefLuImage.tsx","components/placeholder/PlaceholderImage.tsx","pages/PlaceholderImg.tsx"],"sourcesContent":["import { PlaceholderConfig } from './index';\n\nconst defaultConfig = (): PlaceholderConfig => {\n  return {\n    width: 150,\n    height: 150,\n    suffix: '.png',\n    bgColor: '#cccccc',\n    textColor: '#969696',\n    text: '',\n  };\n};\n\nconst resolveConfig = (input: PlaceholderConfig): PlaceholderConfig => {\n  const config: PlaceholderConfig = defaultConfig();\n  if (input.width && input.width > 0) {\n    config.width = input.width;\n  }\n  if (input.height && input.height > 0) {\n    config.height = input.height;\n  }\n  if (input.suffix) {\n    config.suffix = input.suffix;\n  }\n  if (input.bgColor) {\n    config.bgColor = input.bgColor;\n  }\n  if (input.textColor) {\n    config.textColor = input.textColor;\n  }\n  if (input.text && input.text !== '') {\n    config.text = input.text;\n  }\n  return config;\n};\n\nexport { defaultConfig, resolveConfig };\n","import Image from 'mui-image';\nimport { useEffect, useState } from 'react';\nimport { PlaceholderConfig } from './index';\nimport { defaultConfig, resolveConfig } from './util';\n\nconst DummyImage = (input: PlaceholderConfig) => {\n  const [imgUrl, setImgUrl] = useState<string>('');\n  const [config, setConfig] = useState<PlaceholderConfig>(defaultConfig());\n\n  useEffect(() => {\n    setConfig(resolveConfig(input));\n  }, [input]);\n\n  useEffect(() => {\n    const url =\n      `https://dummyimage.com/${config.width}x${config.height}` +\n      `/${config.bgColor?.substring(1)}/${config.textColor?.substring(1)}` +\n      `?text=${encodeURIComponent(config.text || 'img')}`;\n    setImgUrl(url);\n  }, [config]);\n\n  return (\n    <Image\n      src={imgUrl}\n      style={{ width: `${config.width}px`, height: `${config.height}px` }}\n      alt={config.text || 'placeholder img'}\n    />\n  );\n};\n\nexport default DummyImage;\n","import Image from 'mui-image';\nimport { useEffect, useState } from 'react';\nimport { PlaceholderConfig } from './index';\nimport { defaultConfig, resolveConfig } from './util';\n\nconst HrefLuImage = (input: PlaceholderConfig) => {\n  const [imgUrl, setImgUrl] = useState<string>('');\n  const [config, setConfig] = useState<PlaceholderConfig>(defaultConfig());\n\n  useEffect(() => {\n    setConfig(resolveConfig(input));\n  }, [input]);\n\n  useEffect(() => {\n    const url =\n      `https://iph.href.lu/${config.width}x${config.height}` +\n      `?bg=${config.bgColor?.substring(1)}` +\n      `&fg=${config.textColor?.substring(1)}` +\n      `&text=${encodeURIComponent(config.text || 'img')}`;\n    setImgUrl(url);\n  }, [config]);\n\n  return (\n    <Image\n      src={imgUrl}\n      style={{ width: `${config.width}px`, height: `${config.height}px` }}\n      alt={config.text || 'placeholder img'}\n    />\n  );\n};\n\nexport default HrefLuImage;\n","import Image from 'mui-image';\nimport { useEffect, useState } from 'react';\nimport { PlaceholderConfig } from './index';\nimport { defaultConfig, resolveConfig } from './util';\n\nconst PlaceholderImage = (input: PlaceholderConfig) => {\n  const [imgUrl, setImgUrl] = useState<string>('');\n  const [config, setConfig] = useState<PlaceholderConfig>(defaultConfig());\n\n  useEffect(() => {\n    setConfig(resolveConfig(input));\n  }, [input]);\n\n  useEffect(() => {\n    const url =\n      `https://via.placeholder.com/${config.width}x${config.height}` +\n      `/${config.bgColor?.substring(1)}/${config.textColor?.substring(1)}` +\n      `?text=${encodeURIComponent(config.text || 'img')}` +\n      config.suffix;\n    setImgUrl(url);\n  }, [config]);\n\n  return (\n    <Image\n      src={imgUrl}\n      style={{ width: `${config.width}px`, height: `${config.height}px` }}\n      alt={config.text || 'placeholder img'}\n    />\n  );\n};\n\nexport default PlaceholderImage;\n","import {\n  Box,\n  Container,\n  FormControl,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Popover,\n  Select,\n  Tab,\n  Tabs,\n  TextField,\n} from '@mui/material';\nimport React, { FC, useState } from 'react';\nimport { GithubPicker } from 'react-color';\nimport { Controller, useForm } from 'react-hook-form';\n\nimport { PlaceholderConfig } from '../components/placeholder';\nimport DummyImage from '../components/placeholder/DummyImage';\nimport HrefLuImage from '../components/placeholder/HrefLuImage';\nimport PlaceholderImage from '../components/placeholder/PlaceholderImage';\n\nconst defaultValues = {\n  width: 320,\n  height: 320,\n  suffix: '.png',\n  bgColor: '#cccccc',\n  textColor: '#969696',\n  text: 'img',\n};\n\nconst suffixOptions = [\n  { label: '.png', value: '.png' },\n  { label: '.jpg', value: '.jpg' },\n  { label: '.gif', value: '.gif' },\n];\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nfunction a11yProps(index: number) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst PlaceholderImg: FC = () => {\n  const [provider, setProvider] = useState<number>(0);\n  const [bgColorPicker, setBgColorPicker] = useState<boolean>(false);\n  const [bgColorAnchorEl, setBgColorAnchorEl] = useState(null);\n  const [textColorPicker, setTextColorPicker] = useState<boolean>(false);\n  const [textColorAnchorEl, setTextColorAnchorEl] = useState(null);\n  const [placeholderConfig, setPlaceholderConfig] = useState<PlaceholderConfig>(defaultValues);\n  const { register, handleSubmit, control, setValue } = useForm({ defaultValues });\n\n  return (\n    <Container sx={{ mt: 2 }}>\n      <form onChange={handleSubmit(setPlaceholderConfig)}>\n        <Grid container spacing={2}>\n          <Grid item xs={4}>\n            <TextField type=\"number\" label=\"宽度\" fullWidth {...register('width')} />\n          </Grid>\n          <Grid item xs={4}>\n            <TextField type=\"number\" label=\"高度\" fullWidth {...register('height')} />\n          </Grid>\n          <Grid item xs={4}>\n            <Controller\n              name=\"suffix\"\n              control={control}\n              render={({ field }) => {\n                return (\n                  <FormControl fullWidth>\n                    <InputLabel>后缀名</InputLabel>\n                    <Select\n                      {...field}\n                      label=\"后缀名\"\n                      onChange={(event) => {\n                        setPlaceholderConfig({ ...placeholderConfig, suffix: event.target.value });\n                      }}\n                    >\n                      {suffixOptions.map((item) => {\n                        return (\n                          <MenuItem key={item.label} value={item.value}>\n                            {item.label}\n                          </MenuItem>\n                        );\n                      })}\n                    </Select>\n                  </FormControl>\n                );\n              }}\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={2} sx={{ mt: 1 }}>\n          <Grid item xs={4}>\n            <TextField\n              label=\"背景颜色\"\n              fullWidth\n              {...register('bgColor')}\n              onClick={(e) => {\n                // @ts-ignore\n                setBgColorAnchorEl(e.currentTarget);\n                setBgColorPicker(true);\n              }}\n            />\n            <Popover\n              open={bgColorPicker}\n              anchorEl={bgColorAnchorEl}\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n              onClose={() => {\n                setBgColorAnchorEl(null);\n                setBgColorPicker(false);\n              }}\n            >\n              <Box sx={{ mt: '6px' }}>\n                <GithubPicker\n                  color={placeholderConfig.bgColor || ''}\n                  onChange={(color) => {\n                    setValue('bgColor', color.hex);\n                    setPlaceholderConfig({ ...placeholderConfig, bgColor: color.hex });\n                    setBgColorPicker(false);\n                  }}\n                />\n              </Box>\n            </Popover>\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              label=\"文本颜色\"\n              fullWidth\n              {...register('textColor')}\n              onClick={(e) => {\n                // @ts-ignore\n                setTextColorAnchorEl(e.currentTarget);\n                setTextColorPicker(true);\n              }}\n              onFocus={() => {}}\n            />\n            <Popover\n              open={textColorPicker}\n              anchorEl={textColorAnchorEl}\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n              onClose={() => {\n                setTextColorAnchorEl(null);\n                setTextColorPicker(false);\n              }}\n            >\n              <Box sx={{ mt: '6px' }}>\n                <GithubPicker\n                  color={placeholderConfig.textColor || ''}\n                  onChange={(color) => {\n                    setValue('textColor', color.hex);\n                    setPlaceholderConfig({ ...placeholderConfig, textColor: color.hex });\n                    setTextColorPicker(false);\n                  }}\n                />\n              </Box>\n            </Popover>\n          </Grid>\n          <Grid item xs={4}>\n            <TextField label=\"文本\" fullWidth {...register('text')} />\n          </Grid>\n        </Grid>\n      </form>\n      <Box>\n        <Tabs value={provider} onChange={(e, value) => setProvider(value)} aria-label=\"basic tabs example\">\n          <Tab label=\"iph.href.lu\" {...a11yProps(0)} />\n          <Tab label=\"via.placeholder.com\" {...a11yProps(1)} />\n          <Tab label=\"dummyimage.com\" {...a11yProps(2)} />\n        </Tabs>\n        <TabPanel value={provider} index={0}>\n          <HrefLuImage {...placeholderConfig} />\n        </TabPanel>\n        <TabPanel value={provider} index={1}>\n          <PlaceholderImage {...placeholderConfig} />\n        </TabPanel>\n        <TabPanel value={provider} index={2}>\n          <DummyImage {...placeholderConfig} />\n        </TabPanel>\n      </Box>\n    </Container>\n  );\n};\n\nexport default PlaceholderImg;\n"],"names":["resolveConfig","input","config","width","height","suffix","bgColor","textColor","text","useState","imgUrl","setImgUrl","setConfig","useEffect","url","substring","encodeURIComponent","src","style","alt","defaultValues","suffixOptions","label","value","TabPanel","props","children","index","other","role","hidden","id","Box","sx","p","a11yProps","provider","setProvider","bgColorPicker","setBgColorPicker","bgColorAnchorEl","setBgColorAnchorEl","textColorPicker","setTextColorPicker","textColorAnchorEl","setTextColorAnchorEl","placeholderConfig","setPlaceholderConfig","useForm","register","handleSubmit","control","setValue","Container","mt","onChange","Grid","container","spacing","item","xs","TextField","type","fullWidth","name","render","field","FormControl","InputLabel","Select","event","target","map","MenuItem","onClick","e","currentTarget","Popover","open","anchorEl","anchorOrigin","vertical","horizontal","onClose","color","hex","onFocus","Tabs","Tab"],"sourceRoot":""}