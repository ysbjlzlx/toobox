{"version":3,"file":"index-B39VIiXm.js","sources":["../../node_modules/lossless-json/lib/esm/config.js","../../node_modules/lossless-json/lib/esm/reviveDate.js","../../node_modules/zustand/esm/vanilla.mjs","../../node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.production.min.js","../../node_modules/use-sync-external-store/shim/with-selector.js","../../node_modules/zustand/esm/index.mjs","../../node_modules/zustand/esm/middleware.mjs","../../src/stores/JsonTabStore.ts","../../src/components/VanillaJSONEditor.tsx","../../src/pages/json/json-editor/JsonEditor.tsx","../../src/pages/json/json-editor/index.tsx"],"sourcesContent":["/**\n * Get and/or set configuration options\n * @deprecated There is no config anymore\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function config(options) {\n  // Backward compatibility warning for v1.x\n  throw new Error('config is deprecated, support for circularRefs is removed from the library. ' + 'If you encounter circular references in your data structures, ' + 'please rethink your datastructures: ' + 'better prevent circular references in the first place.');\n}\n//# sourceMappingURL=config.js.map","/**\n * Revive a string containing an ISO 8601 date string into a JavaScript `Date` object\n */\nexport function reviveDate(key, value) {\n  return typeof value === 'string' && isoDateRegex.test(value) ? new Date(value) : value;\n}\n\n// Matches strings like \"2022-08-25T09:39:19.288Z\"\nconst isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\n//# sourceMappingURL=reviveDate.js.map","const createStoreImpl = (createState) => {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\" || nextState === null) ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const getInitialState = () => initialState;\n  const subscribe = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const destroy = () => {\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n      console.warn(\n        \"[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.\"\n      );\n    }\n    listeners.clear();\n  };\n  const api = { setState, getState, getInitialState, subscribe, destroy };\n  const initialState = state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;\nvar vanilla = (createState) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.\"\n    );\n  }\n  return createStore(createState);\n};\n\nexport { createStore, vanilla as default };\n","/**\n * @license React\n * use-sync-external-store-shim/with-selector.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var h=require(\"react\"),n=require(\"use-sync-external-store/shim\");function p(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var q=\"function\"===typeof Object.is?Object.is:p,r=n.useSyncExternalStore,t=h.useRef,u=h.useEffect,v=h.useMemo,w=h.useDebugValue;\nexports.useSyncExternalStoreWithSelector=function(a,b,e,l,g){var c=t(null);if(null===c.current){var f={hasValue:!1,value:null};c.current=f}else f=c.current;c=v(function(){function a(a){if(!c){c=!0;d=a;a=l(a);if(void 0!==g&&f.hasValue){var b=f.value;if(g(b,a))return k=b}return k=a}b=k;if(q(d,a))return b;var e=l(a);if(void 0!==g&&g(b,e))return b;d=a;return k=e}var c=!1,d,k,m=void 0===e?null:e;return[function(){return a(b())},null===m?void 0:function(){return a(m())}]},[b,e,l,g]);var d=r(a,c[0],c[1]);\nu(function(){f.hasValue=!0;f.value=d},[d]);w(d);return d};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim/with-selector.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim/with-selector.development.js');\n}\n","import { createStore } from 'zustand/vanilla';\nexport * from 'zustand/vanilla';\nimport ReactExports from 'react';\nimport useSyncExternalStoreExports from 'use-sync-external-store/shim/with-selector.js';\n\nconst { useDebugValue } = ReactExports;\nconst { useSyncExternalStoreWithSelector } = useSyncExternalStoreExports;\nlet didWarnAboutEqualityFn = false;\nconst identity = (arg) => arg;\nfunction useStore(api, selector = identity, equalityFn) {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && equalityFn && !didWarnAboutEqualityFn) {\n    console.warn(\n      \"[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937\"\n    );\n    didWarnAboutEqualityFn = true;\n  }\n  const slice = useSyncExternalStoreWithSelector(\n    api.subscribe,\n    api.getState,\n    api.getServerState || api.getInitialState,\n    selector,\n    equalityFn\n  );\n  useDebugValue(slice);\n  return slice;\n}\nconst createImpl = (createState) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && typeof createState !== \"function\") {\n    console.warn(\n      \"[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.\"\n    );\n  }\n  const api = typeof createState === \"function\" ? createStore(createState) : createState;\n  const useBoundStore = (selector, equalityFn) => useStore(api, selector, equalityFn);\n  Object.assign(useBoundStore, api);\n  return useBoundStore;\n};\nconst create = (createState) => createState ? createImpl(createState) : createImpl;\nvar react = (createState) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`.\"\n    );\n  }\n  return create(createState);\n};\n\nexport { create, react as default, useStore };\n","const reduxImpl = (reducer, initial) => (set, _get, api) => {\n  api.dispatch = (action) => {\n    set((state) => reducer(state, action), false, action);\n    return action;\n  };\n  api.dispatchFromDevtools = true;\n  return { dispatch: (...a) => api.dispatch(...a), ...initial };\n};\nconst redux = reduxImpl;\n\nconst trackedConnections = /* @__PURE__ */ new Map();\nconst getTrackedConnectionState = (name) => {\n  const api = trackedConnections.get(name);\n  if (!api)\n    return {};\n  return Object.fromEntries(\n    Object.entries(api.stores).map(([key, api2]) => [key, api2.getState()])\n  );\n};\nconst extractConnectionInformation = (store, extensionConnector, options) => {\n  if (store === void 0) {\n    return {\n      type: \"untracked\",\n      connection: extensionConnector.connect(options)\n    };\n  }\n  const existingConnection = trackedConnections.get(options.name);\n  if (existingConnection) {\n    return { type: \"tracked\", store, ...existingConnection };\n  }\n  const newConnection = {\n    connection: extensionConnector.connect(options),\n    stores: {}\n  };\n  trackedConnections.set(options.name, newConnection);\n  return { type: \"tracked\", store, ...newConnection };\n};\nconst devtoolsImpl = (fn, devtoolsOptions = {}) => (set, get, api) => {\n  const { enabled, anonymousActionType, store, ...options } = devtoolsOptions;\n  let extensionConnector;\n  try {\n    extensionConnector = (enabled != null ? enabled : (import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") && window.__REDUX_DEVTOOLS_EXTENSION__;\n  } catch (e) {\n  }\n  if (!extensionConnector) {\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && enabled) {\n      console.warn(\n        \"[zustand devtools middleware] Please install/enable Redux devtools extension\"\n      );\n    }\n    return fn(set, get, api);\n  }\n  const { connection, ...connectionInformation } = extractConnectionInformation(store, extensionConnector, options);\n  let isRecording = true;\n  api.setState = (state, replace, nameOrAction) => {\n    const r = set(state, replace);\n    if (!isRecording)\n      return r;\n    const action = nameOrAction === void 0 ? { type: anonymousActionType || \"anonymous\" } : typeof nameOrAction === \"string\" ? { type: nameOrAction } : nameOrAction;\n    if (store === void 0) {\n      connection == null ? void 0 : connection.send(action, get());\n      return r;\n    }\n    connection == null ? void 0 : connection.send(\n      {\n        ...action,\n        type: `${store}/${action.type}`\n      },\n      {\n        ...getTrackedConnectionState(options.name),\n        [store]: api.getState()\n      }\n    );\n    return r;\n  };\n  const setStateFromDevtools = (...a) => {\n    const originalIsRecording = isRecording;\n    isRecording = false;\n    set(...a);\n    isRecording = originalIsRecording;\n  };\n  const initialState = fn(api.setState, get, api);\n  if (connectionInformation.type === \"untracked\") {\n    connection == null ? void 0 : connection.init(initialState);\n  } else {\n    connectionInformation.stores[connectionInformation.store] = api;\n    connection == null ? void 0 : connection.init(\n      Object.fromEntries(\n        Object.entries(connectionInformation.stores).map(([key, store2]) => [\n          key,\n          key === connectionInformation.store ? initialState : store2.getState()\n        ])\n      )\n    );\n  }\n  if (api.dispatchFromDevtools && typeof api.dispatch === \"function\") {\n    let didWarnAboutReservedActionType = false;\n    const originalDispatch = api.dispatch;\n    api.dispatch = (...a) => {\n      if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && a[0].type === \"__setState\" && !didWarnAboutReservedActionType) {\n        console.warn(\n          '[zustand devtools middleware] \"__setState\" action type is reserved to set state from the devtools. Avoid using it.'\n        );\n        didWarnAboutReservedActionType = true;\n      }\n      originalDispatch(...a);\n    };\n  }\n  connection.subscribe((message) => {\n    var _a;\n    switch (message.type) {\n      case \"ACTION\":\n        if (typeof message.payload !== \"string\") {\n          console.error(\n            \"[zustand devtools middleware] Unsupported action format\"\n          );\n          return;\n        }\n        return parseJsonThen(\n          message.payload,\n          (action) => {\n            if (action.type === \"__setState\") {\n              if (store === void 0) {\n                setStateFromDevtools(action.state);\n                return;\n              }\n              if (Object.keys(action.state).length !== 1) {\n                console.error(\n                  `\n                    [zustand devtools middleware] Unsupported __setState action format. \n                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),\n                    and value of this only key should be a state object. Example: { \"type\": \"__setState\", \"state\": { \"abc123Store\": { \"foo\": \"bar\" } } }\n                    `\n                );\n              }\n              const stateFromDevtools = action.state[store];\n              if (stateFromDevtools === void 0 || stateFromDevtools === null) {\n                return;\n              }\n              if (JSON.stringify(api.getState()) !== JSON.stringify(stateFromDevtools)) {\n                setStateFromDevtools(stateFromDevtools);\n              }\n              return;\n            }\n            if (!api.dispatchFromDevtools)\n              return;\n            if (typeof api.dispatch !== \"function\")\n              return;\n            api.dispatch(action);\n          }\n        );\n      case \"DISPATCH\":\n        switch (message.payload.type) {\n          case \"RESET\":\n            setStateFromDevtools(initialState);\n            if (store === void 0) {\n              return connection == null ? void 0 : connection.init(api.getState());\n            }\n            return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n          case \"COMMIT\":\n            if (store === void 0) {\n              connection == null ? void 0 : connection.init(api.getState());\n              return;\n            }\n            return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n          case \"ROLLBACK\":\n            return parseJsonThen(message.state, (state) => {\n              if (store === void 0) {\n                setStateFromDevtools(state);\n                connection == null ? void 0 : connection.init(api.getState());\n                return;\n              }\n              setStateFromDevtools(state[store]);\n              connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n            });\n          case \"JUMP_TO_STATE\":\n          case \"JUMP_TO_ACTION\":\n            return parseJsonThen(message.state, (state) => {\n              if (store === void 0) {\n                setStateFromDevtools(state);\n                return;\n              }\n              if (JSON.stringify(api.getState()) !== JSON.stringify(state[store])) {\n                setStateFromDevtools(state[store]);\n              }\n            });\n          case \"IMPORT_STATE\": {\n            const { nextLiftedState } = message.payload;\n            const lastComputedState = (_a = nextLiftedState.computedStates.slice(-1)[0]) == null ? void 0 : _a.state;\n            if (!lastComputedState)\n              return;\n            if (store === void 0) {\n              setStateFromDevtools(lastComputedState);\n            } else {\n              setStateFromDevtools(lastComputedState[store]);\n            }\n            connection == null ? void 0 : connection.send(\n              null,\n              // FIXME no-any\n              nextLiftedState\n            );\n            return;\n          }\n          case \"PAUSE_RECORDING\":\n            return isRecording = !isRecording;\n        }\n        return;\n    }\n  });\n  return initialState;\n};\nconst devtools = devtoolsImpl;\nconst parseJsonThen = (stringified, f) => {\n  let parsed;\n  try {\n    parsed = JSON.parse(stringified);\n  } catch (e) {\n    console.error(\n      \"[zustand devtools middleware] Could not parse the received json\",\n      e\n    );\n  }\n  if (parsed !== void 0)\n    f(parsed);\n};\n\nconst subscribeWithSelectorImpl = (fn) => (set, get, api) => {\n  const origSubscribe = api.subscribe;\n  api.subscribe = (selector, optListener, options) => {\n    let listener = selector;\n    if (optListener) {\n      const equalityFn = (options == null ? void 0 : options.equalityFn) || Object.is;\n      let currentSlice = selector(api.getState());\n      listener = (state) => {\n        const nextSlice = selector(state);\n        if (!equalityFn(currentSlice, nextSlice)) {\n          const previousSlice = currentSlice;\n          optListener(currentSlice = nextSlice, previousSlice);\n        }\n      };\n      if (options == null ? void 0 : options.fireImmediately) {\n        optListener(currentSlice, currentSlice);\n      }\n    }\n    return origSubscribe(listener);\n  };\n  const initialState = fn(set, get, api);\n  return initialState;\n};\nconst subscribeWithSelector = subscribeWithSelectorImpl;\n\nconst combine = (initialState, create) => (...a) => Object.assign({}, initialState, create(...a));\n\nfunction createJSONStorage(getStorage, options) {\n  let storage;\n  try {\n    storage = getStorage();\n  } catch (e) {\n    return;\n  }\n  const persistStorage = {\n    getItem: (name) => {\n      var _a;\n      const parse = (str2) => {\n        if (str2 === null) {\n          return null;\n        }\n        return JSON.parse(str2, options == null ? void 0 : options.reviver);\n      };\n      const str = (_a = storage.getItem(name)) != null ? _a : null;\n      if (str instanceof Promise) {\n        return str.then(parse);\n      }\n      return parse(str);\n    },\n    setItem: (name, newValue) => storage.setItem(\n      name,\n      JSON.stringify(newValue, options == null ? void 0 : options.replacer)\n    ),\n    removeItem: (name) => storage.removeItem(name)\n  };\n  return persistStorage;\n}\nconst toThenable = (fn) => (input) => {\n  try {\n    const result = fn(input);\n    if (result instanceof Promise) {\n      return result;\n    }\n    return {\n      then(onFulfilled) {\n        return toThenable(onFulfilled)(result);\n      },\n      catch(_onRejected) {\n        return this;\n      }\n    };\n  } catch (e) {\n    return {\n      then(_onFulfilled) {\n        return this;\n      },\n      catch(onRejected) {\n        return toThenable(onRejected)(e);\n      }\n    };\n  }\n};\nconst oldImpl = (config, baseOptions) => (set, get, api) => {\n  let options = {\n    getStorage: () => localStorage,\n    serialize: JSON.stringify,\n    deserialize: JSON.parse,\n    partialize: (state) => state,\n    version: 0,\n    merge: (persistedState, currentState) => ({\n      ...currentState,\n      ...persistedState\n    }),\n    ...baseOptions\n  };\n  let hasHydrated = false;\n  const hydrationListeners = /* @__PURE__ */ new Set();\n  const finishHydrationListeners = /* @__PURE__ */ new Set();\n  let storage;\n  try {\n    storage = options.getStorage();\n  } catch (e) {\n  }\n  if (!storage) {\n    return config(\n      (...args) => {\n        console.warn(\n          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`\n        );\n        set(...args);\n      },\n      get,\n      api\n    );\n  }\n  const thenableSerialize = toThenable(options.serialize);\n  const setItem = () => {\n    const state = options.partialize({ ...get() });\n    let errorInSync;\n    const thenable = thenableSerialize({ state, version: options.version }).then(\n      (serializedValue) => storage.setItem(options.name, serializedValue)\n    ).catch((e) => {\n      errorInSync = e;\n    });\n    if (errorInSync) {\n      throw errorInSync;\n    }\n    return thenable;\n  };\n  const savedSetState = api.setState;\n  api.setState = (state, replace) => {\n    savedSetState(state, replace);\n    void setItem();\n  };\n  const configResult = config(\n    (...args) => {\n      set(...args);\n      void setItem();\n    },\n    get,\n    api\n  );\n  let stateFromStorage;\n  const hydrate = () => {\n    var _a;\n    if (!storage)\n      return;\n    hasHydrated = false;\n    hydrationListeners.forEach((cb) => cb(get()));\n    const postRehydrationCallback = ((_a = options.onRehydrateStorage) == null ? void 0 : _a.call(options, get())) || void 0;\n    return toThenable(storage.getItem.bind(storage))(options.name).then((storageValue) => {\n      if (storageValue) {\n        return options.deserialize(storageValue);\n      }\n    }).then((deserializedStorageValue) => {\n      if (deserializedStorageValue) {\n        if (typeof deserializedStorageValue.version === \"number\" && deserializedStorageValue.version !== options.version) {\n          if (options.migrate) {\n            return options.migrate(\n              deserializedStorageValue.state,\n              deserializedStorageValue.version\n            );\n          }\n          console.error(\n            `State loaded from storage couldn't be migrated since no migrate function was provided`\n          );\n        } else {\n          return deserializedStorageValue.state;\n        }\n      }\n    }).then((migratedState) => {\n      var _a2;\n      stateFromStorage = options.merge(\n        migratedState,\n        (_a2 = get()) != null ? _a2 : configResult\n      );\n      set(stateFromStorage, true);\n      return setItem();\n    }).then(() => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);\n      hasHydrated = true;\n      finishHydrationListeners.forEach((cb) => cb(stateFromStorage));\n    }).catch((e) => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e);\n    });\n  };\n  api.persist = {\n    setOptions: (newOptions) => {\n      options = {\n        ...options,\n        ...newOptions\n      };\n      if (newOptions.getStorage) {\n        storage = newOptions.getStorage();\n      }\n    },\n    clearStorage: () => {\n      storage == null ? void 0 : storage.removeItem(options.name);\n    },\n    getOptions: () => options,\n    rehydrate: () => hydrate(),\n    hasHydrated: () => hasHydrated,\n    onHydrate: (cb) => {\n      hydrationListeners.add(cb);\n      return () => {\n        hydrationListeners.delete(cb);\n      };\n    },\n    onFinishHydration: (cb) => {\n      finishHydrationListeners.add(cb);\n      return () => {\n        finishHydrationListeners.delete(cb);\n      };\n    }\n  };\n  hydrate();\n  return stateFromStorage || configResult;\n};\nconst newImpl = (config, baseOptions) => (set, get, api) => {\n  let options = {\n    storage: createJSONStorage(() => localStorage),\n    partialize: (state) => state,\n    version: 0,\n    merge: (persistedState, currentState) => ({\n      ...currentState,\n      ...persistedState\n    }),\n    ...baseOptions\n  };\n  let hasHydrated = false;\n  const hydrationListeners = /* @__PURE__ */ new Set();\n  const finishHydrationListeners = /* @__PURE__ */ new Set();\n  let storage = options.storage;\n  if (!storage) {\n    return config(\n      (...args) => {\n        console.warn(\n          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`\n        );\n        set(...args);\n      },\n      get,\n      api\n    );\n  }\n  const setItem = () => {\n    const state = options.partialize({ ...get() });\n    return storage.setItem(options.name, {\n      state,\n      version: options.version\n    });\n  };\n  const savedSetState = api.setState;\n  api.setState = (state, replace) => {\n    savedSetState(state, replace);\n    void setItem();\n  };\n  const configResult = config(\n    (...args) => {\n      set(...args);\n      void setItem();\n    },\n    get,\n    api\n  );\n  api.getInitialState = () => configResult;\n  let stateFromStorage;\n  const hydrate = () => {\n    var _a, _b;\n    if (!storage)\n      return;\n    hasHydrated = false;\n    hydrationListeners.forEach((cb) => {\n      var _a2;\n      return cb((_a2 = get()) != null ? _a2 : configResult);\n    });\n    const postRehydrationCallback = ((_b = options.onRehydrateStorage) == null ? void 0 : _b.call(options, (_a = get()) != null ? _a : configResult)) || void 0;\n    return toThenable(storage.getItem.bind(storage))(options.name).then((deserializedStorageValue) => {\n      if (deserializedStorageValue) {\n        if (typeof deserializedStorageValue.version === \"number\" && deserializedStorageValue.version !== options.version) {\n          if (options.migrate) {\n            return options.migrate(\n              deserializedStorageValue.state,\n              deserializedStorageValue.version\n            );\n          }\n          console.error(\n            `State loaded from storage couldn't be migrated since no migrate function was provided`\n          );\n        } else {\n          return deserializedStorageValue.state;\n        }\n      }\n    }).then((migratedState) => {\n      var _a2;\n      stateFromStorage = options.merge(\n        migratedState,\n        (_a2 = get()) != null ? _a2 : configResult\n      );\n      set(stateFromStorage, true);\n      return setItem();\n    }).then(() => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);\n      stateFromStorage = get();\n      hasHydrated = true;\n      finishHydrationListeners.forEach((cb) => cb(stateFromStorage));\n    }).catch((e) => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e);\n    });\n  };\n  api.persist = {\n    setOptions: (newOptions) => {\n      options = {\n        ...options,\n        ...newOptions\n      };\n      if (newOptions.storage) {\n        storage = newOptions.storage;\n      }\n    },\n    clearStorage: () => {\n      storage == null ? void 0 : storage.removeItem(options.name);\n    },\n    getOptions: () => options,\n    rehydrate: () => hydrate(),\n    hasHydrated: () => hasHydrated,\n    onHydrate: (cb) => {\n      hydrationListeners.add(cb);\n      return () => {\n        hydrationListeners.delete(cb);\n      };\n    },\n    onFinishHydration: (cb) => {\n      finishHydrationListeners.add(cb);\n      return () => {\n        finishHydrationListeners.delete(cb);\n      };\n    }\n  };\n  if (!options.skipHydration) {\n    hydrate();\n  }\n  return stateFromStorage || configResult;\n};\nconst persistImpl = (config, baseOptions) => {\n  if (\"getStorage\" in baseOptions || \"serialize\" in baseOptions || \"deserialize\" in baseOptions) {\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n      console.warn(\n        \"[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead.\"\n      );\n    }\n    return oldImpl(config, baseOptions);\n  }\n  return newImpl(config, baseOptions);\n};\nconst persist = persistImpl;\n\nexport { combine, createJSONStorage, devtools, persist, redux, subscribeWithSelector };\n","import _ from 'lodash';\nimport { create } from 'zustand';\nimport { createJSONStorage, persist } from 'zustand/middleware';\n\ninterface JsonTabStore {\n  jsonTabs: string[];\n  activeKey: string;\n  addJsonTab: (key: string) => void;\n  removeJsonTab: (key: string) => void;\n  setActiveKey: (key: string) => void;\n}\n\nconst useJsonTabStore = create<JsonTabStore>()(\n  persist(\n    (set, get) => ({\n      jsonTabs: ['0'],\n      activeKey: '0',\n\n      addJsonTab: (key: string) =>\n        set(() => {\n          return { jsonTabs: _.concat(get().jsonTabs, key) };\n        }),\n      removeJsonTab: (key: string) =>\n        set(() => {\n          return { jsonTabs: _.without(get().jsonTabs, key) };\n        }),\n      setActiveKey: (key: string) =>\n        set(() => {\n          return { activeKey: key };\n        }),\n    }),\n    { name: 'json-tab-store', storage: createJSONStorage(() => localStorage) },\n  ),\n);\n\nexport default useJsonTabStore;\n","import * as LosslessJSON from 'lossless-json';\nimport { useEffect, useRef } from 'react';\n\nimport type { JSONEditorPropsOptional } from 'vanilla-jsoneditor';\nimport { JSONEditor } from 'vanilla-jsoneditor';\n\nconst VanillaJSONEditor = (props: JSONEditorPropsOptional) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const editorRef = useRef<JSONEditor>();\n\n  useEffect(() => {\n    const options = {\n      target: containerRef.current,\n      props: {},\n    };\n    // @ts-ignore\n    editorRef.current = new JSONEditor(options);\n\n    return () => {\n      // destroy editor\n      if (editorRef.current) {\n        editorRef.current.destroy();\n        editorRef.current = undefined;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (editorRef.current) {\n      // @ts-ignore\n      editorRef.current?.updateProps({ ...props, parser: LosslessJSON });\n    }\n  }, [props]);\n\n  return <div className=\"h-full\" ref={containerRef} />;\n};\n\nexport default VanillaJSONEditor;\n","import { useLocalStorageState } from 'ahooks';\nimport type { FC } from 'react';\nimport type { Content } from 'vanilla-jsoneditor';\nimport { Mode } from 'vanilla-jsoneditor';\n\nimport VanillaJSONEditor from '@/components/VanillaJSONEditor.tsx';\n\ninterface Props {\n  idx?: string;\n}\n\nconst JSONBeta: FC<Props> = (props) => {\n  const defaultValue = {\n    mode: 'text',\n    content: {\n      text: '',\n    },\n  };\n  const idx = props?.idx || '0';\n  const [jsonStorage, setJsonStorage] = useLocalStorageState<any>(`json-${idx}`, { defaultValue });\n\n  const resolveMode = (): Mode | undefined => {\n    if (jsonStorage === undefined || jsonStorage === null) {\n      return Mode.text;\n    }\n    return jsonStorage.mode as Mode;\n  };\n\n  const onChange = (content: Content) => {\n    setJsonStorage((oldValue: any) => {\n      return { ...oldValue, content: content };\n    });\n  };\n\n  const onChangMode = (mode: Mode) => {\n    setJsonStorage((oldValue: any) => {\n      return { ...oldValue, mode: mode };\n    });\n  };\n\n  return (\n    <VanillaJSONEditor\n      mode={resolveMode()}\n      content={jsonStorage.content}\n      onChange={onChange}\n      onChangeMode={onChangMode}\n    />\n  );\n};\n\nexport default JSONBeta;\n","import type { TabsProps } from 'antd';\nimport { Tabs } from 'antd';\nimport _ from 'lodash';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\n\nimport useJsonTabStore from '@/stores/JsonTabStore.ts';\nimport { PageContainer } from '@ant-design/pro-components';\n\nimport JsonEditor from './JsonEditor.tsx';\n\ntype TargetKey = React.MouseEvent | React.KeyboardEvent | string;\nexport const Component = () => {\n  const { jsonTabs, activeKey, addJsonTab, removeJsonTab, setActiveKey } = useJsonTabStore();\n  const [items, setItems] = useState<TabsProps['items']>([]);\n\n  useEffect(() => {\n    const item: TabsProps['items'] = jsonTabs.map((idx) => {\n      return {\n        key: idx,\n        label: idx,\n        closable: true,\n        children: <JsonEditor idx={idx} />,\n        className: 'h-[calc(100dvh-112px)] md:h-[calc(100dvh-56px)]',\n      };\n    });\n    if (_.indexOf(jsonTabs, activeKey) === -1) {\n      const lastItem = _.last(item);\n      setActiveKey(lastItem?.key || '0');\n    }\n\n    setItems(item);\n  }, [jsonTabs, activeKey, setActiveKey]);\n\n  const onChange = (activeKey: string) => {\n    setActiveKey(activeKey);\n  };\n  const onEdit = (targetKey: React.MouseEvent | React.KeyboardEvent | string, action: 'add' | 'remove') => {\n    if (action === 'add') {\n      add();\n    } else {\n      remove(targetKey);\n    }\n  };\n\n  const add = () => {\n    let newActiveKey = '0';\n    if (jsonTabs && jsonTabs.length > 0) {\n      const keys = jsonTabs.map((i) => {\n        return Number(i);\n      });\n      const maxKey = Math.max(...keys);\n\n      newActiveKey = `${maxKey + 1}`;\n    }\n    addJsonTab(newActiveKey);\n    setActiveKey(newActiveKey);\n  };\n\n  const remove = (targetKey: TargetKey) => {\n    removeJsonTab(String(targetKey));\n    localStorage.removeItem(`json-${targetKey}`);\n    if (jsonTabs && jsonTabs.length <= 1) {\n      addJsonTab('0');\n    }\n  };\n\n  return (\n    <PageContainer title={false} className=\"w-full\">\n      <Tabs type=\"editable-card\" size=\"small\" onChange={onChange} activeKey={activeKey} onEdit={onEdit} items={items} />\n    </PageContainer>\n  );\n};\n"],"names":["config","options","reviveDate","key","value","isoDateRegex","define_import_meta_env_default","h","require$$0","n","require$$1","p","a","b","q","r","t","u","v","w","withSelector_production_min","e","l","g","c","d","k","m","withSelectorModule","useJsonTabStore","create","persist","set","get","_","createJSONStorage","VanillaJSONEditor","props","containerRef","useRef","editorRef","useEffect","JSONEditor","_a","LosslessJSON","jsx","JSONBeta","defaultValue","idx","jsonStorage","setJsonStorage","useLocalStorageState","resolveMode","Mode","onChange","content","oldValue","onChangMode","mode","Component","jsonTabs","activeKey","addJsonTab","removeJsonTab","setActiveKey","items","setItems","useState","item","JsonEditor","lastItem","onEdit","targetKey","action","add","remove","newActiveKey","keys","i","PageContainer","Tabs"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}