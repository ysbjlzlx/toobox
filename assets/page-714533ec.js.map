{"version":3,"file":"page-714533ec.js","sources":["../../src/scripts/Random.ts","../../src/scripts/RandomStringUtils.ts","../../src/pages/generator/string/page.tsx"],"sourcesContent":["/**\n * 生成整数随机数\n * 包含最小值，不含最大值的随机数\n * @param min 最小值（包含）\n * @param max 最大值（不包含）\n * @return {number}\n */\nexport function random(min: number, max: number): number {\n  const ceilMin = Math.ceil(min);\n  const ceilMax = Math.floor(max);\n  return Math.floor(Math.random() * (ceilMax - ceilMin)) + ceilMin;\n}\n\n/**\n * 生成整数随机数\n * 同时包含最小值和最大值的随机数\n * @param min 最小值（包含）\n * @param max 最大值（包含）\n * @return {number}\n */\nexport function randomInclusive(min: number, max: number): number {\n  const ceilMin = Math.ceil(min);\n  const ceilMax = Math.floor(max);\n  return Math.floor(Math.random() * (ceilMax - ceilMin + 1)) + ceilMin;\n}\n","import * as _ from 'lodash';\nimport { random as randomInt } from './Random';\n\n// prettier-ignore\nexport const NUMERIC_CHARS: string[] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n// prettier-ignore\nexport const LOWERCASE_CHARS: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n// prettier-ignore\nexport const UPPERCASE_CHARS: string[] = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n// prettier-ignore\nexport const SYMBOL_CHARS: string[] = ['!', '@', '#', '$', '%', '^', '&', '*']\n\nconst EMPTY_CHAR = '';\n\nconst random = function (length: number): string {\n  const options: GeneratorOptions = {\n    length: length,\n    numeric: true,\n    lowercase: true,\n    uppercase: true,\n    symbol: false,\n  };\n  return generator(options);\n};\n\nconst randomAlphabetic = function (length: number): string {\n  const options: GeneratorOptions = {\n    length: length,\n    numeric: false,\n    lowercase: true,\n    uppercase: true,\n    symbol: false,\n  };\n  return generator(options);\n};\n\nconst randomNumber = function (length: number): string {\n  const options: GeneratorOptions = {\n    length: length,\n    numeric: true,\n    lowercase: false,\n    uppercase: false,\n    symbol: false,\n  };\n  return generator(options);\n};\n\nexport interface GeneratorOptions {\n  length?: number;\n  numeric?: boolean;\n  lowercase?: boolean;\n  uppercase?: boolean;\n  symbol?: boolean;\n  symbolChars?: string;\n}\n\nconst generator = ({\n  length = 8,\n  numeric = true,\n  lowercase = true,\n  uppercase = true,\n  symbol = false,\n  symbolChars = '!@#$%^&*',\n}: GeneratorOptions): string => {\n  if (typeof length === 'undefined' || length === null || length <= 0) {\n    return EMPTY_CHAR;\n  }\n  let chars: string[] = [];\n  if (numeric) {\n    chars = chars.concat(NUMERIC_CHARS);\n  }\n  if (lowercase) {\n    chars = chars.concat(LOWERCASE_CHARS);\n  }\n  if (uppercase) {\n    chars = chars.concat(UPPERCASE_CHARS);\n  }\n  if (symbol && symbolChars) {\n    chars = chars.concat(symbolChars.split(''));\n  }\n  if (chars.length < 1) {\n    return EMPTY_CHAR;\n  } else {\n    _.shuffle(chars);\n  }\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += chars[randomInt(0, chars.length)];\n  }\n  return str;\n};\n\nexport { random, randomAlphabetic, randomNumber, generator };\n","import { PageContainer } from '@ant-design/pro-components';\nimport { Button, Card, Checkbox, Col, Form, Input, Row, Slider, Space } from 'antd';\nimport { useEffect, useState } from 'react';\n\nimport ContentCopyButton from '@/components/ContentCopyButton.tsx';\nimport Iconify from '@/components/Iconify';\nimport type { GeneratorOptions } from '@/scripts/RandomStringUtils.ts';\nimport { generator } from '@/scripts/RandomStringUtils.ts';\n\nconst initialOptions: GeneratorOptions = {\n  numeric: true,\n  lowercase: true,\n  uppercase: true,\n  symbol: false,\n  symbolChars: '!@#$%^&*',\n};\nexport default function Page() {\n  const [randomString, setRandomString] = useState<string>('');\n\n  useEffect(() => {\n    refresh();\n  }, []);\n\n  const refresh = (options: GeneratorOptions = initialOptions) => {\n    const varchar = generator(options);\n    setRandomString(varchar);\n  };\n\n  const onValuesChange = (_: any, allValues: GeneratorOptions) => {\n    refresh(allValues);\n  };\n\n  const onFinish = (values: GeneratorOptions) => {\n    refresh(values);\n  };\n\n  return (\n    <PageContainer title={false} style={{ paddingTop: '20px', paddingLeft: '20px', paddingRight: '20px' }}>\n      <Form layout=\"horizontal\" initialValues={initialOptions} onValuesChange={onValuesChange} onFinish={onFinish}>\n        <Card actions={[<Button key=\"1\" htmlType=\"submit\" icon={<Iconify icon=\"material-symbols:refresh\" />} />]}>\n          <Row>\n            <Col span={4}>\n              <Form.Item name=\"numeric\" valuePropName=\"checked\">\n                <Checkbox>数字 0 ～ 9</Checkbox>\n              </Form.Item>\n            </Col>\n            <Col span={4}>\n              <Form.Item name=\"lowercase\" valuePropName=\"checked\">\n                <Checkbox>小写字母 a ~ z</Checkbox>\n              </Form.Item>\n            </Col>\n            <Col span={4}>\n              <Form.Item name=\"uppercase\" valuePropName=\"checked\">\n                <Checkbox>大写字母 A ~ Z</Checkbox>\n              </Form.Item>\n            </Col>\n            <Col span={8}>\n              <Row>\n                <Col span={4}>\n                  <Form.Item name=\"symbol\" valuePropName=\"checked\">\n                    <Checkbox>符号</Checkbox>\n                  </Form.Item>\n                </Col>\n                <Col span={20}>\n                  <Form.Item name=\"symbolChars\">\n                    <Input />\n                  </Form.Item>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n          <Row>\n            <Col span={24}>\n              <Form.Item name=\"length\" label=\"长度\">\n                <Slider min={6} max={64} step={1} marks={{ 6: '6', 8: '8', 16: '16', 32: '32', 64: '64' }} />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Row>\n            <Col span={24}>\n              <Form.Item>\n                <Space.Compact block={true}>\n                  <Input value={randomString} />\n                  <ContentCopyButton text={randomString} />\n                </Space.Compact>\n              </Form.Item>\n            </Col>\n          </Row>\n        </Card>\n      </Form>\n    </PageContainer>\n  );\n}\n"],"names":["random","min","max","ceilMin","ceilMax","NUMERIC_CHARS","LOWERCASE_CHARS","UPPERCASE_CHARS","EMPTY_CHAR","generator","length","numeric","lowercase","uppercase","symbol","symbolChars","chars","_.shuffle","str","i","randomInt","initialOptions","Page","randomString","setRandomString","useState","useEffect","refresh","options","varchar","onValuesChange","_","allValues","onFinish","values","PageContainer","jsx","Form","jsxs","Card","Button","Iconify","Row","Col","Checkbox","Input","Slider","Space","ContentCopyButton"],"mappings":"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"}