{"version":3,"file":"page-5375b8c1.js","sources":["../../node_modules/base-x/src/index.js","../../node_modules/bs58/index.js","../../node_modules/@noble/hashes/_sha2.js","../../node_modules/@noble/hashes/sha256.js","../../node_modules/bs58check/base.js","../../node_modules/bs58check/index.js","../../src/lib/BaseEncoder.ts","../../src/pages/base64/page.tsx"],"sourcesContent":["'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n//# sourceMappingURL=_sha2.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha224 = exports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","'use strict'\n\nvar base58 = require('bs58')\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var payloadU8 = Uint8Array.from(payload)\n    var checksum = checksumFn(payloadU8)\n    var length = payloadU8.length + 4\n    var both = new Uint8Array(length)\n    both.set(payloadU8, 0)\n    both.set(checksum.subarray(0, 4), payloadU8.length)\n    return base58.encode(both, length)\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","'use strict'\n\nvar { sha256 } = require('@noble/hashes/sha256')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  return sha256(sha256(buffer))\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","import basex from 'base-x';\nimport bs58 from 'bs58';\nimport bs58check from 'bs58check';\n\nexport type BaseType = 'base-16' | 'base-32' | 'z-base-32' | 'base-36' | 'base-58' | 'base-58-check' | 'base-64';\n\nconst alphabets = {\n  'base-16': '0123456789abcdef',\n  'base-32': '0123456789ABCDEFGHJKMNPQRSTVWXYZ',\n  'z-base-32': 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  'base-36': '0123456789abcdefghijklmnopqrstuvwxyz',\n  'base-58': '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',\n  'base-64': 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n};\n\nexport const encode = (type: BaseType, input: string): string => {\n  if (type === 'base-58') {\n    console.log(bs58.encode(new TextEncoder().encode(input)));\n  }\n  if (type === 'base-58-check') {\n    return bs58check.encode(new TextEncoder().encode(input));\n  }\n  const base = alphabets[type];\n  return basex(base).encode(new TextEncoder().encode(input));\n};\n\nexport const decode = (type: BaseType, input: string): string => {\n  if (type === 'base-58') {\n    console.log(new TextDecoder().decode(bs58.decode(input)));\n  }\n  if (type === 'base-58-check') {\n    console.log(Buffer.from(bs58check.decode(input)).toString('hex'));\n    return new TextDecoder().decode(bs58check.decode(input));\n  }\n  const base = alphabets[type];\n  return new TextDecoder().decode(basex(base).decode(input));\n};\n","import { PageContainer } from '@ant-design/pro-components';\nimport { Box } from '@mui/system';\nimport type { SegmentedProps } from 'antd';\nimport { Button, Input, Segmented, Space } from 'antd';\nimport { useCallback, useState } from 'react';\n\nimport TextResultBox from '@/components/TextResultBox.tsx';\nimport type { BaseType } from '@/lib/BaseEncoder.ts';\nimport { decode as baseDecode, encode as baseEncode } from '@/lib/BaseEncoder.ts';\n\nexport default function Page() {\n  const [type, setType] = useState<BaseType>('base-64');\n  const [plain, setPlain] = useState<string>('');\n  const [target, setTarget] = useState<string>('');\n\n  const segmentedOptions: SegmentedProps['options'] = [\n    { label: 'Base16', value: 'base-16' },\n    { label: 'Base32', value: 'base-32', disabled: false },\n    { label: 'Z Base32', value: 'z-base-32', disabled: false },\n    { label: 'Base36', value: 'base-36', disabled: false },\n    { label: 'Base58', value: 'base-58', disabled: false },\n    { label: 'Base58 Check', value: 'base-58-check', disabled: false },\n    { label: 'Base64', value: 'base-64' },\n  ];\n\n  const encode = useCallback(() => {\n    const result = baseEncode(type, plain);\n    setTarget(result);\n  }, [type, plain]);\n\n  const decode = useCallback(() => {\n    const result = baseDecode(type, plain);\n    setTarget(result);\n  }, [type, plain]);\n\n  return (\n    <PageContainer token={{ paddingInlinePageContainerContent: 10, paddingBlockPageContainerContent: 10 }}>\n      <Box sx={{ mt: 2, mb: 2 }}>\n        <Segmented\n          block={true}\n          value={type}\n          options={segmentedOptions}\n          onChange={(value) => {\n            setType(value as BaseType);\n          }}\n        />\n      </Box>\n      <Box sx={{ mt: 2 }}>\n        <Input.TextArea\n          value={plain}\n          onChange={(event) => {\n            setPlain(event.target.value);\n          }}\n          placeholder=\"文本\"\n          autoSize={{ minRows: 5, maxRows: 10 }}\n          showCount\n        />\n      </Box>\n      <Box sx={{ mt: 2 }}>\n        <Space.Compact>\n          <Button onClick={encode}>编码</Button>\n          <Button onClick={decode}>解码</Button>\n        </Space.Compact>\n      </Box>\n      <Box sx={{ mt: 2 }}>\n        <TextResultBox title=\"结果\" text={target} />\n      </Box>\n    </PageContainer>\n  );\n}\n"],"names":["base","ALPHABET","BASE_MAP","j","i","x","xc","BASE","LEADER","FACTOR","iFACTOR","encode","source","zeroes","length","pbegin","pend","size","b58","carry","it1","it2","str","decodeUnsafe","psz","b256","it3","it4","vch","decode","string","buffer","src","basex","require$$0","bs58","_sha2","_assert_js_1","utils_js_1","require$$1","setBigUint64","view","byteOffset","value","isLE","_32n","_u32_max","wh","wl","l","SHA2","blockLen","outputLen","padOffset","data","len","pos","take","dataView","out","oview","outLen","state","res","to","finished","destroyed","sha256","_sha2_js_1","Chi","a","b","c","Maj","SHA256_K","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","W15","W2","s0","s1","sigma1","T1","T2","SHA224","base58","checksumFn","payload","payloadU8","checksum","both","decodeRaw","newChecksum","bs58checkBase","sha256x2","bs58check","alphabets","type","input","Page","setType","useState","plain","setPlain","target","setTarget","segmentedOptions","useCallback","result","baseEncode","baseDecode","jsxs","PageContainer","jsx","Box","Segmented","Input","event","Space","Button","TextResultBox"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}