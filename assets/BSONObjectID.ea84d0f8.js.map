{"version":3,"file":"BSONObjectID.ea84d0f8.js","sources":["../../node_modules/bson-objectid/objectid.js","../../src/pages/BSONObjectID.tsx"],"sourcesContent":["\nvar MACHINE_ID = Math.floor(Math.random() * 0xFFFFFF);\nvar index = ObjectID.index = parseInt(Math.random() * 0xFFFFFF, 10);\nvar pid = (typeof process === 'undefined' || typeof process.pid !== 'number' ? Math.floor(Math.random() * 100000) : process.pid) % 0xFFFF;\n\n/**\n * Determine if an object is Buffer\n *\n * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * License:  MIT\n *\n */\nvar isBuffer = function (obj) {\n  return !!(\n  obj != null &&\n  obj.constructor &&\n  typeof obj.constructor.isBuffer === 'function' &&\n  obj.constructor.isBuffer(obj)\n  )\n};\n\n// Precomputed hex table enables speedy hex string conversion\nvar hexTable = [];\nfor (var i = 0; i < 256; i++) {\n  hexTable[i] = (i <= 15 ? '0' : '') + i.toString(16);\n}\n\n// Regular expression that checks for hex value\nvar checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');\n\n// Lookup tables\nvar decodeLookup = [];\ni = 0;\nwhile (i < 10) decodeLookup[0x30 + i] = i++;\nwhile (i < 16) decodeLookup[0x41 - 10 + i] = decodeLookup[0x61 - 10 + i] = i++;\n\n/**\n * Create a new immutable ObjectID instance\n *\n * @class Represents the BSON ObjectID type\n * @param {String|Number} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n * @return {Object} instance of ObjectID.\n */\nfunction ObjectID(id) {\n  if(!(this instanceof ObjectID)) return new ObjectID(id);\n  if(id && ((id instanceof ObjectID) || id._bsontype===\"ObjectID\"))\n    return id;\n\n  this._bsontype = 'ObjectID';\n\n  // The most common usecase (blank id, new objectId instance)\n  if (id == null || typeof id === 'number') {\n    // Generate a new id\n    this.id = this.generate(id);\n    // Return the object\n    return;\n  }\n\n  // Check if the passed in id is valid\n  var valid = ObjectID.isValid(id);\n\n  // Throw an error if it's not a valid setup\n  if (!valid && id != null) {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  } else if (valid && typeof id === 'string' && id.length === 24) {\n    return ObjectID.createFromHexString(id);\n  } else if (id != null && id.length === 12) {\n    // assume 12 byte string\n    this.id = id;\n  } else if (id != null && typeof id.toHexString === 'function') {\n    // Duck-typing to support ObjectId from different npm packages\n    return id;\n  } else {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  }\n}\nmodule.exports = ObjectID;\nObjectID.default = ObjectID;\n\n/**\n * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n *\n * @param {Number} time an integer number representing a number of seconds.\n * @return {ObjectID} return the created ObjectID\n * @api public\n */\nObjectID.createFromTime = function(time){\n  time = parseInt(time, 10) % 0xFFFFFFFF;\n  return new ObjectID(hex(8,time)+\"0000000000000000\");\n};\n\n/**\n * Creates an ObjectID from a hex string representation of an ObjectID.\n *\n * @param {String} hexString create a ObjectID from a passed in 24 byte hexstring.\n * @return {ObjectID} return the created ObjectID\n * @api public\n */\nObjectID.createFromHexString = function(hexString) {\n  // Throw an error if it's not a valid setup\n  if (typeof hexString === 'undefined' || (hexString != null && hexString.length !== 24)) {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  }\n\n  // Calculate lengths\n  var data = '';\n  var i = 0;\n\n  while (i < 24) {\n    data += String.fromCharCode((decodeLookup[hexString.charCodeAt(i++)] << 4) | decodeLookup[hexString.charCodeAt(i++)]);\n  }\n\n  return new ObjectID(data);\n};\n\n/**\n * Checks if a value is a valid bson ObjectId\n *\n * @param {String} objectid Can be a 24 byte hex string or an instance of ObjectID.\n * @return {Boolean} return true if the value is a valid bson ObjectID, return false otherwise.\n * @api public\n *\n * THE NATIVE DOCUMENTATION ISN'T CLEAR ON THIS GUY!\n * http://mongodb.github.io/node-mongodb-native/api-bson-generated/objectid.html#objectid-isvalid\n */\nObjectID.isValid = function(id) {\n  if (id == null) return false;\n\n  if (typeof id === 'number') {\n    return true;\n  }\n\n  if (typeof id === 'string') {\n    return id.length === 12 || (id.length === 24 && checkForHexRegExp.test(id));\n  }\n\n  if (id instanceof ObjectID) {\n    return true;\n  }\n\n  if (isBuffer(id)) {\n    return true;\n  }\n\n  // Duck-Typing detection of ObjectId like objects\n  if (\n      typeof id.toHexString === 'function' &&\n      (id.id instanceof _Buffer || typeof id.id === 'string')\n  ) {\n    return id.id.length === 12 || (id.id.length === 24 && checkForHexRegExp.test(id.id));\n  }\n\n  return false;\n};\n\nObjectID.prototype = {\n  constructor: ObjectID,\n\n  /**\n   * Return the ObjectID id as a 24 byte hex string representation\n   *\n   * @return {String} return the 24 byte hex string representation.\n   * @api public\n   */\n  toHexString: function() {\n    if (!this.id || !this.id.length) {\n      throw new Error(\n        'invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [' +\n          JSON.stringify(this.id) +\n          ']'\n      );\n    }\n\n    if (this.id.length === 24) {\n      return this.id;\n    }\n\n    if (isBuffer(this.id)) {\n      return this.id.toString('hex')\n    }\n\n    var hexString = '';\n    for (var i = 0; i < this.id.length; i++) {\n      hexString += hexTable[this.id.charCodeAt(i)];\n    }\n\n    return hexString;\n  },\n\n  /**\n   * Compares the equality of this ObjectID with `otherID`.\n   *\n   * @param {Object} otherId ObjectID instance to compare against.\n   * @return {Boolean} the result of comparing two ObjectID's\n   * @api public\n   */\n  equals: function (otherId){\n    if (otherId instanceof ObjectID) {\n      return this.toString() === otherId.toString();\n    } else if (\n      typeof otherId === 'string' &&\n      ObjectID.isValid(otherId) &&\n      otherId.length === 12 &&\n      isBuffer(this.id)\n    ) {\n      return otherId === this.id.toString('binary');\n    } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 24) {\n      return otherId.toLowerCase() === this.toHexString();\n    } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 12) {\n      return otherId === this.id;\n    } else if (otherId != null && (otherId instanceof ObjectID || otherId.toHexString)) {\n      return otherId.toHexString() === this.toHexString();\n    } else {\n      return false;\n    }\n  },\n\n  /**\n   * Returns the generation date (accurate up to the second) that this ID was generated.\n   *\n   * @return {Date} the generation date\n   * @api public\n   */\n  getTimestamp: function(){\n    var timestamp = new Date();\n    var time;\n    if (isBuffer(this.id)) {\n      time = this.id[3] | (this.id[2] << 8) | (this.id[1] << 16) | (this.id[0] << 24);\n    } else {\n      time = this.id.charCodeAt(3) | (this.id.charCodeAt(2) << 8) | (this.id.charCodeAt(1) << 16) | (this.id.charCodeAt(0) << 24);\n    }\n    timestamp.setTime(Math.floor(time) * 1000);\n    return timestamp;\n  },\n\n  /**\n  * Generate a 12 byte id buffer used in ObjectID's\n  *\n  * @method\n  * @param {number} [time] optional parameter allowing to pass in a second based timestamp.\n  * @return {string} return the 12 byte id buffer string.\n  */\n  generate: function (time) {\n    if ('number' !== typeof time) {\n      time = ~~(Date.now() / 1000);\n    }\n\n    //keep it in the ring!\n    time = parseInt(time, 10) % 0xFFFFFFFF;\n\n    var inc = next();\n\n    return String.fromCharCode(\n      ((time >> 24) & 0xFF),\n      ((time >> 16) & 0xFF),\n      ((time >> 8) & 0xFF),\n      (time & 0xFF),\n      ((MACHINE_ID >> 16) & 0xFF),\n      ((MACHINE_ID >> 8) & 0xFF),\n      (MACHINE_ID & 0xFF),\n      ((pid >> 8) & 0xFF),\n      (pid & 0xFF),\n      ((inc >> 16) & 0xFF),\n      ((inc >> 8) & 0xFF),\n      (inc & 0xFF)\n    )\n  },\n};\n\nfunction next() {\n  return index = (index+1) % 0xFFFFFF;\n}\n\nfunction hex(length, n) {\n  n = n.toString(16);\n  return (n.length===length)? n : \"00000000\".substring(n.length, length) + n;\n}\n\nfunction buffer(str) {\n  var i=0,out=[];\n\n  if(str.length===24)\n    for(;i<24; out.push(parseInt(str[i]+str[i+1], 16)),i+=2);\n\n  else if(str.length===12)\n    for(;i<12; out.push(str.charCodeAt(i)),i++);\n\n  return out;\n}\n\nvar inspect = (Symbol && Symbol.for && Symbol.for('nodejs.util.inspect.custom')) || 'inspect';\n\n/**\n * Converts to a string representation of this Id.\n *\n * @return {String} return the 24 byte hex string representation.\n * @api private\n */\nObjectID.prototype[inspect] = function() { return \"ObjectID(\"+this+\")\" };\nObjectID.prototype.toJSON = ObjectID.prototype.toHexString;\nObjectID.prototype.toString = ObjectID.prototype.toHexString;\n","import { Box, Container, TextField, Typography } from '@mui/material';\nimport ObjectID from 'bson-objectid';\nimport { useEffect, useState } from 'react';\nimport ContentCopyAdornment from '../components/ContentCopyAdornment';\nimport RefreshAdornment from '../components/RefreshAdornment';\n\nconst BSONObjectID = () => {\n  const [hexString, setHexString] = useState<string>('');\n\n  useEffect(() => {\n    refreshHexString();\n  }, []);\n\n  const refreshHexString = () => {\n    setHexString(ObjectID().toHexString());\n  };\n\n  return (\n    <Container>\n      <Typography variant=\"h2\">BSON ObjectID</Typography>\n      <Box sx={{ mt: 2 }}>\n        <TextField\n          label=\"hex\"\n          value={hexString}\n          fullWidth\n          InputProps={{\n            endAdornment: (\n              <>\n                <RefreshAdornment onClick={refreshHexString} />\n                <ContentCopyAdornment content={hexString} />\n              </>\n            ),\n          }}\n        />\n      </Box>\n    </Container>\n  );\n};\nexport default BSONObjectID;\n"],"names":["MACHINE_ID","index","ObjectID","pid","isBuffer","obj","hexTable","i","checkForHexRegExp","decodeLookup","id","valid","objectid","time","hex","hexString","data","otherId","timestamp","inc","next","length","n","inspect","BSONObjectID","setHexString","useState","useEffect","refreshHexString","toHexString","Container","_jsx","Typography","Box","mt","TextField","endAdornment","_Fragment","RefreshAdornment","ContentCopyAdornment"],"mappings":"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"}